// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/pricefeed/market.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Market struct {
	MarketId   string                                          `protobuf:"bytes,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	BaseAsset  string                                          `protobuf:"bytes,2,opt,name=baseAsset,proto3" json:"baseAsset,omitempty"`
	QuoteAsset string                                          `protobuf:"bytes,3,opt,name=quoteAsset,proto3" json:"quoteAsset,omitempty"`
	Oracles    []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,rep,name=oracles,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"oracles,omitempty"`
	Active     bool                                            `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *Market) Reset()         { *m = Market{} }
func (m *Market) String() string { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()    {}
func (*Market) Descriptor() ([]byte, []int) {
	return fileDescriptor_a586f8278791b07c, []int{0}
}
func (m *Market) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Market) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Market.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Market) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Market.Merge(m, src)
}
func (m *Market) XXX_Size() int {
	return m.Size()
}
func (m *Market) XXX_DiscardUnknown() {
	xxx_messageInfo_Market.DiscardUnknown(m)
}

var xxx_messageInfo_Market proto.InternalMessageInfo

func (m *Market) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *Market) GetBaseAsset() string {
	if m != nil {
		return m.BaseAsset
	}
	return ""
}

func (m *Market) GetQuoteAsset() string {
	if m != nil {
		return m.QuoteAsset
	}
	return ""
}

func (m *Market) GetOracles() []github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Oracles
	}
	return nil
}

func (m *Market) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func init() {
	proto.RegisterType((*Market)(nil), "qadena.pricefeed.Market")
}

func init() { proto.RegisterFile("qadena/pricefeed/market.proto", fileDescriptor_a586f8278791b07c) }

var fileDescriptor_a586f8278791b07c = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4e, 0xf3, 0x30,
	0x1c, 0xc5, 0xeb, 0xaf, 0x1f, 0xa5, 0xb5, 0x18, 0x90, 0x41, 0x28, 0x54, 0x60, 0x2a, 0xa6, 0x2e,
	0x8d, 0x87, 0x9e, 0xa0, 0x9d, 0x60, 0x40, 0x42, 0x1d, 0x59, 0x2a, 0xc7, 0xfe, 0x93, 0x46, 0x25,
	0x38, 0x89, 0xdd, 0x8a, 0xde, 0x82, 0x63, 0x70, 0x00, 0x0e, 0xc1, 0x58, 0x31, 0x31, 0x55, 0x25,
	0xb9, 0x05, 0x13, 0xc2, 0x36, 0x25, 0x93, 0xfd, 0xde, 0xef, 0xaf, 0xa7, 0xa7, 0x87, 0xcf, 0x73,
	0x2e, 0xe1, 0x91, 0xb3, 0xac, 0x48, 0x04, 0xdc, 0x03, 0x48, 0x96, 0xf2, 0x62, 0x0e, 0x26, 0xcc,
	0x0a, 0x65, 0x14, 0x39, 0x74, 0x38, 0xdc, 0xe1, 0xee, 0x71, 0xac, 0x62, 0x65, 0x21, 0xfb, 0xf9,
	0xb9, 0xbb, 0xee, 0xa9, 0x50, 0x3a, 0x55, 0x7a, 0xea, 0x80, 0x13, 0x0e, 0x5d, 0x6e, 0x10, 0x6e,
	0xdd, 0xd8, 0x4c, 0xd2, 0xc5, 0x6d, 0x97, 0x7e, 0x2d, 0x03, 0xd4, 0x43, 0xfd, 0xce, 0x64, 0xa7,
	0xc9, 0x19, 0xee, 0x44, 0x5c, 0xc3, 0x48, 0x6b, 0x30, 0xc1, 0x3f, 0x0b, 0xff, 0x0c, 0x42, 0x31,
	0xce, 0x17, 0xca, 0x78, 0xdc, 0xb4, 0xb8, 0xe6, 0x90, 0x08, 0xef, 0xab, 0x82, 0x8b, 0x07, 0xd0,
	0xc1, 0xff, 0x5e, 0xb3, 0x7f, 0x30, 0xbe, 0xfa, 0xda, 0x5c, 0x0c, 0xe2, 0xc4, 0xcc, 0x16, 0x51,
	0x28, 0x54, 0xea, 0x2b, 0xf9, 0x67, 0xa0, 0xe5, 0x9c, 0x99, 0x55, 0x06, 0x3a, 0x1c, 0x09, 0x31,
	0x92, 0xb2, 0x00, 0xad, 0xdf, 0x5f, 0x07, 0x47, 0xbe, 0xb8, 0x77, 0xc6, 0x2b, 0x03, 0x7a, 0xf2,
	0x1b, 0x4c, 0x4e, 0x70, 0x8b, 0x0b, 0x93, 0x2c, 0x21, 0xd8, 0xeb, 0xa1, 0x7e, 0x7b, 0xe2, 0xd5,
	0xf8, 0x76, 0xfb, 0x49, 0xd1, 0x4b, 0x49, 0xd1, 0x5b, 0x49, 0xd1, 0xba, 0xa4, 0x68, 0x5b, 0x52,
	0xf4, 0x5c, 0xd1, 0xc6, 0xba, 0xa2, 0x8d, 0x8f, 0x8a, 0x36, 0xee, 0xc2, 0x7a, 0x91, 0x61, 0x6e,
	0x40, 0xcc, 0x98, 0x1b, 0x76, 0xba, 0x1c, 0xb2, 0xa7, 0xda, 0xf8, 0xb6, 0x54, 0xd4, 0xb2, 0xcb,
	0x0d, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x15, 0x8b, 0x9e, 0x9d, 0x01, 0x00, 0x00,
}

func (this *Market) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Market)
	if !ok {
		that2, ok := that.(Market)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Market")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Market but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Market but is not nil && this == nil")
	}
	if this.MarketId != that1.MarketId {
		return fmt.Errorf("MarketId this(%v) Not Equal that(%v)", this.MarketId, that1.MarketId)
	}
	if this.BaseAsset != that1.BaseAsset {
		return fmt.Errorf("BaseAsset this(%v) Not Equal that(%v)", this.BaseAsset, that1.BaseAsset)
	}
	if this.QuoteAsset != that1.QuoteAsset {
		return fmt.Errorf("QuoteAsset this(%v) Not Equal that(%v)", this.QuoteAsset, that1.QuoteAsset)
	}
	if len(this.Oracles) != len(that1.Oracles) {
		return fmt.Errorf("Oracles this(%v) Not Equal that(%v)", len(this.Oracles), len(that1.Oracles))
	}
	for i := range this.Oracles {
		if !bytes.Equal(this.Oracles[i], that1.Oracles[i]) {
			return fmt.Errorf("Oracles this[%v](%v) Not Equal that[%v](%v)", i, this.Oracles[i], i, that1.Oracles[i])
		}
	}
	if this.Active != that1.Active {
		return fmt.Errorf("Active this(%v) Not Equal that(%v)", this.Active, that1.Active)
	}
	return nil
}
func (this *Market) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Market)
	if !ok {
		that2, ok := that.(Market)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MarketId != that1.MarketId {
		return false
	}
	if this.BaseAsset != that1.BaseAsset {
		return false
	}
	if this.QuoteAsset != that1.QuoteAsset {
		return false
	}
	if len(this.Oracles) != len(that1.Oracles) {
		return false
	}
	for i := range this.Oracles {
		if !bytes.Equal(this.Oracles[i], that1.Oracles[i]) {
			return false
		}
	}
	if this.Active != that1.Active {
		return false
	}
	return true
}
func (m *Market) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Market) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Market) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Oracles[iNdEx])
			copy(dAtA[i:], m.Oracles[iNdEx])
			i = encodeVarintMarket(dAtA, i, uint64(len(m.Oracles[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.QuoteAsset) > 0 {
		i -= len(m.QuoteAsset)
		copy(dAtA[i:], m.QuoteAsset)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.QuoteAsset)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseAsset) > 0 {
		i -= len(m.BaseAsset)
		copy(dAtA[i:], m.BaseAsset)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.BaseAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Market) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.BaseAsset)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.QuoteAsset)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if len(m.Oracles) > 0 {
		for _, b := range m.Oracles {
			l = len(b)
			n += 1 + l + sovMarket(uint64(l))
		}
	}
	if m.Active {
		n += 2
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Market) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Market: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Market: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, make([]byte, postIndex-iNdEx))
			copy(m.Oracles[len(m.Oracles)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
