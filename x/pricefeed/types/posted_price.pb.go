// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/pricefeed/posted_price.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PostedPrice struct {
	MarketId      string                                        `protobuf:"bytes,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	OracleAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=oracleAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"oracleAddress,omitempty"`
	Price         cosmossdk_io_math.LegacyDec                   `protobuf:"bytes,3,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	Expiry        time.Time                                     `protobuf:"bytes,4,opt,name=expiry,proto3,stdtime" json:"expiry"`
}

func (m *PostedPrice) Reset()         { *m = PostedPrice{} }
func (m *PostedPrice) String() string { return proto.CompactTextString(m) }
func (*PostedPrice) ProtoMessage()    {}
func (*PostedPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a490d321315054f, []int{0}
}
func (m *PostedPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostedPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostedPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostedPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostedPrice.Merge(m, src)
}
func (m *PostedPrice) XXX_Size() int {
	return m.Size()
}
func (m *PostedPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_PostedPrice.DiscardUnknown(m)
}

var xxx_messageInfo_PostedPrice proto.InternalMessageInfo

func (m *PostedPrice) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *PostedPrice) GetOracleAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.OracleAddress
	}
	return nil
}

func (m *PostedPrice) GetExpiry() time.Time {
	if m != nil {
		return m.Expiry
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*PostedPrice)(nil), "qadena.pricefeed.PostedPrice")
}

func init() {
	proto.RegisterFile("qadena/pricefeed/posted_price.proto", fileDescriptor_7a490d321315054f)
}

var fileDescriptor_7a490d321315054f = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x51, 0xc1, 0x4e, 0xf2, 0x40,
	0x10, 0xee, 0xf2, 0xff, 0x12, 0x2c, 0x9a, 0x98, 0xea, 0xa1, 0xd6, 0xa4, 0x25, 0x72, 0xe1, 0xc2,
	0x36, 0xc1, 0x93, 0x89, 0x17, 0x1a, 0x0f, 0x9a, 0x78, 0x20, 0x8d, 0x27, 0x2f, 0xa4, 0xec, 0x0e,
	0xa5, 0x81, 0xb2, 0xb5, 0xbb, 0x24, 0xf4, 0x2d, 0x88, 0xcf, 0xe2, 0x43, 0x70, 0x24, 0x9e, 0x8c,
	0x07, 0x34, 0xf0, 0x16, 0x9e, 0x4c, 0x77, 0x17, 0xa2, 0xa7, 0xdd, 0x99, 0xf9, 0xbe, 0x99, 0x6f,
	0xbe, 0x31, 0x9b, 0xcf, 0x11, 0x85, 0x69, 0xe4, 0x67, 0x79, 0x42, 0x60, 0x08, 0x40, 0xfd, 0x8c,
	0x71, 0x01, 0xb4, 0x2f, 0x13, 0x38, 0xcb, 0x99, 0x60, 0xd6, 0x89, 0x02, 0xe1, 0x3d, 0xc8, 0x39,
	0x8b, 0x59, 0xcc, 0x64, 0xd1, 0x2f, 0x7f, 0x0a, 0xe7, 0x9c, 0x13, 0xc6, 0x53, 0xc6, 0xfb, 0xaa,
	0xa0, 0x02, 0x5d, 0xf2, 0x62, 0xc6, 0xe2, 0x09, 0xf8, 0x32, 0x1a, 0xcc, 0x86, 0xbe, 0x48, 0x52,
	0xe0, 0x22, 0x4a, 0x33, 0x05, 0xb8, 0x7c, 0xa9, 0x98, 0xf5, 0x9e, 0x1c, 0xdd, 0x2b, 0xa7, 0x58,
	0x8e, 0x59, 0x4b, 0xa3, 0x7c, 0x0c, 0xe2, 0x9e, 0xda, 0xa8, 0x81, 0x5a, 0x87, 0xe1, 0x3e, 0xb6,
	0xa6, 0xe6, 0x31, 0xcb, 0x23, 0x32, 0x81, 0x2e, 0xa5, 0x39, 0x70, 0x6e, 0x57, 0x1a, 0xa8, 0x75,
	0x14, 0xdc, 0x7d, 0xaf, 0xbd, 0x76, 0x9c, 0x88, 0xd1, 0x6c, 0x80, 0x09, 0x4b, 0xb5, 0x00, 0xfd,
	0xb4, 0x39, 0x1d, 0xfb, 0xa2, 0xc8, 0x80, 0xe3, 0x2e, 0x21, 0x9a, 0xf8, 0xf6, 0xda, 0x3e, 0xd5,
	0x32, 0x75, 0x26, 0x28, 0x04, 0xf0, 0xf0, 0x6f, 0x7b, 0xeb, 0xda, 0x3c, 0x90, 0xab, 0xdb, 0xff,
	0x4a, 0x21, 0x41, 0x73, 0xb9, 0xf6, 0x8c, 0x8f, 0xb5, 0x77, 0xa1, 0xa8, 0x9c, 0x8e, 0x71, 0xc2,
	0xfc, 0x34, 0x12, 0x23, 0xfc, 0x00, 0x71, 0x44, 0x8a, 0x5b, 0x20, 0xa1, 0x62, 0x58, 0x37, 0x66,
	0x15, 0xe6, 0x59, 0x92, 0x17, 0xf6, 0xff, 0x06, 0x6a, 0xd5, 0x3b, 0x0e, 0x56, 0x46, 0xe0, 0x9d,
	0x11, 0xf8, 0x71, 0x67, 0x44, 0x50, 0x2b, 0xfb, 0x2e, 0x3e, 0x3d, 0x14, 0x6a, 0x4e, 0xd0, 0x59,
	0x6e, 0x5c, 0xb4, 0xda, 0xb8, 0xe8, 0x6b, 0xe3, 0xa2, 0xc5, 0xd6, 0x35, 0x56, 0x5b, 0xd7, 0x78,
	0xdf, 0xba, 0xc6, 0x93, 0xad, 0xef, 0x36, 0xff, 0x75, 0x39, 0xb9, 0xdd, 0xa0, 0x2a, 0x3b, 0x5f,
	0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x17, 0xd7, 0x69, 0xda, 0x01, 0x00, 0x00,
}

func (m *PostedPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostedPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostedPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Expiry, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiry):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPostedPrice(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPostedPrice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintPostedPrice(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintPostedPrice(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPostedPrice(dAtA []byte, offset int, v uint64) int {
	offset -= sovPostedPrice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PostedPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovPostedPrice(uint64(l))
	}
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovPostedPrice(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovPostedPrice(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiry)
	n += 1 + l + sovPostedPrice(uint64(l))
	return n
}

func sovPostedPrice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPostedPrice(x uint64) (n int) {
	return sovPostedPrice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PostedPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostedPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostedPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostedPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostedPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostedPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostedPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostedPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPostedPrice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPostedPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = append(m.OracleAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OracleAddress == nil {
				m.OracleAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostedPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostedPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostedPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostedPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostedPrice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPostedPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostedPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPostedPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPostedPrice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPostedPrice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPostedPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPostedPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPostedPrice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPostedPrice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPostedPrice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPostedPrice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPostedPrice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPostedPrice = fmt.Errorf("proto: unexpected end of group")
)
