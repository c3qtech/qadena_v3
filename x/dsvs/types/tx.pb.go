// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/dsvs/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_854dec8cce5ad9c5, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_854dec8cce5ad9c5, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgCreateDocument struct {
	Creator           string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DocumentID        string             `protobuf:"bytes,2,opt,name=documentID,proto3" json:"documentID,omitempty"`
	DocumentType      string             `protobuf:"bytes,3,opt,name=documentType,proto3" json:"documentType,omitempty"`
	CompanyName       string             `protobuf:"bytes,4,opt,name=companyName,proto3" json:"companyName,omitempty"`
	RequiredSignatory []*VShareSignatory `protobuf:"bytes,5,rep,name=requiredSignatory,proto3" json:"requiredSignatory,omitempty"`
	Hash              []byte             `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	Metadata          string             `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *MsgCreateDocument) Reset()         { *m = MsgCreateDocument{} }
func (m *MsgCreateDocument) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDocument) ProtoMessage()    {}
func (*MsgCreateDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_854dec8cce5ad9c5, []int{2}
}
func (m *MsgCreateDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDocument.Merge(m, src)
}
func (m *MsgCreateDocument) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDocument.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDocument proto.InternalMessageInfo

func (m *MsgCreateDocument) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateDocument) GetDocumentID() string {
	if m != nil {
		return m.DocumentID
	}
	return ""
}

func (m *MsgCreateDocument) GetDocumentType() string {
	if m != nil {
		return m.DocumentType
	}
	return ""
}

func (m *MsgCreateDocument) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *MsgCreateDocument) GetRequiredSignatory() []*VShareSignatory {
	if m != nil {
		return m.RequiredSignatory
	}
	return nil
}

func (m *MsgCreateDocument) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *MsgCreateDocument) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type MsgCreateDocumentResponse struct {
}

func (m *MsgCreateDocumentResponse) Reset()         { *m = MsgCreateDocumentResponse{} }
func (m *MsgCreateDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDocumentResponse) ProtoMessage()    {}
func (*MsgCreateDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_854dec8cce5ad9c5, []int{3}
}
func (m *MsgCreateDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDocumentResponse.Merge(m, src)
}
func (m *MsgCreateDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDocumentResponse proto.InternalMessageInfo

type MsgSignDocument struct {
	Creator            string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CompletedSignatory *VShareSignatory `protobuf:"bytes,2,opt,name=completedSignatory,proto3" json:"completedSignatory,omitempty"`
	CurrentHash        []byte           `protobuf:"bytes,3,opt,name=currentHash,proto3" json:"currentHash,omitempty"`
	Hash               []byte           `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *MsgSignDocument) Reset()         { *m = MsgSignDocument{} }
func (m *MsgSignDocument) String() string { return proto.CompactTextString(m) }
func (*MsgSignDocument) ProtoMessage()    {}
func (*MsgSignDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_854dec8cce5ad9c5, []int{4}
}
func (m *MsgSignDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignDocument.Merge(m, src)
}
func (m *MsgSignDocument) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignDocument.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignDocument proto.InternalMessageInfo

func (m *MsgSignDocument) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSignDocument) GetCompletedSignatory() *VShareSignatory {
	if m != nil {
		return m.CompletedSignatory
	}
	return nil
}

func (m *MsgSignDocument) GetCurrentHash() []byte {
	if m != nil {
		return m.CurrentHash
	}
	return nil
}

func (m *MsgSignDocument) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type MsgSignDocumentResponse struct {
}

func (m *MsgSignDocumentResponse) Reset()         { *m = MsgSignDocumentResponse{} }
func (m *MsgSignDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignDocumentResponse) ProtoMessage()    {}
func (*MsgSignDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_854dec8cce5ad9c5, []int{5}
}
func (m *MsgSignDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignDocumentResponse.Merge(m, src)
}
func (m *MsgSignDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignDocumentResponse proto.InternalMessageInfo

type MsgRegisterAuthorizedSignatory struct {
	Creator                   string                     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VShareAuthorizedSignatory *VShareAuthorizedSignatory `protobuf:"bytes,2,opt,name=vShareAuthorizedSignatory,proto3" json:"vShareAuthorizedSignatory,omitempty"`
}

func (m *MsgRegisterAuthorizedSignatory) Reset()         { *m = MsgRegisterAuthorizedSignatory{} }
func (m *MsgRegisterAuthorizedSignatory) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAuthorizedSignatory) ProtoMessage()    {}
func (*MsgRegisterAuthorizedSignatory) Descriptor() ([]byte, []int) {
	return fileDescriptor_854dec8cce5ad9c5, []int{6}
}
func (m *MsgRegisterAuthorizedSignatory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAuthorizedSignatory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAuthorizedSignatory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAuthorizedSignatory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAuthorizedSignatory.Merge(m, src)
}
func (m *MsgRegisterAuthorizedSignatory) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAuthorizedSignatory) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAuthorizedSignatory.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAuthorizedSignatory proto.InternalMessageInfo

func (m *MsgRegisterAuthorizedSignatory) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterAuthorizedSignatory) GetVShareAuthorizedSignatory() *VShareAuthorizedSignatory {
	if m != nil {
		return m.VShareAuthorizedSignatory
	}
	return nil
}

type MsgRegisterAuthorizedSignatoryResponse struct {
}

func (m *MsgRegisterAuthorizedSignatoryResponse) Reset() {
	*m = MsgRegisterAuthorizedSignatoryResponse{}
}
func (m *MsgRegisterAuthorizedSignatoryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAuthorizedSignatoryResponse) ProtoMessage()    {}
func (*MsgRegisterAuthorizedSignatoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_854dec8cce5ad9c5, []int{7}
}
func (m *MsgRegisterAuthorizedSignatoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAuthorizedSignatoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAuthorizedSignatoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAuthorizedSignatoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAuthorizedSignatoryResponse.Merge(m, src)
}
func (m *MsgRegisterAuthorizedSignatoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAuthorizedSignatoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAuthorizedSignatoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAuthorizedSignatoryResponse proto.InternalMessageInfo

type MsgRemoveDocument struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DocumentID string `protobuf:"bytes,2,opt,name=documentID,proto3" json:"documentID,omitempty"`
}

func (m *MsgRemoveDocument) Reset()         { *m = MsgRemoveDocument{} }
func (m *MsgRemoveDocument) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveDocument) ProtoMessage()    {}
func (*MsgRemoveDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_854dec8cce5ad9c5, []int{8}
}
func (m *MsgRemoveDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveDocument.Merge(m, src)
}
func (m *MsgRemoveDocument) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveDocument.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveDocument proto.InternalMessageInfo

func (m *MsgRemoveDocument) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveDocument) GetDocumentID() string {
	if m != nil {
		return m.DocumentID
	}
	return ""
}

type MsgRemoveDocumentResponse struct {
}

func (m *MsgRemoveDocumentResponse) Reset()         { *m = MsgRemoveDocumentResponse{} }
func (m *MsgRemoveDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveDocumentResponse) ProtoMessage()    {}
func (*MsgRemoveDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_854dec8cce5ad9c5, []int{9}
}
func (m *MsgRemoveDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveDocumentResponse.Merge(m, src)
}
func (m *MsgRemoveDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveDocumentResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "qadena.dsvs.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "qadena.dsvs.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateDocument)(nil), "qadena.dsvs.MsgCreateDocument")
	proto.RegisterType((*MsgCreateDocumentResponse)(nil), "qadena.dsvs.MsgCreateDocumentResponse")
	proto.RegisterType((*MsgSignDocument)(nil), "qadena.dsvs.MsgSignDocument")
	proto.RegisterType((*MsgSignDocumentResponse)(nil), "qadena.dsvs.MsgSignDocumentResponse")
	proto.RegisterType((*MsgRegisterAuthorizedSignatory)(nil), "qadena.dsvs.MsgRegisterAuthorizedSignatory")
	proto.RegisterType((*MsgRegisterAuthorizedSignatoryResponse)(nil), "qadena.dsvs.MsgRegisterAuthorizedSignatoryResponse")
	proto.RegisterType((*MsgRemoveDocument)(nil), "qadena.dsvs.MsgRemoveDocument")
	proto.RegisterType((*MsgRemoveDocumentResponse)(nil), "qadena.dsvs.MsgRemoveDocumentResponse")
}

func init() { proto.RegisterFile("qadena/dsvs/tx.proto", fileDescriptor_854dec8cce5ad9c5) }

var fileDescriptor_854dec8cce5ad9c5 = []byte{
	// 715 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0x8d, 0x9b, 0x7e, 0xbc, 0x4c, 0xa2, 0xf7, 0xd4, 0x79, 0x95, 0xea, 0xb8, 0xc8, 0x44, 0x01,
	0x55, 0xa1, 0x88, 0x58, 0x34, 0x52, 0x17, 0xdd, 0xf5, 0x43, 0x08, 0x10, 0x41, 0xc8, 0x05, 0x84,
	0x60, 0x11, 0x4d, 0xed, 0x91, 0x63, 0x09, 0x7b, 0xdc, 0x99, 0x49, 0xd4, 0xb0, 0x01, 0xb1, 0x64,
	0xc5, 0x1f, 0x60, 0xcf, 0x0a, 0x75, 0xc1, 0x96, 0x7d, 0xd9, 0x55, 0xac, 0x58, 0x21, 0xd4, 0x2e,
	0x2a, 0xfe, 0x05, 0xf2, 0x8c, 0xed, 0xd8, 0x8e, 0x1b, 0x15, 0x89, 0x4d, 0xeb, 0xb9, 0xe7, 0xcc,
	0xbd, 0xf7, 0xdc, 0x39, 0x33, 0x01, 0x4b, 0x07, 0xc8, 0xc6, 0x3e, 0x32, 0x6c, 0x36, 0x64, 0x06,
	0x3f, 0x6c, 0x07, 0x94, 0x70, 0x02, 0xab, 0x32, 0xda, 0x0e, 0xa3, 0xda, 0x22, 0xf2, 0x5c, 0x9f,
	0x18, 0xe2, 0xaf, 0xc4, 0xb5, 0x65, 0x8b, 0x30, 0x8f, 0x30, 0xc3, 0x63, 0x8e, 0x31, 0xbc, 0x1d,
	0xfe, 0x8b, 0x80, 0xba, 0x04, 0x7a, 0x62, 0x65, 0xc8, 0x45, 0x04, 0x2d, 0x39, 0xc4, 0x21, 0x32,
	0x1e, 0x7e, 0x45, 0x51, 0x35, 0x5d, 0x3f, 0x40, 0x14, 0x79, 0x31, 0xff, 0x5a, 0x1a, 0x19, 0xf6,
	0x58, 0x1f, 0x51, 0xdc, 0x63, 0xae, 0xe3, 0x23, 0x4e, 0xe8, 0x28, 0x22, 0xb5, 0x8b, 0x48, 0x68,
	0xc0, 0xfb, 0x84, 0xba, 0xaf, 0xb0, 0x9d, 0xe7, 0x37, 0xbf, 0x2a, 0xe0, 0xbf, 0x2e, 0x73, 0x9e,
	0x04, 0x36, 0xe2, 0xf8, 0x91, 0x28, 0x07, 0x37, 0x40, 0x25, 0xda, 0xc1, 0x47, 0xaa, 0xd2, 0x50,
	0x5a, 0x95, 0x6d, 0xf5, 0xdb, 0xe7, 0x5b, 0x4b, 0x51, 0xf7, 0x5b, 0xb6, 0x4d, 0x31, 0x63, 0x7b,
	0x9c, 0xba, 0xbe, 0x63, 0x8e, 0xa9, 0x70, 0x03, 0xcc, 0xcb, 0x86, 0xd5, 0x99, 0x86, 0xd2, 0xaa,
	0xae, 0xff, 0xdf, 0x4e, 0x4d, 0xad, 0x2d, 0x93, 0x6f, 0x57, 0x8e, 0x7f, 0x5c, 0x2d, 0x7d, 0x3c,
	0x3f, 0x5a, 0x53, 0xcc, 0x88, 0xbd, 0x79, 0xe7, 0xed, 0xf9, 0xd1, 0xda, 0x38, 0xcf, 0xbb, 0xf3,
	0xa3, 0xb5, 0x8e, 0xe3, 0xf2, 0xfe, 0x60, 0xbf, 0x6d, 0x11, 0xcf, 0xb0, 0x3a, 0x07, 0x1c, 0x5b,
	0x7d, 0x43, 0x26, 0xeb, 0x0d, 0x3b, 0xc6, 0xa1, 0x94, 0x97, 0xeb, 0xbb, 0x59, 0x07, 0xcb, 0xb9,
	0x90, 0x89, 0x59, 0x40, 0x7c, 0x86, 0x9b, 0x1f, 0x66, 0xc0, 0x62, 0x97, 0x39, 0x3b, 0x14, 0x23,
	0x8e, 0x77, 0x89, 0x35, 0xf0, 0xb0, 0xcf, 0xa1, 0x0a, 0x16, 0xac, 0x30, 0x42, 0xa8, 0x94, 0x69,
	0xc6, 0x4b, 0xa8, 0x03, 0x60, 0x47, 0xac, 0x7b, 0xbb, 0x42, 0x4e, 0xc5, 0x4c, 0x45, 0x60, 0x13,
	0xd4, 0xe2, 0xd5, 0xe3, 0x51, 0x80, 0xd5, 0xb2, 0x60, 0x64, 0x62, 0xb0, 0x01, 0xaa, 0x16, 0xf1,
	0x02, 0xe4, 0x8f, 0x1e, 0x22, 0x0f, 0xab, 0xb3, 0x82, 0x92, 0x0e, 0xc1, 0xfb, 0x60, 0x91, 0xe2,
	0x83, 0x81, 0x4b, 0xb1, 0xbd, 0x17, 0x9f, 0x8b, 0x3a, 0xd7, 0x28, 0xb7, 0xaa, 0xeb, 0x57, 0x32,
	0xb3, 0x7b, 0xba, 0x17, 0x9e, 0x63, 0xc2, 0x31, 0x27, 0xb7, 0x41, 0x08, 0x66, 0xfb, 0x88, 0xf5,
	0xd5, 0xf9, 0x86, 0xd2, 0xaa, 0x99, 0xe2, 0x1b, 0x6a, 0xe0, 0x1f, 0x0f, 0x73, 0x64, 0x23, 0x8e,
	0xd4, 0x05, 0x51, 0x3e, 0x59, 0x6f, 0xd6, 0xc2, 0xa1, 0xc7, 0x7a, 0x9b, 0x2b, 0xa0, 0x3e, 0x31,
	0x9e, 0x64, 0x78, 0x5f, 0xa4, 0x47, 0xc2, 0x5a, 0x97, 0x18, 0xdd, 0x03, 0x00, 0x43, 0x8d, 0x2f,
	0x31, 0x4f, 0xab, 0x92, 0x8e, 0x98, 0xae, 0xaa, 0x60, 0x9f, 0x18, 0xe2, 0x80, 0x52, 0xec, 0xf3,
	0xbb, 0xa1, 0xba, 0xb2, 0x50, 0x97, 0x0e, 0x25, 0xc2, 0x67, 0xc7, 0xc2, 0x73, 0xe2, 0xa4, 0x2f,
	0xd2, 0xed, 0x27, 0xd2, 0x3e, 0x29, 0x40, 0xef, 0x32, 0xc7, 0xc4, 0x8e, 0xcb, 0x38, 0xa6, 0x5b,
	0xc9, 0x45, 0x19, 0x77, 0x70, 0xb1, 0x52, 0x1b, 0xd4, 0x87, 0x42, 0x42, 0xc1, 0xb6, 0x48, 0xf0,
	0x6a, 0x81, 0xe0, 0x02, 0xb6, 0x79, 0x71, 0xa2, 0x9c, 0x96, 0x16, 0x58, 0x9d, 0xde, 0x6f, 0x22,
	0xed, 0x85, 0x70, 0xbc, 0x89, 0x3d, 0x32, 0xfc, 0x0b, 0x8e, 0x2f, 0xf4, 0x4b, 0x36, 0x79, 0x5c,
	0x79, 0xfd, 0x57, 0x19, 0x94, 0xbb, 0xcc, 0x81, 0x26, 0xa8, 0x65, 0xde, 0x95, 0xec, 0xe9, 0xe7,
	0xae, 0xaa, 0x76, 0x7d, 0x1a, 0x1a, 0xe7, 0x86, 0xcf, 0xc0, 0xbf, 0xb9, 0x4b, 0xac, 0xe7, 0xf7,
	0x65, 0x71, 0x6d, 0x75, 0x3a, 0x9e, 0x64, 0x36, 0x41, 0x2d, 0xe3, 0xf0, 0x89, 0x6e, 0xd3, 0xe8,
	0x64, 0xb7, 0x45, 0xf6, 0x82, 0xaf, 0xc1, 0xca, 0x34, 0x6b, 0xdd, 0xcc, 0x27, 0x99, 0x42, 0xd6,
	0x3a, 0x7f, 0x40, 0x4e, 0x8f, 0x2b, 0xe7, 0x00, 0x7d, 0x32, 0x4d, 0x1a, 0x9f, 0x1c, 0x57, 0xf1,
	0x21, 0x6b, 0x73, 0x6f, 0xc2, 0x37, 0x7c, 0x7b, 0xe7, 0xf8, 0x54, 0x57, 0x4e, 0x4e, 0x75, 0xe5,
	0xe7, 0xa9, 0xae, 0xbc, 0x3f, 0xd3, 0x4b, 0x27, 0x67, 0x7a, 0xe9, 0xfb, 0x99, 0x5e, 0x7a, 0x7e,
	0xe3, 0x32, 0x4f, 0x38, 0x1f, 0x05, 0x98, 0xed, 0xcf, 0x8b, 0xdf, 0xa2, 0xce, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb3, 0xc1, 0x2e, 0x4e, 0x7c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *IS* the dsvs service provider
	// make sure that all the required signatory vshares ccPubK has ss interval public key
	CreateDocument(ctx context.Context, in *MsgCreateDocument, opts ...grpc.CallOption) (*MsgCreateDocumentResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *HAS* the dsvs service provider, and that the signatory vshare ccPubK has its public key
	// make sure that the signatory vshare ccPubK has ss interval public key
	SignDocument(ctx context.Context, in *MsgSignDocument, opts ...grpc.CallOption) (*MsgSignDocumentResponse, error)
	RegisterAuthorizedSignatory(ctx context.Context, in *MsgRegisterAuthorizedSignatory, opts ...grpc.CallOption) (*MsgRegisterAuthorizedSignatoryResponse, error)
	RemoveDocument(ctx context.Context, in *MsgRemoveDocument, opts ...grpc.CallOption) (*MsgRemoveDocumentResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/qadena.dsvs.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateDocument(ctx context.Context, in *MsgCreateDocument, opts ...grpc.CallOption) (*MsgCreateDocumentResponse, error) {
	out := new(MsgCreateDocumentResponse)
	err := c.cc.Invoke(ctx, "/qadena.dsvs.Msg/CreateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignDocument(ctx context.Context, in *MsgSignDocument, opts ...grpc.CallOption) (*MsgSignDocumentResponse, error) {
	out := new(MsgSignDocumentResponse)
	err := c.cc.Invoke(ctx, "/qadena.dsvs.Msg/SignDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterAuthorizedSignatory(ctx context.Context, in *MsgRegisterAuthorizedSignatory, opts ...grpc.CallOption) (*MsgRegisterAuthorizedSignatoryResponse, error) {
	out := new(MsgRegisterAuthorizedSignatoryResponse)
	err := c.cc.Invoke(ctx, "/qadena.dsvs.Msg/RegisterAuthorizedSignatory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveDocument(ctx context.Context, in *MsgRemoveDocument, opts ...grpc.CallOption) (*MsgRemoveDocumentResponse, error) {
	out := new(MsgRemoveDocumentResponse)
	err := c.cc.Invoke(ctx, "/qadena.dsvs.Msg/RemoveDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *IS* the dsvs service provider
	// make sure that all the required signatory vshares ccPubK has ss interval public key
	CreateDocument(context.Context, *MsgCreateDocument) (*MsgCreateDocumentResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *HAS* the dsvs service provider, and that the signatory vshare ccPubK has its public key
	// make sure that the signatory vshare ccPubK has ss interval public key
	SignDocument(context.Context, *MsgSignDocument) (*MsgSignDocumentResponse, error)
	RegisterAuthorizedSignatory(context.Context, *MsgRegisterAuthorizedSignatory) (*MsgRegisterAuthorizedSignatoryResponse, error)
	RemoveDocument(context.Context, *MsgRemoveDocument) (*MsgRemoveDocumentResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateDocument(ctx context.Context, req *MsgCreateDocument) (*MsgCreateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}
func (*UnimplementedMsgServer) SignDocument(ctx context.Context, req *MsgSignDocument) (*MsgSignDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignDocument not implemented")
}
func (*UnimplementedMsgServer) RegisterAuthorizedSignatory(ctx context.Context, req *MsgRegisterAuthorizedSignatory) (*MsgRegisterAuthorizedSignatoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAuthorizedSignatory not implemented")
}
func (*UnimplementedMsgServer) RemoveDocument(ctx context.Context, req *MsgRemoveDocument) (*MsgRemoveDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDocument not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.dsvs.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.dsvs.Msg/CreateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDocument(ctx, req.(*MsgCreateDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.dsvs.Msg/SignDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignDocument(ctx, req.(*MsgSignDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterAuthorizedSignatory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAuthorizedSignatory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAuthorizedSignatory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.dsvs.Msg/RegisterAuthorizedSignatory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAuthorizedSignatory(ctx, req.(*MsgRegisterAuthorizedSignatory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.dsvs.Msg/RemoveDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveDocument(ctx, req.(*MsgRemoveDocument))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qadena.dsvs.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateDocument",
			Handler:    _Msg_CreateDocument_Handler,
		},
		{
			MethodName: "SignDocument",
			Handler:    _Msg_SignDocument_Handler,
		},
		{
			MethodName: "RegisterAuthorizedSignatory",
			Handler:    _Msg_RegisterAuthorizedSignatory_Handler,
		},
		{
			MethodName: "RemoveDocument",
			Handler:    _Msg_RemoveDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qadena/dsvs/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RequiredSignatory) > 0 {
		for iNdEx := len(m.RequiredSignatory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequiredSignatory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DocumentType) > 0 {
		i -= len(m.DocumentType)
		copy(dAtA[i:], m.DocumentType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DocumentType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DocumentID) > 0 {
		i -= len(m.DocumentID)
		copy(dAtA[i:], m.DocumentID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DocumentID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CurrentHash) > 0 {
		i -= len(m.CurrentHash)
		copy(dAtA[i:], m.CurrentHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CurrentHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CompletedSignatory != nil {
		{
			size, err := m.CompletedSignatory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAuthorizedSignatory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAuthorizedSignatory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAuthorizedSignatory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VShareAuthorizedSignatory != nil {
		{
			size, err := m.VShareAuthorizedSignatory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAuthorizedSignatoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAuthorizedSignatoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAuthorizedSignatoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DocumentID) > 0 {
		i -= len(m.DocumentID)
		copy(dAtA[i:], m.DocumentID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DocumentID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DocumentID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DocumentType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.RequiredSignatory) > 0 {
		for _, e := range m.RequiredSignatory {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CompletedSignatory != nil {
		l = m.CompletedSignatory.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CurrentHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterAuthorizedSignatory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VShareAuthorizedSignatory != nil {
		l = m.VShareAuthorizedSignatory.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterAuthorizedSignatoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DocumentID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredSignatory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredSignatory = append(m.RequiredSignatory, &VShareSignatory{})
			if err := m.RequiredSignatory[len(m.RequiredSignatory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedSignatory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedSignatory == nil {
				m.CompletedSignatory = &VShareSignatory{}
			}
			if err := m.CompletedSignatory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentHash = append(m.CurrentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentHash == nil {
				m.CurrentHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAuthorizedSignatory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAuthorizedSignatory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAuthorizedSignatory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VShareAuthorizedSignatory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VShareAuthorizedSignatory == nil {
				m.VShareAuthorizedSignatory = &VShareAuthorizedSignatory{}
			}
			if err := m.VShareAuthorizedSignatory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAuthorizedSignatoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAuthorizedSignatoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAuthorizedSignatoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
