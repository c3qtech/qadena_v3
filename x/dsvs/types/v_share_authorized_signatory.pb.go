// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/dsvs/v_share_authorized_signatory.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VShareAuthorizedSignatory struct {
	EncAuthorizedSignatoryVShare  []byte          `protobuf:"bytes,1,opt,name=encAuthorizedSignatoryVShare,proto3" json:"encAuthorizedSignatoryVShare,omitempty"`
	AuthorizedSignatoryVShareBind *VShareBindData `protobuf:"bytes,2,opt,name=authorizedSignatoryVShareBind,proto3" json:"authorizedSignatoryVShareBind,omitempty"`
	Time                          time.Time       `protobuf:"bytes,3,opt,name=time,proto3,stdtime" json:"time"`
}

func (m *VShareAuthorizedSignatory) Reset()         { *m = VShareAuthorizedSignatory{} }
func (m *VShareAuthorizedSignatory) String() string { return proto.CompactTextString(m) }
func (*VShareAuthorizedSignatory) ProtoMessage()    {}
func (*VShareAuthorizedSignatory) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bfd1332f4bb2c0e, []int{0}
}
func (m *VShareAuthorizedSignatory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VShareAuthorizedSignatory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VShareAuthorizedSignatory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VShareAuthorizedSignatory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VShareAuthorizedSignatory.Merge(m, src)
}
func (m *VShareAuthorizedSignatory) XXX_Size() int {
	return m.Size()
}
func (m *VShareAuthorizedSignatory) XXX_DiscardUnknown() {
	xxx_messageInfo_VShareAuthorizedSignatory.DiscardUnknown(m)
}

var xxx_messageInfo_VShareAuthorizedSignatory proto.InternalMessageInfo

func (m *VShareAuthorizedSignatory) GetEncAuthorizedSignatoryVShare() []byte {
	if m != nil {
		return m.EncAuthorizedSignatoryVShare
	}
	return nil
}

func (m *VShareAuthorizedSignatory) GetAuthorizedSignatoryVShareBind() *VShareBindData {
	if m != nil {
		return m.AuthorizedSignatoryVShareBind
	}
	return nil
}

func (m *VShareAuthorizedSignatory) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*VShareAuthorizedSignatory)(nil), "qadena.dsvs.VShareAuthorizedSignatory")
}

func init() {
	proto.RegisterFile("qadena/dsvs/v_share_authorized_signatory.proto", fileDescriptor_4bfd1332f4bb2c0e)
}

var fileDescriptor_4bfd1332f4bb2c0e = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2b, 0x4c, 0x4c, 0x49,
	0xcd, 0x4b, 0xd4, 0x4f, 0x29, 0x2e, 0x2b, 0xd6, 0x2f, 0x8b, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x8d,
	0x4f, 0x2c, 0x2d, 0xc9, 0xc8, 0x2f, 0xca, 0xac, 0x4a, 0x4d, 0x89, 0x2f, 0xce, 0x4c, 0xcf, 0x4b,
	0x2c, 0xc9, 0x2f, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x86, 0xa8, 0xd7, 0x03,
	0xa9, 0x97, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x8b, 0xeb, 0x83, 0x58, 0x10, 0x25, 0x52, 0xf2,
	0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x60, 0x5e, 0x52, 0x69, 0x9a, 0x7e, 0x49, 0x66, 0x6e,
	0x6a, 0x71, 0x49, 0x62, 0x6e, 0x01, 0x54, 0x81, 0x32, 0x36, 0x3b, 0x93, 0x32, 0xf3, 0x52, 0xe2,
	0x53, 0x12, 0x4b, 0x12, 0x21, 0x8a, 0x94, 0xfe, 0x30, 0x72, 0x49, 0x86, 0x05, 0x83, 0xa4, 0x1c,
	0xe1, 0xae, 0x09, 0x86, 0x39, 0x46, 0xc8, 0x89, 0x4b, 0x26, 0x35, 0x2f, 0x19, 0x8b, 0x0c, 0x44,
	0x8b, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x5e, 0x35, 0x42, 0x89, 0x5c, 0xb2, 0x89, 0xb8,
	0x24, 0x9d, 0x32, 0xf3, 0x52, 0x24, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0xa4, 0xf5, 0x90, 0xbc,
	0xac, 0x87, 0x90, 0x76, 0x49, 0x2c, 0x49, 0x0c, 0xc2, 0x6f, 0x82, 0x90, 0x05, 0x17, 0x0b, 0xc8,
	0xf3, 0x12, 0xcc, 0x60, 0x93, 0xa4, 0xf4, 0x20, 0x21, 0xa3, 0x07, 0x0b, 0x19, 0xbd, 0x10, 0x58,
	0xc8, 0x38, 0x71, 0x9c, 0xb8, 0x27, 0xcf, 0x30, 0xe1, 0xbe, 0x3c, 0x63, 0x10, 0x58, 0x87, 0x93,
	0xee, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1,
	0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x09, 0x43, 0x43, 0xaf, 0x02,
	0x12, 0x7e, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x23, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x4f, 0x44, 0xa1, 0x01, 0xcf, 0x01, 0x00, 0x00,
}

func (m *VShareAuthorizedSignatory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VShareAuthorizedSignatory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VShareAuthorizedSignatory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintVShareAuthorizedSignatory(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.AuthorizedSignatoryVShareBind != nil {
		{
			size, err := m.AuthorizedSignatoryVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVShareAuthorizedSignatory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncAuthorizedSignatoryVShare) > 0 {
		i -= len(m.EncAuthorizedSignatoryVShare)
		copy(dAtA[i:], m.EncAuthorizedSignatoryVShare)
		i = encodeVarintVShareAuthorizedSignatory(dAtA, i, uint64(len(m.EncAuthorizedSignatoryVShare)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVShareAuthorizedSignatory(dAtA []byte, offset int, v uint64) int {
	offset -= sovVShareAuthorizedSignatory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VShareAuthorizedSignatory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncAuthorizedSignatoryVShare)
	if l > 0 {
		n += 1 + l + sovVShareAuthorizedSignatory(uint64(l))
	}
	if m.AuthorizedSignatoryVShareBind != nil {
		l = m.AuthorizedSignatoryVShareBind.Size()
		n += 1 + l + sovVShareAuthorizedSignatory(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovVShareAuthorizedSignatory(uint64(l))
	return n
}

func sovVShareAuthorizedSignatory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVShareAuthorizedSignatory(x uint64) (n int) {
	return sovVShareAuthorizedSignatory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VShareAuthorizedSignatory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVShareAuthorizedSignatory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VShareAuthorizedSignatory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VShareAuthorizedSignatory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncAuthorizedSignatoryVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareAuthorizedSignatory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVShareAuthorizedSignatory
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVShareAuthorizedSignatory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncAuthorizedSignatoryVShare = append(m.EncAuthorizedSignatoryVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncAuthorizedSignatoryVShare == nil {
				m.EncAuthorizedSignatoryVShare = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedSignatoryVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareAuthorizedSignatory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareAuthorizedSignatory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareAuthorizedSignatory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizedSignatoryVShareBind == nil {
				m.AuthorizedSignatoryVShareBind = &VShareBindData{}
			}
			if err := m.AuthorizedSignatoryVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareAuthorizedSignatory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareAuthorizedSignatory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareAuthorizedSignatory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVShareAuthorizedSignatory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVShareAuthorizedSignatory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVShareAuthorizedSignatory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVShareAuthorizedSignatory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVShareAuthorizedSignatory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVShareAuthorizedSignatory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVShareAuthorizedSignatory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVShareAuthorizedSignatory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVShareAuthorizedSignatory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVShareAuthorizedSignatory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVShareAuthorizedSignatory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVShareAuthorizedSignatory = fmt.Errorf("proto: unexpected end of group")
)
