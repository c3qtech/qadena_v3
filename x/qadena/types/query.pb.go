// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCredentialRequest struct {
	CredentialID   string `protobuf:"bytes,1,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
	CredentialType string `protobuf:"bytes,2,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
}

func (m *QueryGetCredentialRequest) Reset()         { *m = QueryGetCredentialRequest{} }
func (m *QueryGetCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCredentialRequest) ProtoMessage()    {}
func (*QueryGetCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{2}
}
func (m *QueryGetCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCredentialRequest.Merge(m, src)
}
func (m *QueryGetCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCredentialRequest proto.InternalMessageInfo

func (m *QueryGetCredentialRequest) GetCredentialID() string {
	if m != nil {
		return m.CredentialID
	}
	return ""
}

func (m *QueryGetCredentialRequest) GetCredentialType() string {
	if m != nil {
		return m.CredentialType
	}
	return ""
}

type QueryGetCredentialResponse struct {
	Credential Credential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential"`
}

func (m *QueryGetCredentialResponse) Reset()         { *m = QueryGetCredentialResponse{} }
func (m *QueryGetCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCredentialResponse) ProtoMessage()    {}
func (*QueryGetCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{3}
}
func (m *QueryGetCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCredentialResponse.Merge(m, src)
}
func (m *QueryGetCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCredentialResponse proto.InternalMessageInfo

func (m *QueryGetCredentialResponse) GetCredential() Credential {
	if m != nil {
		return m.Credential
	}
	return Credential{}
}

type QueryAllCredentialRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCredentialRequest) Reset()         { *m = QueryAllCredentialRequest{} }
func (m *QueryAllCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCredentialRequest) ProtoMessage()    {}
func (*QueryAllCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{4}
}
func (m *QueryAllCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCredentialRequest.Merge(m, src)
}
func (m *QueryAllCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCredentialRequest proto.InternalMessageInfo

func (m *QueryAllCredentialRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCredentialResponse struct {
	Credential []Credential        `protobuf:"bytes,1,rep,name=credential,proto3" json:"credential"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCredentialResponse) Reset()         { *m = QueryAllCredentialResponse{} }
func (m *QueryAllCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCredentialResponse) ProtoMessage()    {}
func (*QueryAllCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{5}
}
func (m *QueryAllCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCredentialResponse.Merge(m, src)
}
func (m *QueryAllCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCredentialResponse proto.InternalMessageInfo

func (m *QueryAllCredentialResponse) GetCredential() []Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (m *QueryAllCredentialResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPublicKeyRequest struct {
	PubKID   string `protobuf:"bytes,1,opt,name=pubKID,proto3" json:"pubKID,omitempty"`
	PubKType string `protobuf:"bytes,2,opt,name=pubKType,proto3" json:"pubKType,omitempty"`
}

func (m *QueryGetPublicKeyRequest) Reset()         { *m = QueryGetPublicKeyRequest{} }
func (m *QueryGetPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPublicKeyRequest) ProtoMessage()    {}
func (*QueryGetPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{6}
}
func (m *QueryGetPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPublicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPublicKeyRequest.Merge(m, src)
}
func (m *QueryGetPublicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPublicKeyRequest proto.InternalMessageInfo

func (m *QueryGetPublicKeyRequest) GetPubKID() string {
	if m != nil {
		return m.PubKID
	}
	return ""
}

func (m *QueryGetPublicKeyRequest) GetPubKType() string {
	if m != nil {
		return m.PubKType
	}
	return ""
}

type QueryGetPublicKeyResponse struct {
	PublicKey PublicKey `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey"`
}

func (m *QueryGetPublicKeyResponse) Reset()         { *m = QueryGetPublicKeyResponse{} }
func (m *QueryGetPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPublicKeyResponse) ProtoMessage()    {}
func (*QueryGetPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{7}
}
func (m *QueryGetPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPublicKeyResponse.Merge(m, src)
}
func (m *QueryGetPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPublicKeyResponse proto.InternalMessageInfo

func (m *QueryGetPublicKeyResponse) GetPublicKey() PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return PublicKey{}
}

type QueryAllPublicKeyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPublicKeyRequest) Reset()         { *m = QueryAllPublicKeyRequest{} }
func (m *QueryAllPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPublicKeyRequest) ProtoMessage()    {}
func (*QueryAllPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{8}
}
func (m *QueryAllPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPublicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPublicKeyRequest.Merge(m, src)
}
func (m *QueryAllPublicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPublicKeyRequest proto.InternalMessageInfo

func (m *QueryAllPublicKeyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPublicKeyResponse struct {
	PublicKey  []PublicKey         `protobuf:"bytes,1,rep,name=publicKey,proto3" json:"publicKey"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPublicKeyResponse) Reset()         { *m = QueryAllPublicKeyResponse{} }
func (m *QueryAllPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPublicKeyResponse) ProtoMessage()    {}
func (*QueryAllPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{9}
}
func (m *QueryAllPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPublicKeyResponse.Merge(m, src)
}
func (m *QueryAllPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPublicKeyResponse proto.InternalMessageInfo

func (m *QueryAllPublicKeyResponse) GetPublicKey() []PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *QueryAllPublicKeyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetWalletRequest struct {
	WalletID string `protobuf:"bytes,1,opt,name=walletID,proto3" json:"walletID,omitempty"`
}

func (m *QueryGetWalletRequest) Reset()         { *m = QueryGetWalletRequest{} }
func (m *QueryGetWalletRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWalletRequest) ProtoMessage()    {}
func (*QueryGetWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{10}
}
func (m *QueryGetWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWalletRequest.Merge(m, src)
}
func (m *QueryGetWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWalletRequest proto.InternalMessageInfo

func (m *QueryGetWalletRequest) GetWalletID() string {
	if m != nil {
		return m.WalletID
	}
	return ""
}

type QueryGetWalletResponse struct {
	Wallet Wallet `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet"`
}

func (m *QueryGetWalletResponse) Reset()         { *m = QueryGetWalletResponse{} }
func (m *QueryGetWalletResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWalletResponse) ProtoMessage()    {}
func (*QueryGetWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{11}
}
func (m *QueryGetWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWalletResponse.Merge(m, src)
}
func (m *QueryGetWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWalletResponse proto.InternalMessageInfo

func (m *QueryGetWalletResponse) GetWallet() Wallet {
	if m != nil {
		return m.Wallet
	}
	return Wallet{}
}

type QueryAllWalletRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWalletRequest) Reset()         { *m = QueryAllWalletRequest{} }
func (m *QueryAllWalletRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllWalletRequest) ProtoMessage()    {}
func (*QueryAllWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{12}
}
func (m *QueryAllWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWalletRequest.Merge(m, src)
}
func (m *QueryAllWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWalletRequest proto.InternalMessageInfo

func (m *QueryAllWalletRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllWalletResponse struct {
	Wallet     []Wallet            `protobuf:"bytes,1,rep,name=wallet,proto3" json:"wallet"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWalletResponse) Reset()         { *m = QueryAllWalletResponse{} }
func (m *QueryAllWalletResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllWalletResponse) ProtoMessage()    {}
func (*QueryAllWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{13}
}
func (m *QueryAllWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWalletResponse.Merge(m, src)
}
func (m *QueryAllWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWalletResponse proto.InternalMessageInfo

func (m *QueryAllWalletResponse) GetWallet() []Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *QueryAllWalletResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIntervalPublicKeyIDRequest struct {
	NodeID   string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NodeType string `protobuf:"bytes,2,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
}

func (m *QueryGetIntervalPublicKeyIDRequest) Reset()         { *m = QueryGetIntervalPublicKeyIDRequest{} }
func (m *QueryGetIntervalPublicKeyIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIntervalPublicKeyIDRequest) ProtoMessage()    {}
func (*QueryGetIntervalPublicKeyIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{14}
}
func (m *QueryGetIntervalPublicKeyIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIntervalPublicKeyIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIntervalPublicKeyIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIntervalPublicKeyIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIntervalPublicKeyIDRequest.Merge(m, src)
}
func (m *QueryGetIntervalPublicKeyIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIntervalPublicKeyIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIntervalPublicKeyIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIntervalPublicKeyIDRequest proto.InternalMessageInfo

func (m *QueryGetIntervalPublicKeyIDRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *QueryGetIntervalPublicKeyIDRequest) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

type QueryGetIntervalPublicKeyIDResponse struct {
	IntervalPublicKeyID IntervalPublicKeyID `protobuf:"bytes,1,opt,name=intervalPublicKeyID,proto3" json:"intervalPublicKeyID"`
}

func (m *QueryGetIntervalPublicKeyIDResponse) Reset()         { *m = QueryGetIntervalPublicKeyIDResponse{} }
func (m *QueryGetIntervalPublicKeyIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIntervalPublicKeyIDResponse) ProtoMessage()    {}
func (*QueryGetIntervalPublicKeyIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{15}
}
func (m *QueryGetIntervalPublicKeyIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIntervalPublicKeyIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIntervalPublicKeyIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIntervalPublicKeyIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIntervalPublicKeyIDResponse.Merge(m, src)
}
func (m *QueryGetIntervalPublicKeyIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIntervalPublicKeyIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIntervalPublicKeyIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIntervalPublicKeyIDResponse proto.InternalMessageInfo

func (m *QueryGetIntervalPublicKeyIDResponse) GetIntervalPublicKeyID() IntervalPublicKeyID {
	if m != nil {
		return m.IntervalPublicKeyID
	}
	return IntervalPublicKeyID{}
}

type QueryAllIntervalPublicKeyIDRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIntervalPublicKeyIDRequest) Reset()         { *m = QueryAllIntervalPublicKeyIDRequest{} }
func (m *QueryAllIntervalPublicKeyIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIntervalPublicKeyIDRequest) ProtoMessage()    {}
func (*QueryAllIntervalPublicKeyIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{16}
}
func (m *QueryAllIntervalPublicKeyIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIntervalPublicKeyIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIntervalPublicKeyIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIntervalPublicKeyIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIntervalPublicKeyIDRequest.Merge(m, src)
}
func (m *QueryAllIntervalPublicKeyIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIntervalPublicKeyIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIntervalPublicKeyIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIntervalPublicKeyIDRequest proto.InternalMessageInfo

func (m *QueryAllIntervalPublicKeyIDRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIntervalPublicKeyIDResponse struct {
	IntervalPublicKeyID []IntervalPublicKeyID `protobuf:"bytes,1,rep,name=intervalPublicKeyID,proto3" json:"intervalPublicKeyID"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIntervalPublicKeyIDResponse) Reset()         { *m = QueryAllIntervalPublicKeyIDResponse{} }
func (m *QueryAllIntervalPublicKeyIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIntervalPublicKeyIDResponse) ProtoMessage()    {}
func (*QueryAllIntervalPublicKeyIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{17}
}
func (m *QueryAllIntervalPublicKeyIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIntervalPublicKeyIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIntervalPublicKeyIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIntervalPublicKeyIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIntervalPublicKeyIDResponse.Merge(m, src)
}
func (m *QueryAllIntervalPublicKeyIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIntervalPublicKeyIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIntervalPublicKeyIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIntervalPublicKeyIDResponse proto.InternalMessageInfo

func (m *QueryAllIntervalPublicKeyIDResponse) GetIntervalPublicKeyID() []IntervalPublicKeyID {
	if m != nil {
		return m.IntervalPublicKeyID
	}
	return nil
}

func (m *QueryAllIntervalPublicKeyIDResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPioneerJarRequest struct {
	PioneerID string `protobuf:"bytes,1,opt,name=pioneerID,proto3" json:"pioneerID,omitempty"`
}

func (m *QueryGetPioneerJarRequest) Reset()         { *m = QueryGetPioneerJarRequest{} }
func (m *QueryGetPioneerJarRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPioneerJarRequest) ProtoMessage()    {}
func (*QueryGetPioneerJarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{18}
}
func (m *QueryGetPioneerJarRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPioneerJarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPioneerJarRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPioneerJarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPioneerJarRequest.Merge(m, src)
}
func (m *QueryGetPioneerJarRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPioneerJarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPioneerJarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPioneerJarRequest proto.InternalMessageInfo

func (m *QueryGetPioneerJarRequest) GetPioneerID() string {
	if m != nil {
		return m.PioneerID
	}
	return ""
}

type QueryGetPioneerJarResponse struct {
	PioneerJar PioneerJar `protobuf:"bytes,1,opt,name=pioneerJar,proto3" json:"pioneerJar"`
}

func (m *QueryGetPioneerJarResponse) Reset()         { *m = QueryGetPioneerJarResponse{} }
func (m *QueryGetPioneerJarResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPioneerJarResponse) ProtoMessage()    {}
func (*QueryGetPioneerJarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{19}
}
func (m *QueryGetPioneerJarResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPioneerJarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPioneerJarResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPioneerJarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPioneerJarResponse.Merge(m, src)
}
func (m *QueryGetPioneerJarResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPioneerJarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPioneerJarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPioneerJarResponse proto.InternalMessageInfo

func (m *QueryGetPioneerJarResponse) GetPioneerJar() PioneerJar {
	if m != nil {
		return m.PioneerJar
	}
	return PioneerJar{}
}

type QueryAllPioneerJarRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPioneerJarRequest) Reset()         { *m = QueryAllPioneerJarRequest{} }
func (m *QueryAllPioneerJarRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPioneerJarRequest) ProtoMessage()    {}
func (*QueryAllPioneerJarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{20}
}
func (m *QueryAllPioneerJarRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPioneerJarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPioneerJarRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPioneerJarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPioneerJarRequest.Merge(m, src)
}
func (m *QueryAllPioneerJarRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPioneerJarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPioneerJarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPioneerJarRequest proto.InternalMessageInfo

func (m *QueryAllPioneerJarRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPioneerJarResponse struct {
	PioneerJar []PioneerJar        `protobuf:"bytes,1,rep,name=pioneerJar,proto3" json:"pioneerJar"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPioneerJarResponse) Reset()         { *m = QueryAllPioneerJarResponse{} }
func (m *QueryAllPioneerJarResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPioneerJarResponse) ProtoMessage()    {}
func (*QueryAllPioneerJarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{21}
}
func (m *QueryAllPioneerJarResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPioneerJarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPioneerJarResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPioneerJarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPioneerJarResponse.Merge(m, src)
}
func (m *QueryAllPioneerJarResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPioneerJarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPioneerJarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPioneerJarResponse proto.InternalMessageInfo

func (m *QueryAllPioneerJarResponse) GetPioneerJar() []PioneerJar {
	if m != nil {
		return m.PioneerJar
	}
	return nil
}

func (m *QueryAllPioneerJarResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetJarRegulatorRequest struct {
	JarID string `protobuf:"bytes,1,opt,name=jarID,proto3" json:"jarID,omitempty"`
}

func (m *QueryGetJarRegulatorRequest) Reset()         { *m = QueryGetJarRegulatorRequest{} }
func (m *QueryGetJarRegulatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetJarRegulatorRequest) ProtoMessage()    {}
func (*QueryGetJarRegulatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{22}
}
func (m *QueryGetJarRegulatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetJarRegulatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetJarRegulatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetJarRegulatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetJarRegulatorRequest.Merge(m, src)
}
func (m *QueryGetJarRegulatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetJarRegulatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetJarRegulatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetJarRegulatorRequest proto.InternalMessageInfo

func (m *QueryGetJarRegulatorRequest) GetJarID() string {
	if m != nil {
		return m.JarID
	}
	return ""
}

type QueryGetJarRegulatorResponse struct {
	JarRegulator JarRegulator `protobuf:"bytes,1,opt,name=jarRegulator,proto3" json:"jarRegulator"`
}

func (m *QueryGetJarRegulatorResponse) Reset()         { *m = QueryGetJarRegulatorResponse{} }
func (m *QueryGetJarRegulatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetJarRegulatorResponse) ProtoMessage()    {}
func (*QueryGetJarRegulatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{23}
}
func (m *QueryGetJarRegulatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetJarRegulatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetJarRegulatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetJarRegulatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetJarRegulatorResponse.Merge(m, src)
}
func (m *QueryGetJarRegulatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetJarRegulatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetJarRegulatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetJarRegulatorResponse proto.InternalMessageInfo

func (m *QueryGetJarRegulatorResponse) GetJarRegulator() JarRegulator {
	if m != nil {
		return m.JarRegulator
	}
	return JarRegulator{}
}

type QueryAllJarRegulatorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllJarRegulatorRequest) Reset()         { *m = QueryAllJarRegulatorRequest{} }
func (m *QueryAllJarRegulatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllJarRegulatorRequest) ProtoMessage()    {}
func (*QueryAllJarRegulatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{24}
}
func (m *QueryAllJarRegulatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllJarRegulatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllJarRegulatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllJarRegulatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllJarRegulatorRequest.Merge(m, src)
}
func (m *QueryAllJarRegulatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllJarRegulatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllJarRegulatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllJarRegulatorRequest proto.InternalMessageInfo

func (m *QueryAllJarRegulatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllJarRegulatorResponse struct {
	JarRegulator []JarRegulator      `protobuf:"bytes,1,rep,name=jarRegulator,proto3" json:"jarRegulator"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllJarRegulatorResponse) Reset()         { *m = QueryAllJarRegulatorResponse{} }
func (m *QueryAllJarRegulatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllJarRegulatorResponse) ProtoMessage()    {}
func (*QueryAllJarRegulatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{25}
}
func (m *QueryAllJarRegulatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllJarRegulatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllJarRegulatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllJarRegulatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllJarRegulatorResponse.Merge(m, src)
}
func (m *QueryAllJarRegulatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllJarRegulatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllJarRegulatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllJarRegulatorResponse proto.InternalMessageInfo

func (m *QueryAllJarRegulatorResponse) GetJarRegulator() []JarRegulator {
	if m != nil {
		return m.JarRegulator
	}
	return nil
}

func (m *QueryAllJarRegulatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSuspiciousTransactionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSuspiciousTransactionRequest) Reset()         { *m = QueryGetSuspiciousTransactionRequest{} }
func (m *QueryGetSuspiciousTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuspiciousTransactionRequest) ProtoMessage()    {}
func (*QueryGetSuspiciousTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{26}
}
func (m *QueryGetSuspiciousTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuspiciousTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuspiciousTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuspiciousTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuspiciousTransactionRequest.Merge(m, src)
}
func (m *QueryGetSuspiciousTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuspiciousTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuspiciousTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuspiciousTransactionRequest proto.InternalMessageInfo

func (m *QueryGetSuspiciousTransactionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSuspiciousTransactionResponse struct {
	SuspiciousTransaction SuspiciousTransaction `protobuf:"bytes,1,opt,name=SuspiciousTransaction,proto3" json:"SuspiciousTransaction"`
}

func (m *QueryGetSuspiciousTransactionResponse) Reset()         { *m = QueryGetSuspiciousTransactionResponse{} }
func (m *QueryGetSuspiciousTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuspiciousTransactionResponse) ProtoMessage()    {}
func (*QueryGetSuspiciousTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{27}
}
func (m *QueryGetSuspiciousTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuspiciousTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuspiciousTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuspiciousTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuspiciousTransactionResponse.Merge(m, src)
}
func (m *QueryGetSuspiciousTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuspiciousTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuspiciousTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuspiciousTransactionResponse proto.InternalMessageInfo

func (m *QueryGetSuspiciousTransactionResponse) GetSuspiciousTransaction() SuspiciousTransaction {
	if m != nil {
		return m.SuspiciousTransaction
	}
	return SuspiciousTransaction{}
}

type QueryAllSuspiciousTransactionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSuspiciousTransactionRequest) Reset()         { *m = QueryAllSuspiciousTransactionRequest{} }
func (m *QueryAllSuspiciousTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSuspiciousTransactionRequest) ProtoMessage()    {}
func (*QueryAllSuspiciousTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{28}
}
func (m *QueryAllSuspiciousTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSuspiciousTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSuspiciousTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSuspiciousTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSuspiciousTransactionRequest.Merge(m, src)
}
func (m *QueryAllSuspiciousTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSuspiciousTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSuspiciousTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSuspiciousTransactionRequest proto.InternalMessageInfo

func (m *QueryAllSuspiciousTransactionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSuspiciousTransactionResponse struct {
	SuspiciousTransaction []SuspiciousTransaction `protobuf:"bytes,1,rep,name=SuspiciousTransaction,proto3" json:"SuspiciousTransaction"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSuspiciousTransactionResponse) Reset()         { *m = QueryAllSuspiciousTransactionResponse{} }
func (m *QueryAllSuspiciousTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSuspiciousTransactionResponse) ProtoMessage()    {}
func (*QueryAllSuspiciousTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{29}
}
func (m *QueryAllSuspiciousTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSuspiciousTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSuspiciousTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSuspiciousTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSuspiciousTransactionResponse.Merge(m, src)
}
func (m *QueryAllSuspiciousTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSuspiciousTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSuspiciousTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSuspiciousTransactionResponse proto.InternalMessageInfo

func (m *QueryAllSuspiciousTransactionResponse) GetSuspiciousTransaction() []SuspiciousTransaction {
	if m != nil {
		return m.SuspiciousTransaction
	}
	return nil
}

func (m *QueryAllSuspiciousTransactionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProtectKeyRequest struct {
	WalletID string `protobuf:"bytes,1,opt,name=walletID,proto3" json:"walletID,omitempty"`
}

func (m *QueryGetProtectKeyRequest) Reset()         { *m = QueryGetProtectKeyRequest{} }
func (m *QueryGetProtectKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtectKeyRequest) ProtoMessage()    {}
func (*QueryGetProtectKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{30}
}
func (m *QueryGetProtectKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtectKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtectKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtectKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtectKeyRequest.Merge(m, src)
}
func (m *QueryGetProtectKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtectKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtectKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtectKeyRequest proto.InternalMessageInfo

func (m *QueryGetProtectKeyRequest) GetWalletID() string {
	if m != nil {
		return m.WalletID
	}
	return ""
}

type QueryGetProtectKeyResponse struct {
	ProtectKey ProtectKey `protobuf:"bytes,1,opt,name=protectKey,proto3" json:"protectKey"`
}

func (m *QueryGetProtectKeyResponse) Reset()         { *m = QueryGetProtectKeyResponse{} }
func (m *QueryGetProtectKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtectKeyResponse) ProtoMessage()    {}
func (*QueryGetProtectKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{31}
}
func (m *QueryGetProtectKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtectKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtectKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtectKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtectKeyResponse.Merge(m, src)
}
func (m *QueryGetProtectKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtectKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtectKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtectKeyResponse proto.InternalMessageInfo

func (m *QueryGetProtectKeyResponse) GetProtectKey() ProtectKey {
	if m != nil {
		return m.ProtectKey
	}
	return ProtectKey{}
}

type QueryAllProtectKeyRequest struct {
	Pagination   *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CredentialID string             `protobuf:"bytes,2,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
}

func (m *QueryAllProtectKeyRequest) Reset()         { *m = QueryAllProtectKeyRequest{} }
func (m *QueryAllProtectKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProtectKeyRequest) ProtoMessage()    {}
func (*QueryAllProtectKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{32}
}
func (m *QueryAllProtectKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProtectKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProtectKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProtectKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProtectKeyRequest.Merge(m, src)
}
func (m *QueryAllProtectKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProtectKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProtectKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProtectKeyRequest proto.InternalMessageInfo

func (m *QueryAllProtectKeyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllProtectKeyRequest) GetCredentialID() string {
	if m != nil {
		return m.CredentialID
	}
	return ""
}

type QueryAllProtectKeyResponse struct {
	ProtectKey []ProtectKey        `protobuf:"bytes,1,rep,name=protectKey,proto3" json:"protectKey"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProtectKeyResponse) Reset()         { *m = QueryAllProtectKeyResponse{} }
func (m *QueryAllProtectKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProtectKeyResponse) ProtoMessage()    {}
func (*QueryAllProtectKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{33}
}
func (m *QueryAllProtectKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProtectKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProtectKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProtectKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProtectKeyResponse.Merge(m, src)
}
func (m *QueryAllProtectKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProtectKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProtectKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProtectKeyResponse proto.InternalMessageInfo

func (m *QueryAllProtectKeyResponse) GetProtectKey() []ProtectKey {
	if m != nil {
		return m.ProtectKey
	}
	return nil
}

func (m *QueryAllProtectKeyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRecoverKeyRequest struct {
	WalletID string `protobuf:"bytes,1,opt,name=walletID,proto3" json:"walletID,omitempty"`
}

func (m *QueryGetRecoverKeyRequest) Reset()         { *m = QueryGetRecoverKeyRequest{} }
func (m *QueryGetRecoverKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecoverKeyRequest) ProtoMessage()    {}
func (*QueryGetRecoverKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{34}
}
func (m *QueryGetRecoverKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecoverKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecoverKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecoverKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecoverKeyRequest.Merge(m, src)
}
func (m *QueryGetRecoverKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecoverKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecoverKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecoverKeyRequest proto.InternalMessageInfo

func (m *QueryGetRecoverKeyRequest) GetWalletID() string {
	if m != nil {
		return m.WalletID
	}
	return ""
}

type QueryGetRecoverKeyResponse struct {
	RecoverKey RecoverKey `protobuf:"bytes,1,opt,name=recoverKey,proto3" json:"recoverKey"`
}

func (m *QueryGetRecoverKeyResponse) Reset()         { *m = QueryGetRecoverKeyResponse{} }
func (m *QueryGetRecoverKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecoverKeyResponse) ProtoMessage()    {}
func (*QueryGetRecoverKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{35}
}
func (m *QueryGetRecoverKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecoverKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecoverKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecoverKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecoverKeyResponse.Merge(m, src)
}
func (m *QueryGetRecoverKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecoverKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecoverKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecoverKeyResponse proto.InternalMessageInfo

func (m *QueryGetRecoverKeyResponse) GetRecoverKey() RecoverKey {
	if m != nil {
		return m.RecoverKey
	}
	return RecoverKey{}
}

type QueryAllRecoverKeyRequest struct {
	Pagination   *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CredentialID string             `protobuf:"bytes,2,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
}

func (m *QueryAllRecoverKeyRequest) Reset()         { *m = QueryAllRecoverKeyRequest{} }
func (m *QueryAllRecoverKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecoverKeyRequest) ProtoMessage()    {}
func (*QueryAllRecoverKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{36}
}
func (m *QueryAllRecoverKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecoverKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecoverKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecoverKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecoverKeyRequest.Merge(m, src)
}
func (m *QueryAllRecoverKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecoverKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecoverKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecoverKeyRequest proto.InternalMessageInfo

func (m *QueryAllRecoverKeyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllRecoverKeyRequest) GetCredentialID() string {
	if m != nil {
		return m.CredentialID
	}
	return ""
}

type QueryAllRecoverKeyResponse struct {
	RecoverKey []RecoverKey        `protobuf:"bytes,1,rep,name=recoverKey,proto3" json:"recoverKey"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecoverKeyResponse) Reset()         { *m = QueryAllRecoverKeyResponse{} }
func (m *QueryAllRecoverKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecoverKeyResponse) ProtoMessage()    {}
func (*QueryAllRecoverKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{37}
}
func (m *QueryAllRecoverKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecoverKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecoverKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecoverKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecoverKeyResponse.Merge(m, src)
}
func (m *QueryAllRecoverKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecoverKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecoverKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecoverKeyResponse proto.InternalMessageInfo

func (m *QueryAllRecoverKeyResponse) GetRecoverKey() []RecoverKey {
	if m != nil {
		return m.RecoverKey
	}
	return nil
}

func (m *QueryAllRecoverKeyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryTreasuryRequest struct {
}

func (m *QueryTreasuryRequest) Reset()         { *m = QueryTreasuryRequest{} }
func (m *QueryTreasuryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTreasuryRequest) ProtoMessage()    {}
func (*QueryTreasuryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{38}
}
func (m *QueryTreasuryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTreasuryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTreasuryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTreasuryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTreasuryRequest.Merge(m, src)
}
func (m *QueryTreasuryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTreasuryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTreasuryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTreasuryRequest proto.InternalMessageInfo

type QueryTreasuryResponse struct {
	TotalBalance     types.Coin `protobuf:"bytes,1,opt,name=totalBalance,proto3" json:"totalBalance"`
	EncryptedBalance types.Coin `protobuf:"bytes,2,opt,name=encryptedBalance,proto3" json:"encryptedBalance"`
}

func (m *QueryTreasuryResponse) Reset()         { *m = QueryTreasuryResponse{} }
func (m *QueryTreasuryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTreasuryResponse) ProtoMessage()    {}
func (*QueryTreasuryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{39}
}
func (m *QueryTreasuryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTreasuryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTreasuryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTreasuryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTreasuryResponse.Merge(m, src)
}
func (m *QueryTreasuryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTreasuryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTreasuryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTreasuryResponse proto.InternalMessageInfo

func (m *QueryTreasuryResponse) GetTotalBalance() types.Coin {
	if m != nil {
		return m.TotalBalance
	}
	return types.Coin{}
}

func (m *QueryTreasuryResponse) GetEncryptedBalance() types.Coin {
	if m != nil {
		return m.EncryptedBalance
	}
	return types.Coin{}
}

type QueryAccountRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryAccountRequest) Reset()         { *m = QueryAccountRequest{} }
func (m *QueryAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountRequest) ProtoMessage()    {}
func (*QueryAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{40}
}
func (m *QueryAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountRequest.Merge(m, src)
}
func (m *QueryAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountRequest proto.InternalMessageInfo

func (m *QueryAccountRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryAccountResponse struct {
	TransparentBalance string `protobuf:"bytes,1,opt,name=transparentBalance,proto3" json:"transparentBalance,omitempty"`
	EncryptedBalance   string `protobuf:"bytes,2,opt,name=encryptedBalance,proto3" json:"encryptedBalance,omitempty"`
}

func (m *QueryAccountResponse) Reset()         { *m = QueryAccountResponse{} }
func (m *QueryAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountResponse) ProtoMessage()    {}
func (*QueryAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{41}
}
func (m *QueryAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountResponse.Merge(m, src)
}
func (m *QueryAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountResponse proto.InternalMessageInfo

func (m *QueryAccountResponse) GetTransparentBalance() string {
	if m != nil {
		return m.TransparentBalance
	}
	return ""
}

func (m *QueryAccountResponse) GetEncryptedBalance() string {
	if m != nil {
		return m.EncryptedBalance
	}
	return ""
}

type QueryIncentivesRequest struct {
}

func (m *QueryIncentivesRequest) Reset()         { *m = QueryIncentivesRequest{} }
func (m *QueryIncentivesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivesRequest) ProtoMessage()    {}
func (*QueryIncentivesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{42}
}
func (m *QueryIncentivesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivesRequest.Merge(m, src)
}
func (m *QueryIncentivesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivesRequest proto.InternalMessageInfo

type QueryIncentivesResponse struct {
	CreateWalletIncentive                     types.Coin `protobuf:"bytes,1,opt,name=createWalletIncentive,proto3" json:"createWalletIncentive"`
	CreateEphemeralWalletIncentive            types.Coin `protobuf:"bytes,2,opt,name=createEphemeralWalletIncentive,proto3" json:"createEphemeralWalletIncentive"`
	CreateWalletTransparentIncentive          types.Coin `protobuf:"bytes,3,opt,name=createWalletTransparentIncentive,proto3" json:"createWalletTransparentIncentive"`
	CreateEphemeralWalletTransparentIncentive types.Coin `protobuf:"bytes,4,opt,name=createEphemeralWalletTransparentIncentive,proto3" json:"createEphemeralWalletTransparentIncentive"`
}

func (m *QueryIncentivesResponse) Reset()         { *m = QueryIncentivesResponse{} }
func (m *QueryIncentivesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivesResponse) ProtoMessage()    {}
func (*QueryIncentivesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{43}
}
func (m *QueryIncentivesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivesResponse.Merge(m, src)
}
func (m *QueryIncentivesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivesResponse proto.InternalMessageInfo

func (m *QueryIncentivesResponse) GetCreateWalletIncentive() types.Coin {
	if m != nil {
		return m.CreateWalletIncentive
	}
	return types.Coin{}
}

func (m *QueryIncentivesResponse) GetCreateEphemeralWalletIncentive() types.Coin {
	if m != nil {
		return m.CreateEphemeralWalletIncentive
	}
	return types.Coin{}
}

func (m *QueryIncentivesResponse) GetCreateWalletTransparentIncentive() types.Coin {
	if m != nil {
		return m.CreateWalletTransparentIncentive
	}
	return types.Coin{}
}

func (m *QueryIncentivesResponse) GetCreateEphemeralWalletTransparentIncentive() types.Coin {
	if m != nil {
		return m.CreateEphemeralWalletTransparentIncentive
	}
	return types.Coin{}
}

type QueryEnclaveValidateEnclaveIdentityRequest struct {
	RemoteReport []byte `protobuf:"bytes,1,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
	UniqueID     string `protobuf:"bytes,2,opt,name=uniqueID,proto3" json:"uniqueID,omitempty"`
	SignerID     string `protobuf:"bytes,3,opt,name=signerID,proto3" json:"signerID,omitempty"`
	ProductID    string `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (m *QueryEnclaveValidateEnclaveIdentityRequest) Reset() {
	*m = QueryEnclaveValidateEnclaveIdentityRequest{}
}
func (m *QueryEnclaveValidateEnclaveIdentityRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryEnclaveValidateEnclaveIdentityRequest) ProtoMessage() {}
func (*QueryEnclaveValidateEnclaveIdentityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{44}
}
func (m *QueryEnclaveValidateEnclaveIdentityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnclaveValidateEnclaveIdentityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnclaveValidateEnclaveIdentityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnclaveValidateEnclaveIdentityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnclaveValidateEnclaveIdentityRequest.Merge(m, src)
}
func (m *QueryEnclaveValidateEnclaveIdentityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnclaveValidateEnclaveIdentityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnclaveValidateEnclaveIdentityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnclaveValidateEnclaveIdentityRequest proto.InternalMessageInfo

func (m *QueryEnclaveValidateEnclaveIdentityRequest) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func (m *QueryEnclaveValidateEnclaveIdentityRequest) GetUniqueID() string {
	if m != nil {
		return m.UniqueID
	}
	return ""
}

func (m *QueryEnclaveValidateEnclaveIdentityRequest) GetSignerID() string {
	if m != nil {
		return m.SignerID
	}
	return ""
}

func (m *QueryEnclaveValidateEnclaveIdentityRequest) GetProductID() string {
	if m != nil {
		return m.ProductID
	}
	return ""
}

type QueryEnclaveValidateEnclaveIdentityResponse struct {
	RemoteReport []byte `protobuf:"bytes,1,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
	Status       string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *QueryEnclaveValidateEnclaveIdentityResponse) Reset() {
	*m = QueryEnclaveValidateEnclaveIdentityResponse{}
}
func (m *QueryEnclaveValidateEnclaveIdentityResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryEnclaveValidateEnclaveIdentityResponse) ProtoMessage() {}
func (*QueryEnclaveValidateEnclaveIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{45}
}
func (m *QueryEnclaveValidateEnclaveIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnclaveValidateEnclaveIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnclaveValidateEnclaveIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnclaveValidateEnclaveIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnclaveValidateEnclaveIdentityResponse.Merge(m, src)
}
func (m *QueryEnclaveValidateEnclaveIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnclaveValidateEnclaveIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnclaveValidateEnclaveIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnclaveValidateEnclaveIdentityResponse proto.InternalMessageInfo

func (m *QueryEnclaveValidateEnclaveIdentityResponse) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func (m *QueryEnclaveValidateEnclaveIdentityResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type QueryEnclaveSyncEnclaveRequest struct {
	RemoteReport []byte `protobuf:"bytes,1,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
	EnclavePubK  string `protobuf:"bytes,2,opt,name=enclavePubK,proto3" json:"enclavePubK,omitempty"`
}

func (m *QueryEnclaveSyncEnclaveRequest) Reset()         { *m = QueryEnclaveSyncEnclaveRequest{} }
func (m *QueryEnclaveSyncEnclaveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnclaveSyncEnclaveRequest) ProtoMessage()    {}
func (*QueryEnclaveSyncEnclaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{46}
}
func (m *QueryEnclaveSyncEnclaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnclaveSyncEnclaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnclaveSyncEnclaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnclaveSyncEnclaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnclaveSyncEnclaveRequest.Merge(m, src)
}
func (m *QueryEnclaveSyncEnclaveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnclaveSyncEnclaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnclaveSyncEnclaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnclaveSyncEnclaveRequest proto.InternalMessageInfo

func (m *QueryEnclaveSyncEnclaveRequest) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func (m *QueryEnclaveSyncEnclaveRequest) GetEnclavePubK() string {
	if m != nil {
		return m.EnclavePubK
	}
	return ""
}

type QueryEnclaveSyncEnclaveResponse struct {
	RemoteReport                []byte `protobuf:"bytes,1,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
	EncEnclaveParamsEnclavePubK []byte `protobuf:"bytes,2,opt,name=encEnclaveParamsEnclavePubK,proto3" json:"encEnclaveParamsEnclavePubK,omitempty"`
}

func (m *QueryEnclaveSyncEnclaveResponse) Reset()         { *m = QueryEnclaveSyncEnclaveResponse{} }
func (m *QueryEnclaveSyncEnclaveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnclaveSyncEnclaveResponse) ProtoMessage()    {}
func (*QueryEnclaveSyncEnclaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{47}
}
func (m *QueryEnclaveSyncEnclaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnclaveSyncEnclaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnclaveSyncEnclaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnclaveSyncEnclaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnclaveSyncEnclaveResponse.Merge(m, src)
}
func (m *QueryEnclaveSyncEnclaveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnclaveSyncEnclaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnclaveSyncEnclaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnclaveSyncEnclaveResponse proto.InternalMessageInfo

func (m *QueryEnclaveSyncEnclaveResponse) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func (m *QueryEnclaveSyncEnclaveResponse) GetEncEnclaveParamsEnclavePubK() []byte {
	if m != nil {
		return m.EncEnclaveParamsEnclavePubK
	}
	return nil
}

type QueryEnclaveSecretShareRequest struct {
	RemoteReport []byte `protobuf:"bytes,1,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
	EnclavePubK  string `protobuf:"bytes,2,opt,name=enclavePubK,proto3" json:"enclavePubK,omitempty"`
	PubKID       string `protobuf:"bytes,3,opt,name=pubKID,proto3" json:"pubKID,omitempty"`
}

func (m *QueryEnclaveSecretShareRequest) Reset()         { *m = QueryEnclaveSecretShareRequest{} }
func (m *QueryEnclaveSecretShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnclaveSecretShareRequest) ProtoMessage()    {}
func (*QueryEnclaveSecretShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{48}
}
func (m *QueryEnclaveSecretShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnclaveSecretShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnclaveSecretShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnclaveSecretShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnclaveSecretShareRequest.Merge(m, src)
}
func (m *QueryEnclaveSecretShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnclaveSecretShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnclaveSecretShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnclaveSecretShareRequest proto.InternalMessageInfo

func (m *QueryEnclaveSecretShareRequest) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func (m *QueryEnclaveSecretShareRequest) GetEnclavePubK() string {
	if m != nil {
		return m.EnclavePubK
	}
	return ""
}

func (m *QueryEnclaveSecretShareRequest) GetPubKID() string {
	if m != nil {
		return m.PubKID
	}
	return ""
}

type QueryEnclaveSecretShareResponse struct {
	RemoteReport              []byte `protobuf:"bytes,1,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
	EncSecretShareEnclavePubK []byte `protobuf:"bytes,2,opt,name=encSecretShareEnclavePubK,proto3" json:"encSecretShareEnclavePubK,omitempty"`
}

func (m *QueryEnclaveSecretShareResponse) Reset()         { *m = QueryEnclaveSecretShareResponse{} }
func (m *QueryEnclaveSecretShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnclaveSecretShareResponse) ProtoMessage()    {}
func (*QueryEnclaveSecretShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{49}
}
func (m *QueryEnclaveSecretShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnclaveSecretShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnclaveSecretShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnclaveSecretShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnclaveSecretShareResponse.Merge(m, src)
}
func (m *QueryEnclaveSecretShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnclaveSecretShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnclaveSecretShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnclaveSecretShareResponse proto.InternalMessageInfo

func (m *QueryEnclaveSecretShareResponse) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func (m *QueryEnclaveSecretShareResponse) GetEncSecretShareEnclavePubK() []byte {
	if m != nil {
		return m.EncSecretShareEnclavePubK
	}
	return nil
}

type QueryEnclaveRecoverKeyShareRequest struct {
	RemoteReport       []byte `protobuf:"bytes,1,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
	NewWalletID        string `protobuf:"bytes,2,opt,name=newWalletID,proto3" json:"newWalletID,omitempty"`
	ShareWalletID      string `protobuf:"bytes,3,opt,name=shareWalletID,proto3" json:"shareWalletID,omitempty"`
	EncShareWalletPubK []byte `protobuf:"bytes,4,opt,name=encShareWalletPubK,proto3" json:"encShareWalletPubK,omitempty"`
}

func (m *QueryEnclaveRecoverKeyShareRequest) Reset()         { *m = QueryEnclaveRecoverKeyShareRequest{} }
func (m *QueryEnclaveRecoverKeyShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnclaveRecoverKeyShareRequest) ProtoMessage()    {}
func (*QueryEnclaveRecoverKeyShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{50}
}
func (m *QueryEnclaveRecoverKeyShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnclaveRecoverKeyShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnclaveRecoverKeyShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnclaveRecoverKeyShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnclaveRecoverKeyShareRequest.Merge(m, src)
}
func (m *QueryEnclaveRecoverKeyShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnclaveRecoverKeyShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnclaveRecoverKeyShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnclaveRecoverKeyShareRequest proto.InternalMessageInfo

func (m *QueryEnclaveRecoverKeyShareRequest) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func (m *QueryEnclaveRecoverKeyShareRequest) GetNewWalletID() string {
	if m != nil {
		return m.NewWalletID
	}
	return ""
}

func (m *QueryEnclaveRecoverKeyShareRequest) GetShareWalletID() string {
	if m != nil {
		return m.ShareWalletID
	}
	return ""
}

func (m *QueryEnclaveRecoverKeyShareRequest) GetEncShareWalletPubK() []byte {
	if m != nil {
		return m.EncShareWalletPubK
	}
	return nil
}

type QueryEnclaveRecoverKeyShareResponse struct {
	RemoteReport       []byte `protobuf:"bytes,1,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
	EncShareWalletPubK []byte `protobuf:"bytes,2,opt,name=encShareWalletPubK,proto3" json:"encShareWalletPubK,omitempty"`
}

func (m *QueryEnclaveRecoverKeyShareResponse) Reset()         { *m = QueryEnclaveRecoverKeyShareResponse{} }
func (m *QueryEnclaveRecoverKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnclaveRecoverKeyShareResponse) ProtoMessage()    {}
func (*QueryEnclaveRecoverKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{51}
}
func (m *QueryEnclaveRecoverKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnclaveRecoverKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnclaveRecoverKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnclaveRecoverKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnclaveRecoverKeyShareResponse.Merge(m, src)
}
func (m *QueryEnclaveRecoverKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnclaveRecoverKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnclaveRecoverKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnclaveRecoverKeyShareResponse proto.InternalMessageInfo

func (m *QueryEnclaveRecoverKeyShareResponse) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func (m *QueryEnclaveRecoverKeyShareResponse) GetEncShareWalletPubK() []byte {
	if m != nil {
		return m.EncShareWalletPubK
	}
	return nil
}

type QueryFindCredentialRequest struct {
	CredentialPC                        []byte `protobuf:"bytes,1,opt,name=credentialPC,proto3" json:"credentialPC,omitempty"`
	CredentialType                      string `protobuf:"bytes,2,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
	SSIntervalPubKID                    string `protobuf:"bytes,3,opt,name=sSIntervalPubKID,proto3" json:"sSIntervalPubKID,omitempty"`
	EncUserCredentialPubKSSIntervalPubK []byte `protobuf:"bytes,4,opt,name=encUserCredentialPubKSSIntervalPubK,proto3" json:"encUserCredentialPubKSSIntervalPubK,omitempty"`
	EncProofPCSSIntervalPubK            []byte `protobuf:"bytes,5,opt,name=encProofPCSSIntervalPubK,proto3" json:"encProofPCSSIntervalPubK,omitempty"`
	EncCheckPCSSIntervalPubK            []byte `protobuf:"bytes,6,opt,name=encCheckPCSSIntervalPubK,proto3" json:"encCheckPCSSIntervalPubK,omitempty"`
}

func (m *QueryFindCredentialRequest) Reset()         { *m = QueryFindCredentialRequest{} }
func (m *QueryFindCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFindCredentialRequest) ProtoMessage()    {}
func (*QueryFindCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{52}
}
func (m *QueryFindCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindCredentialRequest.Merge(m, src)
}
func (m *QueryFindCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindCredentialRequest proto.InternalMessageInfo

func (m *QueryFindCredentialRequest) GetCredentialPC() []byte {
	if m != nil {
		return m.CredentialPC
	}
	return nil
}

func (m *QueryFindCredentialRequest) GetCredentialType() string {
	if m != nil {
		return m.CredentialType
	}
	return ""
}

func (m *QueryFindCredentialRequest) GetSSIntervalPubKID() string {
	if m != nil {
		return m.SSIntervalPubKID
	}
	return ""
}

func (m *QueryFindCredentialRequest) GetEncUserCredentialPubKSSIntervalPubK() []byte {
	if m != nil {
		return m.EncUserCredentialPubKSSIntervalPubK
	}
	return nil
}

func (m *QueryFindCredentialRequest) GetEncProofPCSSIntervalPubK() []byte {
	if m != nil {
		return m.EncProofPCSSIntervalPubK
	}
	return nil
}

func (m *QueryFindCredentialRequest) GetEncCheckPCSSIntervalPubK() []byte {
	if m != nil {
		return m.EncCheckPCSSIntervalPubK
	}
	return nil
}

type QueryFindCredentialResponse struct {
	EncPersonalInfoUserCredentialPubK []byte `protobuf:"bytes,1,opt,name=encPersonalInfoUserCredentialPubK,proto3" json:"encPersonalInfoUserCredentialPubK,omitempty"`
	EncCredentialIDUserCredentialPubK []byte `protobuf:"bytes,2,opt,name=encCredentialIDUserCredentialPubK,proto3" json:"encCredentialIDUserCredentialPubK,omitempty"`
}

func (m *QueryFindCredentialResponse) Reset()         { *m = QueryFindCredentialResponse{} }
func (m *QueryFindCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFindCredentialResponse) ProtoMessage()    {}
func (*QueryFindCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{53}
}
func (m *QueryFindCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindCredentialResponse.Merge(m, src)
}
func (m *QueryFindCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindCredentialResponse proto.InternalMessageInfo

func (m *QueryFindCredentialResponse) GetEncPersonalInfoUserCredentialPubK() []byte {
	if m != nil {
		return m.EncPersonalInfoUserCredentialPubK
	}
	return nil
}

func (m *QueryFindCredentialResponse) GetEncCredentialIDUserCredentialPubK() []byte {
	if m != nil {
		return m.EncCredentialIDUserCredentialPubK
	}
	return nil
}

type QueryGetEnclaveIdentityRequest struct {
	UniqueID string `protobuf:"bytes,1,opt,name=uniqueID,proto3" json:"uniqueID,omitempty"`
}

func (m *QueryGetEnclaveIdentityRequest) Reset()         { *m = QueryGetEnclaveIdentityRequest{} }
func (m *QueryGetEnclaveIdentityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEnclaveIdentityRequest) ProtoMessage()    {}
func (*QueryGetEnclaveIdentityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{54}
}
func (m *QueryGetEnclaveIdentityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEnclaveIdentityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEnclaveIdentityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEnclaveIdentityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEnclaveIdentityRequest.Merge(m, src)
}
func (m *QueryGetEnclaveIdentityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEnclaveIdentityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEnclaveIdentityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEnclaveIdentityRequest proto.InternalMessageInfo

func (m *QueryGetEnclaveIdentityRequest) GetUniqueID() string {
	if m != nil {
		return m.UniqueID
	}
	return ""
}

type QueryGetEnclaveIdentityResponse struct {
	EnclaveIdentity EnclaveIdentity `protobuf:"bytes,1,opt,name=enclaveIdentity,proto3" json:"enclaveIdentity"`
}

func (m *QueryGetEnclaveIdentityResponse) Reset()         { *m = QueryGetEnclaveIdentityResponse{} }
func (m *QueryGetEnclaveIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEnclaveIdentityResponse) ProtoMessage()    {}
func (*QueryGetEnclaveIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{55}
}
func (m *QueryGetEnclaveIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEnclaveIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEnclaveIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEnclaveIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEnclaveIdentityResponse.Merge(m, src)
}
func (m *QueryGetEnclaveIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEnclaveIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEnclaveIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEnclaveIdentityResponse proto.InternalMessageInfo

func (m *QueryGetEnclaveIdentityResponse) GetEnclaveIdentity() EnclaveIdentity {
	if m != nil {
		return m.EnclaveIdentity
	}
	return EnclaveIdentity{}
}

type QueryAllEnclaveIdentityRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEnclaveIdentityRequest) Reset()         { *m = QueryAllEnclaveIdentityRequest{} }
func (m *QueryAllEnclaveIdentityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEnclaveIdentityRequest) ProtoMessage()    {}
func (*QueryAllEnclaveIdentityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{56}
}
func (m *QueryAllEnclaveIdentityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEnclaveIdentityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEnclaveIdentityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEnclaveIdentityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEnclaveIdentityRequest.Merge(m, src)
}
func (m *QueryAllEnclaveIdentityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEnclaveIdentityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEnclaveIdentityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEnclaveIdentityRequest proto.InternalMessageInfo

func (m *QueryAllEnclaveIdentityRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEnclaveIdentityResponse struct {
	EnclaveIdentity []EnclaveIdentity   `protobuf:"bytes,1,rep,name=enclaveIdentity,proto3" json:"enclaveIdentity"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEnclaveIdentityResponse) Reset()         { *m = QueryAllEnclaveIdentityResponse{} }
func (m *QueryAllEnclaveIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEnclaveIdentityResponse) ProtoMessage()    {}
func (*QueryAllEnclaveIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6288880fbccdff5, []int{57}
}
func (m *QueryAllEnclaveIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEnclaveIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEnclaveIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEnclaveIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEnclaveIdentityResponse.Merge(m, src)
}
func (m *QueryAllEnclaveIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEnclaveIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEnclaveIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEnclaveIdentityResponse proto.InternalMessageInfo

func (m *QueryAllEnclaveIdentityResponse) GetEnclaveIdentity() []EnclaveIdentity {
	if m != nil {
		return m.EnclaveIdentity
	}
	return nil
}

func (m *QueryAllEnclaveIdentityResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "qadena.qadena.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "qadena.qadena.QueryParamsResponse")
	proto.RegisterType((*QueryGetCredentialRequest)(nil), "qadena.qadena.QueryGetCredentialRequest")
	proto.RegisterType((*QueryGetCredentialResponse)(nil), "qadena.qadena.QueryGetCredentialResponse")
	proto.RegisterType((*QueryAllCredentialRequest)(nil), "qadena.qadena.QueryAllCredentialRequest")
	proto.RegisterType((*QueryAllCredentialResponse)(nil), "qadena.qadena.QueryAllCredentialResponse")
	proto.RegisterType((*QueryGetPublicKeyRequest)(nil), "qadena.qadena.QueryGetPublicKeyRequest")
	proto.RegisterType((*QueryGetPublicKeyResponse)(nil), "qadena.qadena.QueryGetPublicKeyResponse")
	proto.RegisterType((*QueryAllPublicKeyRequest)(nil), "qadena.qadena.QueryAllPublicKeyRequest")
	proto.RegisterType((*QueryAllPublicKeyResponse)(nil), "qadena.qadena.QueryAllPublicKeyResponse")
	proto.RegisterType((*QueryGetWalletRequest)(nil), "qadena.qadena.QueryGetWalletRequest")
	proto.RegisterType((*QueryGetWalletResponse)(nil), "qadena.qadena.QueryGetWalletResponse")
	proto.RegisterType((*QueryAllWalletRequest)(nil), "qadena.qadena.QueryAllWalletRequest")
	proto.RegisterType((*QueryAllWalletResponse)(nil), "qadena.qadena.QueryAllWalletResponse")
	proto.RegisterType((*QueryGetIntervalPublicKeyIDRequest)(nil), "qadena.qadena.QueryGetIntervalPublicKeyIDRequest")
	proto.RegisterType((*QueryGetIntervalPublicKeyIDResponse)(nil), "qadena.qadena.QueryGetIntervalPublicKeyIDResponse")
	proto.RegisterType((*QueryAllIntervalPublicKeyIDRequest)(nil), "qadena.qadena.QueryAllIntervalPublicKeyIDRequest")
	proto.RegisterType((*QueryAllIntervalPublicKeyIDResponse)(nil), "qadena.qadena.QueryAllIntervalPublicKeyIDResponse")
	proto.RegisterType((*QueryGetPioneerJarRequest)(nil), "qadena.qadena.QueryGetPioneerJarRequest")
	proto.RegisterType((*QueryGetPioneerJarResponse)(nil), "qadena.qadena.QueryGetPioneerJarResponse")
	proto.RegisterType((*QueryAllPioneerJarRequest)(nil), "qadena.qadena.QueryAllPioneerJarRequest")
	proto.RegisterType((*QueryAllPioneerJarResponse)(nil), "qadena.qadena.QueryAllPioneerJarResponse")
	proto.RegisterType((*QueryGetJarRegulatorRequest)(nil), "qadena.qadena.QueryGetJarRegulatorRequest")
	proto.RegisterType((*QueryGetJarRegulatorResponse)(nil), "qadena.qadena.QueryGetJarRegulatorResponse")
	proto.RegisterType((*QueryAllJarRegulatorRequest)(nil), "qadena.qadena.QueryAllJarRegulatorRequest")
	proto.RegisterType((*QueryAllJarRegulatorResponse)(nil), "qadena.qadena.QueryAllJarRegulatorResponse")
	proto.RegisterType((*QueryGetSuspiciousTransactionRequest)(nil), "qadena.qadena.QueryGetSuspiciousTransactionRequest")
	proto.RegisterType((*QueryGetSuspiciousTransactionResponse)(nil), "qadena.qadena.QueryGetSuspiciousTransactionResponse")
	proto.RegisterType((*QueryAllSuspiciousTransactionRequest)(nil), "qadena.qadena.QueryAllSuspiciousTransactionRequest")
	proto.RegisterType((*QueryAllSuspiciousTransactionResponse)(nil), "qadena.qadena.QueryAllSuspiciousTransactionResponse")
	proto.RegisterType((*QueryGetProtectKeyRequest)(nil), "qadena.qadena.QueryGetProtectKeyRequest")
	proto.RegisterType((*QueryGetProtectKeyResponse)(nil), "qadena.qadena.QueryGetProtectKeyResponse")
	proto.RegisterType((*QueryAllProtectKeyRequest)(nil), "qadena.qadena.QueryAllProtectKeyRequest")
	proto.RegisterType((*QueryAllProtectKeyResponse)(nil), "qadena.qadena.QueryAllProtectKeyResponse")
	proto.RegisterType((*QueryGetRecoverKeyRequest)(nil), "qadena.qadena.QueryGetRecoverKeyRequest")
	proto.RegisterType((*QueryGetRecoverKeyResponse)(nil), "qadena.qadena.QueryGetRecoverKeyResponse")
	proto.RegisterType((*QueryAllRecoverKeyRequest)(nil), "qadena.qadena.QueryAllRecoverKeyRequest")
	proto.RegisterType((*QueryAllRecoverKeyResponse)(nil), "qadena.qadena.QueryAllRecoverKeyResponse")
	proto.RegisterType((*QueryTreasuryRequest)(nil), "qadena.qadena.QueryTreasuryRequest")
	proto.RegisterType((*QueryTreasuryResponse)(nil), "qadena.qadena.QueryTreasuryResponse")
	proto.RegisterType((*QueryAccountRequest)(nil), "qadena.qadena.QueryAccountRequest")
	proto.RegisterType((*QueryAccountResponse)(nil), "qadena.qadena.QueryAccountResponse")
	proto.RegisterType((*QueryIncentivesRequest)(nil), "qadena.qadena.QueryIncentivesRequest")
	proto.RegisterType((*QueryIncentivesResponse)(nil), "qadena.qadena.QueryIncentivesResponse")
	proto.RegisterType((*QueryEnclaveValidateEnclaveIdentityRequest)(nil), "qadena.qadena.QueryEnclaveValidateEnclaveIdentityRequest")
	proto.RegisterType((*QueryEnclaveValidateEnclaveIdentityResponse)(nil), "qadena.qadena.QueryEnclaveValidateEnclaveIdentityResponse")
	proto.RegisterType((*QueryEnclaveSyncEnclaveRequest)(nil), "qadena.qadena.QueryEnclaveSyncEnclaveRequest")
	proto.RegisterType((*QueryEnclaveSyncEnclaveResponse)(nil), "qadena.qadena.QueryEnclaveSyncEnclaveResponse")
	proto.RegisterType((*QueryEnclaveSecretShareRequest)(nil), "qadena.qadena.QueryEnclaveSecretShareRequest")
	proto.RegisterType((*QueryEnclaveSecretShareResponse)(nil), "qadena.qadena.QueryEnclaveSecretShareResponse")
	proto.RegisterType((*QueryEnclaveRecoverKeyShareRequest)(nil), "qadena.qadena.QueryEnclaveRecoverKeyShareRequest")
	proto.RegisterType((*QueryEnclaveRecoverKeyShareResponse)(nil), "qadena.qadena.QueryEnclaveRecoverKeyShareResponse")
	proto.RegisterType((*QueryFindCredentialRequest)(nil), "qadena.qadena.QueryFindCredentialRequest")
	proto.RegisterType((*QueryFindCredentialResponse)(nil), "qadena.qadena.QueryFindCredentialResponse")
	proto.RegisterType((*QueryGetEnclaveIdentityRequest)(nil), "qadena.qadena.QueryGetEnclaveIdentityRequest")
	proto.RegisterType((*QueryGetEnclaveIdentityResponse)(nil), "qadena.qadena.QueryGetEnclaveIdentityResponse")
	proto.RegisterType((*QueryAllEnclaveIdentityRequest)(nil), "qadena.qadena.QueryAllEnclaveIdentityRequest")
	proto.RegisterType((*QueryAllEnclaveIdentityResponse)(nil), "qadena.qadena.QueryAllEnclaveIdentityResponse")
}

func init() { proto.RegisterFile("qadena/qadena/query.proto", fileDescriptor_f6288880fbccdff5) }

var fileDescriptor_f6288880fbccdff5 = []byte{
	// 2656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x4f, 0xcf, 0x38, 0x26, 0xae, 0x75, 0x12, 0xa8, 0x24, 0x8e, 0x3d, 0xc9, 0x8e, 0x93, 0x8a,
	0x9d, 0x0f, 0x67, 0x33, 0xad, 0xc4, 0x7c, 0x25, 0x44, 0x62, 0x6d, 0x6f, 0x36, 0x98, 0xc0, 0xe2,
	0x9d, 0x64, 0x59, 0x58, 0x09, 0x0d, 0xed, 0x9e, 0xca, 0xb8, 0x93, 0x76, 0xf7, 0xb8, 0xbb, 0xc7,
	0x61, 0x34, 0x9a, 0x45, 0x2c, 0x48, 0x0b, 0x07, 0xa4, 0x45, 0x08, 0x4e, 0x5c, 0x40, 0x2b, 0x04,
	0x07, 0x60, 0x0f, 0x08, 0x04, 0x12, 0xd2, 0x5e, 0x40, 0x2b, 0x4e, 0x2b, 0xb8, 0x70, 0x5a, 0xa1,
	0x04, 0x89, 0x3f, 0x80, 0x7f, 0x00, 0x75, 0xd5, 0xeb, 0xee, 0xea, 0xee, 0xaa, 0x9e, 0x9e, 0x30,
	0x2b, 0x2e, 0xf6, 0x74, 0xd5, 0xfb, 0xf8, 0xfd, 0xde, 0xab, 0xae, 0x8f, 0x57, 0x8d, 0x16, 0xf6,
	0x8c, 0x36, 0x75, 0x0c, 0x3d, 0xfa, 0xd7, 0xa3, 0x5e, 0xbf, 0xd1, 0xf5, 0xdc, 0xc0, 0xc5, 0x87,
	0x79, 0x5b, 0x83, 0xff, 0xab, 0x7d, 0xcc, 0xd8, 0xb5, 0x1c, 0x57, 0x67, 0x7f, 0xb9, 0x44, 0xed,
	0x78, 0xc7, 0xed, 0xb8, 0xec, 0xa7, 0x1e, 0xfe, 0x82, 0xd6, 0xd3, 0x1d, 0xd7, 0xed, 0xd8, 0x54,
	0x37, 0xba, 0x96, 0x6e, 0x38, 0x8e, 0x1b, 0x18, 0x81, 0xe5, 0x3a, 0x3e, 0xf4, 0xae, 0x98, 0xae,
	0xbf, 0xeb, 0xfa, 0xfa, 0xb6, 0xe1, 0x53, 0xee, 0x4e, 0xdf, 0xbf, 0xba, 0x4d, 0x03, 0xe3, 0xaa,
	0xde, 0x35, 0x3a, 0x96, 0xc3, 0x84, 0x41, 0xb6, 0x96, 0x06, 0xd7, 0x35, 0x3c, 0x63, 0x37, 0xb2,
	0x53, 0x4f, 0xf7, 0x99, 0x1e, 0x6d, 0x53, 0x27, 0xb0, 0x0c, 0x5b, 0xde, 0xdf, 0xed, 0x6d, 0xdb,
	0x96, 0xd9, 0x7a, 0x48, 0xfb, 0x72, 0xdb, 0x8f, 0x0c, 0xdb, 0xa6, 0x01, 0xf4, 0x5d, 0x4e, 0xf7,
	0x59, 0x4e, 0x40, 0xbd, 0x7d, 0xc3, 0x6e, 0x25, 0x46, 0x5a, 0x56, 0xab, 0x0d, 0xc2, 0x8b, 0x19,
	0x47, 0x96, 0xeb, 0x50, 0xea, 0xb5, 0x1e, 0x18, 0x1e, 0x08, 0x9c, 0x4d, 0x0b, 0x3c, 0x30, 0xbc,
	0x96, 0x47, 0x3b, 0x3d, 0xdb, 0x08, 0xdc, 0x48, 0x64, 0x25, 0x2d, 0xe2, 0xf7, 0xfc, 0xae, 0x65,
	0x5a, 0x6e, 0xcf, 0x6f, 0x05, 0x9e, 0xe1, 0xf8, 0x86, 0x29, 0x04, 0x25, 0xeb, 0xcf, 0x73, 0x03,
	0x6a, 0x06, 0x02, 0xb3, 0x8c, 0x3f, 0x8f, 0x9a, 0xee, 0x3e, 0xf5, 0x5a, 0xfe, 0x8e, 0xe1, 0x51,
	0xb9, 0x8d, 0x48, 0x24, 0xb1, 0x51, 0x17, 0xb3, 0x14, 0xe5, 0xc7, 0x74, 0xad, 0x08, 0xc4, 0x72,
	0xda, 0xc0, 0x76, 0xab, 0x4b, 0xdb, 0xd4, 0xf3, 0xa9, 0xd3, 0x32, 0xdd, 0xdd, 0x5d, 0x2b, 0x0a,
	0xe4, 0x52, 0x5a, 0x8c, 0x3a, 0xa6, 0x6d, 0xec, 0xd3, 0x96, 0xc5, 0x52, 0x15, 0x80, 0x33, 0x72,
	0x1c, 0xe1, 0x97, 0xc3, 0x81, 0xb0, 0xc5, 0xf2, 0xdb, 0xa4, 0x7b, 0x3d, 0xea, 0x07, 0xe4, 0x4b,
	0xe8, 0x58, 0xaa, 0xd5, 0xef, 0xba, 0x8e, 0x4f, 0xf1, 0xa7, 0xd1, 0x34, 0x1f, 0x07, 0xf3, 0xda,
	0x19, 0xed, 0xe2, 0x33, 0xd7, 0x4e, 0x34, 0x52, 0xc3, 0xb4, 0xc1, 0xc5, 0xd7, 0x67, 0xde, 0xfb,
	0x60, 0xf1, 0xc0, 0x2f, 0xfe, 0xfd, 0xce, 0x8a, 0xd6, 0x04, 0x79, 0xd2, 0x41, 0x0b, 0xcc, 0xe0,
	0x6d, 0x1a, 0x6c, 0xc4, 0xa3, 0x05, 0xbc, 0x61, 0x82, 0x66, 0x93, 0x21, 0xb4, 0xf9, 0x02, 0x33,
	0x3e, 0xd3, 0x4c, 0xb5, 0xe1, 0xf3, 0xe8, 0x48, 0xf2, 0x7c, 0xaf, 0xdf, 0xa5, 0xf3, 0x15, 0x26,
	0x95, 0x69, 0x25, 0x5f, 0x43, 0x35, 0x99, 0x23, 0x20, 0xf0, 0x59, 0x84, 0x12, 0x79, 0x20, 0xb1,
	0x90, 0x21, 0x91, 0xa8, 0xad, 0x4f, 0x85, 0x44, 0x9a, 0x82, 0x0a, 0x31, 0x81, 0xc7, 0x9a, 0x6d,
	0xe7, 0x79, 0xbc, 0x88, 0x50, 0xf2, 0x1a, 0x81, 0xf5, 0xf3, 0x0d, 0x9e, 0xcd, 0x46, 0x98, 0xcd,
	0x06, 0x7f, 0xc5, 0x21, 0xa7, 0x8d, 0x2d, 0xa3, 0x43, 0x41, 0xb7, 0x29, 0x68, 0x92, 0x9f, 0x6b,
	0x40, 0x22, 0xe3, 0x45, 0x41, 0xa2, 0x3a, 0x26, 0x09, 0x7c, 0x3b, 0x85, 0xb3, 0xc2, 0x70, 0x5e,
	0x18, 0x89, 0x93, 0x7b, 0x4f, 0x01, 0x7d, 0x09, 0xcd, 0x47, 0xc1, 0xde, 0x62, 0xaf, 0xe7, 0x1d,
	0xda, 0x8f, 0x82, 0x31, 0x87, 0xa6, 0xbb, 0xbd, 0xed, 0x3b, 0x71, 0x3a, 0xe1, 0x09, 0xd7, 0xd0,
	0xa1, 0xf0, 0x97, 0x90, 0xc2, 0xf8, 0x99, 0x7c, 0x35, 0x19, 0x25, 0x82, 0x3d, 0xa0, 0x7d, 0x13,
	0xcd, 0x74, 0xa3, 0x46, 0x08, 0xee, 0x7c, 0x76, 0xfc, 0x45, 0xfd, 0x40, 0x3a, 0x51, 0x20, 0xdb,
	0x00, 0x75, 0xcd, 0xb6, 0x73, 0x50, 0x27, 0x95, 0xb7, 0x9f, 0x69, 0xc9, 0xe8, 0x18, 0x89, 0xbf,
	0x3a, 0x16, 0xfe, 0xc9, 0xe5, 0x6c, 0x15, 0x9d, 0x88, 0x62, 0xfc, 0x2a, 0x9b, 0x77, 0xa3, 0x28,
	0xd4, 0xd0, 0x21, 0x3e, 0x11, 0xc7, 0x29, 0x8b, 0x9f, 0xc9, 0x17, 0xd1, 0x5c, 0x56, 0x09, 0x58,
	0xad, 0xa2, 0x69, 0x2e, 0xa5, 0x98, 0x12, 0xb8, 0x38, 0xf0, 0x01, 0x51, 0xd2, 0x02, 0x0c, 0x6b,
	0xb6, 0x9d, 0xc6, 0x30, 0xa9, 0x4c, 0xfc, 0x58, 0x03, 0xc0, 0x82, 0x07, 0x09, 0xe0, 0x6a, 0x49,
	0xc0, 0x93, 0x8b, 0xfe, 0x57, 0x10, 0x89, 0x02, 0xb9, 0x09, 0x2b, 0x5b, 0x9c, 0xf4, 0xcd, 0x17,
	0x84, 0x77, 0xc7, 0x71, 0xdb, 0x34, 0x79, 0x77, 0xf8, 0x53, 0x98, 0xa2, 0xf0, 0x97, 0xf8, 0xee,
	0x44, 0xcf, 0xe4, 0x5b, 0x1a, 0x3a, 0x57, 0x68, 0x1a, 0xf8, 0xbf, 0x86, 0x8e, 0x59, 0xf9, 0x6e,
	0x88, 0x35, 0xc9, 0x04, 0x43, 0x62, 0x08, 0x22, 0x23, 0x33, 0x42, 0x6c, 0x60, 0xb7, 0x66, 0xdb,
	0x05, 0xec, 0x26, 0x95, 0xe4, 0xbf, 0x46, 0x8c, 0x55, 0xee, 0x46, 0x31, 0xae, 0xfe, 0xcf, 0x8c,
	0x27, 0x37, 0x30, 0xae, 0x0b, 0x53, 0x1f, 0xdf, 0xc5, 0x7c, 0xde, 0xf0, 0xa2, 0x88, 0x9d, 0x46,
	0x33, 0xb0, 0xb5, 0x89, 0x87, 0x44, 0xd2, 0x20, 0x2e, 0x79, 0xa2, 0x6a, 0xb2, 0x5a, 0x74, 0xe3,
	0x56, 0xc5, 0x92, 0x97, 0xa8, 0x45, 0xab, 0x45, 0xa2, 0x22, 0x2e, 0x79, 0x79, 0x64, 0x1f, 0xc6,
	0x92, 0x57, 0x82, 0x44, 0x75, 0x4c, 0x12, 0x93, 0x9c, 0x3e, 0x4f, 0x45, 0xc1, 0x66, 0x00, 0x61,
	0x2f, 0x19, 0xc5, 0xe3, 0x38, 0x3a, 0xf8, 0xc0, 0x48, 0xb2, 0xc4, 0x1f, 0x08, 0x45, 0xa7, 0xe5,
	0x4a, 0x40, 0xef, 0x16, 0x9a, 0x7d, 0x20, 0xb4, 0x43, 0x1c, 0x4f, 0x65, 0x08, 0x8a, 0xaa, 0x40,
	0x31, 0xa5, 0x46, 0x28, 0x60, 0x5b, 0xb3, 0x6d, 0x19, 0xb6, 0x49, 0xe5, 0xea, 0xd7, 0x1a, 0xd0,
	0xc9, 0xf9, 0x51, 0xd2, 0xa9, 0x3e, 0x05, 0x9d, 0xc9, 0xe5, 0xec, 0x93, 0x68, 0x29, 0x0a, 0xff,
	0xdd, 0x78, 0x77, 0x7f, 0x2f, 0xd9, 0xdc, 0x47, 0x01, 0x3a, 0x82, 0x2a, 0x56, 0x9b, 0x05, 0x66,
	0xaa, 0x59, 0xb1, 0xda, 0xe4, 0x7b, 0x1a, 0x5a, 0x1e, 0xa1, 0x08, 0x8c, 0xbf, 0x8e, 0x4e, 0x48,
	0x05, 0x20, 0xca, 0x4b, 0x19, 0xea, 0x52, 0x59, 0x88, 0x81, 0xdc, 0x10, 0x71, 0x80, 0xc3, 0x9a,
	0x6d, 0x17, 0x72, 0x98, 0x54, 0x92, 0xff, 0x16, 0x71, 0x57, 0x3b, 0x1c, 0xcd, 0xbd, 0x3a, 0x11,
	0xee, 0x93, 0x1b, 0x08, 0x9f, 0x12, 0x26, 0x59, 0x7e, 0x74, 0x13, 0x76, 0x81, 0x45, 0xfb, 0x1f,
	0x71, 0x8a, 0x15, 0x14, 0x85, 0xd9, 0x29, 0x6e, 0x55, 0x4d, 0xb1, 0xb1, 0x40, 0x3c, 0x3b, 0xc5,
	0x2d, 0xe4, 0x4d, 0x71, 0xe3, 0x98, 0x03, 0x36, 0xa1, 0x94, 0xe6, 0x8e, 0x59, 0x95, 0xfc, 0x31,
	0x2b, 0x3d, 0x0f, 0x8f, 0x66, 0x5a, 0x1d, 0x93, 0xe9, 0x87, 0x92, 0xca, 0x26, 0x3f, 0x41, 0x8f,
	0x9f, 0x4a, 0x51, 0x31, 0x21, 0xe8, 0xc5, 0xad, 0x8a, 0x54, 0x26, 0x6a, 0x11, 0xc1, 0x44, 0x25,
	0x95, 0xca, 0x3c, 0xb0, 0xff, 0x57, 0x2a, 0x4b, 0x30, 0xad, 0x8e, 0xc9, 0x74, 0x72, 0xa9, 0x9c,
	0x43, 0xc7, 0x19, 0xce, 0x7b, 0x1e, 0x35, 0xfc, 0x9e, 0x17, 0x05, 0x8b, 0xfc, 0x52, 0x83, 0x63,
	0x42, 0xd2, 0x01, 0xd8, 0x37, 0xd0, 0x6c, 0xe0, 0x06, 0x86, 0xbd, 0x6e, 0xd8, 0x86, 0x63, 0xd2,
	0x38, 0x4f, 0xa2, 0xf3, 0xc8, 0xed, 0x86, 0x6b, 0x45, 0xd3, 0x4b, 0x4a, 0x09, 0xdf, 0x41, 0x1f,
	0xa5, 0x8e, 0xe9, 0xf5, 0xbb, 0x01, 0x6d, 0x47, 0x86, 0x2a, 0xe5, 0x0c, 0xe5, 0x14, 0xc9, 0x25,
	0x28, 0x98, 0xac, 0x99, 0xa6, 0xdb, 0x73, 0xe2, 0xf3, 0x0c, 0x46, 0x53, 0x8e, 0xb1, 0x4b, 0x61,
	0x10, 0xb2, 0xdf, 0xc4, 0x03, 0xba, 0xb1, 0x28, 0x90, 0x6a, 0x20, 0xcc, 0x0a, 0x4e, 0x5d, 0xc3,
	0xa3, 0x4e, 0x20, 0x52, 0x9b, 0x69, 0x4a, 0x7a, 0xf0, 0x8a, 0x02, 0xff, 0x8c, 0x04, 0xde, 0x3c,
	0x1c, 0x87, 0x36, 0x1d, 0x33, 0x1c, 0x1f, 0xfb, 0x34, 0xae, 0xf4, 0xfc, 0xb9, 0x8a, 0x4e, 0xe6,
	0xba, 0x00, 0xd1, 0x2b, 0xe8, 0x84, 0xe9, 0x51, 0x23, 0xa0, 0xfc, 0x4c, 0x14, 0x4b, 0x94, 0x8d,
	0xb7, 0x5c, 0x1b, 0x77, 0x50, 0x9d, 0x77, 0xdc, 0xea, 0xee, 0xd0, 0x5d, 0xea, 0x19, 0x76, 0xd6,
	0x7e, 0xc9, 0x34, 0x8c, 0x30, 0x83, 0x1f, 0xa2, 0x33, 0x22, 0x82, 0x7b, 0x49, 0x0c, 0x13, 0x57,
	0xd5, 0x72, 0xae, 0x46, 0x1a, 0xc2, 0x43, 0x74, 0x49, 0x0a, 0x47, 0xea, 0x75, 0xaa, 0x9c, 0xd7,
	0xf2, 0x16, 0xc3, 0xb7, 0x7d, 0x85, 0xe5, 0xf1, 0x16, 0xaf, 0xf3, 0x7d, 0xd9, 0xb0, 0xad, 0x76,
	0xa8, 0xcb, 0x1f, 0x37, 0xa1, 0xea, 0x27, 0x94, 0xdc, 0x3c, 0xba, 0xeb, 0x06, 0xb4, 0x49, 0xbb,
	0xae, 0xc7, 0x0f, 0xef, 0xb3, 0xcd, 0x54, 0x5b, 0x38, 0x8b, 0xf6, 0x1c, 0x6b, 0xaf, 0x47, 0xe3,
	0x09, 0x26, 0x7e, 0x0e, 0xfb, 0x7c, 0xab, 0xe3, 0xb0, 0x03, 0x49, 0x95, 0xf7, 0x45, 0xcf, 0xec,
	0xb4, 0xe2, 0xb9, 0xed, 0x9e, 0x19, 0x4e, 0xbf, 0x53, 0x70, 0x5a, 0x89, 0x1a, 0x88, 0x85, 0x2e,
	0x97, 0xc2, 0x09, 0x63, 0xb0, 0x0c, 0xd0, 0x39, 0x34, 0xed, 0x07, 0x46, 0xd0, 0xf3, 0x01, 0x26,
	0x3c, 0x91, 0xfb, 0xa8, 0x2e, 0xba, 0xba, 0xdb, 0x77, 0x4c, 0xf8, 0x39, 0x4e, 0x18, 0xce, 0xa0,
	0x67, 0xa0, 0x76, 0xba, 0xd5, 0xdb, 0xbe, 0x03, 0x2e, 0xc4, 0xa6, 0x70, 0xce, 0x5f, 0x54, 0x3a,
	0x1a, 0x83, 0xc7, 0xf3, 0xe8, 0x14, 0x8d, 0x35, 0x79, 0x2d, 0xf5, 0x56, 0xc6, 0xf3, 0x6c, 0xb3,
	0x48, 0x84, 0xbc, 0x9e, 0x61, 0x4c, 0x4d, 0x8f, 0x06, 0x77, 0x77, 0x0c, 0x6f, 0xb2, 0x8c, 0x85,
	0xe2, 0x5e, 0x55, 0x2c, 0xee, 0x91, 0x6f, 0x67, 0x23, 0x21, 0x02, 0x18, 0x23, 0x12, 0x37, 0xd1,
	0x02, 0x75, 0x4c, 0x41, 0x3b, 0x1f, 0x07, 0xb5, 0x00, 0x79, 0x57, 0x83, 0x3a, 0x44, 0x9c, 0x84,
	0x68, 0xd1, 0x7a, 0x9a, 0x50, 0x38, 0xf4, 0xd1, 0xab, 0xd1, 0x66, 0x02, 0x42, 0x21, 0x34, 0xe1,
	0x25, 0x74, 0x98, 0x55, 0xf7, 0x63, 0x19, 0x1e, 0x91, 0x74, 0x63, 0x38, 0xb9, 0x87, 0x78, 0x93,
	0x36, 0xc6, 0x64, 0x8a, 0x79, 0x94, 0xf4, 0x90, 0x3e, 0x94, 0x36, 0x54, 0x0c, 0xc6, 0x88, 0xa5,
	0xdc, 0x75, 0x45, 0xe9, 0xfa, 0x83, 0x0a, 0xec, 0x1b, 0x5e, 0xb4, 0x9c, 0xf6, 0x88, 0x62, 0xfd,
	0xd6, 0x46, 0xe4, 0x52, 0x6c, 0x2b, 0x5b, 0xac, 0x0f, 0x97, 0x30, 0xff, 0xae, 0x50, 0x71, 0x49,
	0x06, 0x54, 0xae, 0x1d, 0x6f, 0xa1, 0x73, 0xd4, 0x31, 0x5f, 0xf1, 0xa9, 0x97, 0x60, 0x0a, 0xbb,
	0xee, 0xa6, 0x04, 0x21, 0xa4, 0x65, 0x44, 0xf1, 0x0d, 0x34, 0x4f, 0x1d, 0x73, 0xcb, 0x73, 0xdd,
	0xfb, 0x5b, 0x1b, 0x19, 0x33, 0x07, 0x99, 0x19, 0x65, 0x3f, 0xe8, 0x6e, 0xec, 0x50, 0xf3, 0x61,
	0x4e, 0x77, 0x3a, 0xd6, 0x95, 0xf6, 0x93, 0x3f, 0x68, 0x70, 0x4e, 0xcf, 0x06, 0x18, 0x92, 0xfa,
	0x05, 0x74, 0x36, 0xf4, 0x4b, 0x3d, 0xdf, 0x75, 0x0c, 0x7b, 0xd3, 0xb9, 0xef, 0xe6, 0xa9, 0x40,
	0xd8, 0x47, 0x0b, 0x82, 0xb5, 0x0d, 0x61, 0x67, 0x28, 0xb1, 0x56, 0x89, 0xad, 0x15, 0x0b, 0x92,
	0x9b, 0x30, 0xc1, 0xdc, 0xa6, 0x81, 0x62, 0x65, 0x11, 0x57, 0x0d, 0x2d, 0xbd, 0x6a, 0x90, 0x3d,
	0x98, 0x1d, 0x64, 0xda, 0x40, 0xfe, 0x25, 0x74, 0x94, 0xa6, 0xbb, 0x60, 0xb7, 0x51, 0xcf, 0xec,
	0x4d, 0x33, 0x06, 0x60, 0xc5, 0xcc, 0x2a, 0x93, 0x1d, 0x00, 0xbc, 0x66, 0xdb, 0x0a, 0xc0, 0x93,
	0x3a, 0x31, 0xff, 0x31, 0x9a, 0xfb, 0x64, 0xae, 0x8a, 0xd8, 0x55, 0x9f, 0x9a, 0xdd, 0xc4, 0xf6,
	0xe0, 0xd7, 0xbe, 0xbf, 0x8c, 0x0e, 0x32, 0xf0, 0xd8, 0x41, 0xd3, 0x7c, 0x5d, 0xc1, 0x67, 0x33,
	0x98, 0xf2, 0xf7, 0x84, 0x35, 0x52, 0x24, 0xc2, 0xdd, 0x90, 0x67, 0xdf, 0xf8, 0xfb, 0xbf, 0x7e,
	0x58, 0x39, 0x89, 0x4f, 0xe8, 0xb2, 0x1b, 0x65, 0xfc, 0xb6, 0x86, 0x50, 0x32, 0xc8, 0xf0, 0x45,
	0x99, 0x45, 0xd9, 0xad, 0x61, 0xed, 0x52, 0x09, 0x49, 0x80, 0xb0, 0xc6, 0x20, 0x7c, 0x06, 0x5f,
	0xd7, 0x55, 0x17, 0xd7, 0xfa, 0x40, 0x3c, 0x3b, 0x0d, 0xc5, 0xc7, 0x70, 0xa6, 0x1a, 0xe2, 0x37,
	0x35, 0x74, 0x38, 0xb1, 0xbc, 0x66, 0x2b, 0x90, 0xca, 0xee, 0x05, 0xe5, 0x48, 0xa5, 0x77, 0x7b,
	0xe4, 0x2c, 0x43, 0x7a, 0x0a, 0x2f, 0x28, 0x91, 0xe2, 0x1f, 0x69, 0x68, 0x26, 0x2e, 0x41, 0xe3,
	0x0b, 0x8a, 0x28, 0x64, 0x2f, 0xb9, 0x6a, 0x17, 0x47, 0x0b, 0x02, 0x86, 0x4f, 0x30, 0x0c, 0x3a,
	0xbe, 0xa2, 0xab, 0xae, 0xf1, 0xf5, 0x01, 0x5f, 0xef, 0x87, 0xfc, 0x07, 0x8f, 0xd0, 0x77, 0x34,
	0x34, 0x1b, 0x1b, 0x0b, 0x03, 0x74, 0x41, 0x41, 0xbb, 0x1c, 0x34, 0xd9, 0x1d, 0x9a, 0x32, 0x3c,
	0x09, 0x34, 0xfc, 0x4d, 0x34, 0xcd, 0x17, 0x33, 0xbc, 0xa4, 0x60, 0x9c, 0xba, 0x72, 0xaa, 0x2d,
	0x8f, 0x90, 0x02, 0xcf, 0x17, 0x99, 0x67, 0x82, 0xcf, 0xe8, 0xb2, 0x6f, 0x17, 0xf4, 0x41, 0x54,
	0x5f, 0x18, 0xe2, 0x47, 0x68, 0x86, 0xeb, 0x86, 0x31, 0x58, 0x52, 0x50, 0x2b, 0x81, 0x21, 0x77,
	0x75, 0xa5, 0x7c, 0x93, 0xe0, 0x92, 0xea, 0x5d, 0x0d, 0x1d, 0x93, 0x5c, 0x5f, 0xe0, 0xab, 0x0a,
	0x86, 0xea, 0x2b, 0x9a, 0xda, 0xb5, 0x71, 0x54, 0x00, 0xdd, 0x3a, 0x43, 0x77, 0x13, 0xdf, 0xd0,
	0x4b, 0x7d, 0xc1, 0xa1, 0x0f, 0xf8, 0xa5, 0xd6, 0x90, 0xff, 0xe0, 0x63, 0xe8, 0x37, 0x1a, 0x9a,
	0x93, 0xf8, 0x08, 0x23, 0x79, 0x55, 0x11, 0xa3, 0x71, 0x59, 0x14, 0x5f, 0x16, 0x91, 0x06, 0x63,
	0x71, 0x11, 0x9f, 0x2f, 0xc7, 0x02, 0xff, 0x40, 0x43, 0x28, 0xb9, 0x79, 0x50, 0x4e, 0x5f, 0xb9,
	0x9b, 0x13, 0xe5, 0xf4, 0x95, 0xbf, 0xfd, 0x50, 0x62, 0x12, 0x3e, 0x77, 0xd1, 0x07, 0xf1, 0x7d,
	0xd0, 0x10, 0x7f, 0x57, 0x43, 0x87, 0x13, 0x33, 0x45, 0x73, 0x55, 0x49, 0x58, 0xd2, 0x4b, 0x19,
	0x42, 0x18, 0xac, 0xd3, 0xb8, 0xa6, 0x86, 0x15, 0x4e, 0x56, 0xb3, 0x62, 0xa1, 0x1f, 0xaf, 0x28,
	0x68, 0x4b, 0x2e, 0x2c, 0x6a, 0x97, 0x4b, 0xc9, 0x02, 0x9a, 0xe7, 0x18, 0x9a, 0xf3, 0x78, 0x49,
	0x2f, 0xf8, 0xe4, 0x47, 0x1f, 0xb0, 0x0b, 0x99, 0x21, 0x7e, 0x4b, 0x43, 0x47, 0x45, 0x33, 0x61,
	0x90, 0x56, 0x14, 0xd4, 0x4b, 0x43, 0x53, 0xdc, 0x87, 0x90, 0x25, 0x06, 0xad, 0x8e, 0x4f, 0x17,
	0x41, 0xc3, 0xbf, 0xd3, 0x14, 0x85, 0x74, 0xbc, 0xaa, 0x88, 0x43, 0xd1, 0x45, 0x40, 0xed, 0xe3,
	0xe3, 0x29, 0x01, 0xd4, 0x6b, 0x0c, 0xea, 0x73, 0x78, 0x45, 0x2f, 0xf3, 0x55, 0x94, 0x3e, 0xb0,
	0xda, 0x43, 0xfc, 0x5b, 0x0d, 0xcd, 0x4b, 0xad, 0x86, 0x41, 0x5d, 0x55, 0x04, 0x6a, 0x7c, 0xec,
	0xa3, 0x2e, 0x22, 0xc8, 0x15, 0x86, 0xfd, 0x02, 0x5e, 0x2e, 0x85, 0x3d, 0x1c, 0x02, 0x28, 0xa9,
	0x55, 0xab, 0xdf, 0xdc, 0x6c, 0x3d, 0x5e, 0xfd, 0xe6, 0xe6, 0xea, 0xe5, 0x4a, 0x48, 0xc2, 0x87,
	0x63, 0xe2, 0xd2, 0xc1, 0x5e, 0xdc, 0xd8, 0x4a, 0xe1, 0x8b, 0x5b, 0x0e, 0x95, 0xb4, 0x8a, 0xaf,
	0x7e, 0x71, 0x13, 0x54, 0x2c, 0x3a, 0xc9, 0xa9, 0x53, 0x19, 0x9d, 0x5c, 0x89, 0x5b, 0x19, 0x9d,
	0x7c, 0x09, 0x5a, 0x19, 0x1d, 0xe1, 0x93, 0xb8, 0x6c, 0x74, 0x12, 0x2b, 0x45, 0xd1, 0x29, 0x89,
	0x4a, 0x5a, 0x18, 0x57, 0x46, 0x47, 0x40, 0x85, 0xf7, 0xd1, 0xa1, 0xa8, 0x28, 0x8d, 0xcf, 0xc9,
	0x4c, 0x67, 0x6a, 0xd9, 0xb5, 0xa5, 0x62, 0x21, 0x70, 0xbd, 0xc8, 0x5c, 0x2f, 0xe0, 0x93, 0x19,
	0xd7, 0x41, 0xe4, 0xab, 0x8f, 0x3e, 0x02, 0x65, 0x63, 0x2c, 0xdd, 0x7a, 0xa7, 0xcb, 0xcf, 0xb5,
	0x73, 0x85, 0x32, 0xe0, 0x74, 0x99, 0x39, 0x5d, 0xc4, 0xcf, 0x66, 0x9c, 0x1a, 0x5c, 0x4e, 0x1f,
	0x38, 0xc6, 0x2e, 0x1d, 0xe2, 0xd7, 0x11, 0x4a, 0x4a, 0xc4, 0x58, 0xba, 0x63, 0xc9, 0x55, 0x97,
	0x6b, 0xe7, 0x47, 0x89, 0x8d, 0xd8, 0xd7, 0x59, 0x89, 0xc7, 0x3f, 0x69, 0x08, 0xe7, 0xeb, 0x6b,
	0xf8, 0x8a, 0xcc, 0x83, 0xb2, 0xe0, 0x57, 0x6b, 0x94, 0x15, 0x07, 0x60, 0x9f, 0x63, 0xc0, 0xd6,
	0xf1, 0xf3, 0xba, 0xfc, 0x6b, 0x4a, 0xbf, 0xef, 0x98, 0x2d, 0x78, 0xd0, 0x07, 0x62, 0xdd, 0x65,
	0xa8, 0x0f, 0x84, 0x8a, 0xd9, 0x10, 0xff, 0x45, 0xc0, 0x9f, 0x94, 0xad, 0x8a, 0xf1, 0xe7, 0xca,
	0x77, 0xc5, 0xf8, 0xf3, 0xc5, 0x36, 0xf2, 0x32, 0xc3, 0x7f, 0x07, 0x6f, 0xaa, 0xf0, 0x33, 0x1d,
	0xfe, 0x7d, 0x6a, 0x21, 0xfe, 0x78, 0xcb, 0x8f, 0xff, 0xa3, 0xa1, 0x39, 0x79, 0x59, 0x4a, 0xbe,
	0x47, 0x2b, 0x2c, 0xc2, 0xc9, 0xf7, 0x68, 0xc5, 0x55, 0x2f, 0xe2, 0x31, 0x52, 0x36, 0x7e, 0xa0,
	0x20, 0x25, 0xbc, 0xa9, 0x0a, 0x66, 0x42, 0x01, 0x6f, 0xa8, 0x0f, 0x52, 0xa5, 0x3a, 0xce, 0x3b,
	0x53, 0x14, 0x1b, 0xe2, 0x37, 0x2a, 0xa8, 0x5e, 0x5c, 0xb2, 0xc6, 0xd7, 0x0b, 0xa8, 0x14, 0x97,
	0xe3, 0x6b, 0x37, 0x9e, 0x46, 0x15, 0xa2, 0x61, 0xb1, 0x68, 0x98, 0xd8, 0x50, 0x44, 0x63, 0x1f,
	0xf4, 0x5b, 0xd9, 0x2f, 0x80, 0x73, 0x51, 0x89, 0xea, 0x34, 0x61, 0x48, 0xa0, 0x98, 0x1f, 0xe6,
	0x3d, 0x2a, 0xdd, 0x0f, 0xf1, 0x4f, 0x2b, 0xe8, 0x48, 0xba, 0x68, 0x85, 0xa5, 0x13, 0xab, 0xb4,
	0x72, 0x58, 0x5b, 0x29, 0x23, 0x0a, 0xa4, 0x7e, 0xaf, 0x31, 0x56, 0xef, 0x68, 0xf8, 0x57, 0x5a,
	0x86, 0xd7, 0x7d, 0xcb, 0x69, 0xb7, 0xe4, 0x27, 0xf7, 0xad, 0x8d, 0xfc, 0xc9, 0x5d, 0x1f, 0x64,
	0x4b, 0x89, 0x3c, 0xc3, 0xa3, 0xca, 0x83, 0x5c, 0x4a, 0x5a, 0xfd, 0xe3, 0x5d, 0xd2, 0xe2, 0xde,
	0x10, 0xbf, 0xad, 0xa1, 0xa3, 0xd9, 0x91, 0x71, 0x45, 0xb1, 0x26, 0x2a, 0x46, 0x43, 0xa3, 0xac,
	0xf8, 0x88, 0x4d, 0x5b, 0x3e, 0xe1, 0x71, 0x86, 0xf1, 0x4f, 0x92, 0xe9, 0x28, 0xb2, 0x17, 0xae,
	0xa8, 0x57, 0x14, 0xeb, 0xe4, 0x38, 0x48, 0xd5, 0xf5, 0x2f, 0x72, 0x81, 0x21, 0x3d, 0x8b, 0x17,
	0x47, 0x20, 0x5d, 0xbf, 0xf5, 0xde, 0xe3, 0xba, 0xf6, 0xfe, 0xe3, 0xba, 0xf6, 0xcf, 0xc7, 0x75,
	0xed, 0xad, 0x27, 0xf5, 0x03, 0xef, 0x3f, 0xa9, 0x1f, 0xf8, 0xc7, 0x93, 0xfa, 0x81, 0xd7, 0x2e,
	0x77, 0xac, 0x60, 0xa7, 0xb7, 0xdd, 0x30, 0xdd, 0x5d, 0xdd, 0x5c, 0xdd, 0x0b, 0xa8, 0xb9, 0x03,
	0x56, 0x5a, 0xfb, 0xab, 0xfa, 0x37, 0xe2, 0x25, 0xb3, 0xdf, 0xa5, 0xfe, 0xf6, 0x34, 0xfb, 0xc8,
	0x7d, 0xf5, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x37, 0x72, 0xfd, 0x68, 0x6a, 0x31, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Credential items.
	Credential(ctx context.Context, in *QueryGetCredentialRequest, opts ...grpc.CallOption) (*QueryGetCredentialResponse, error)
	CredentialAll(ctx context.Context, in *QueryAllCredentialRequest, opts ...grpc.CallOption) (*QueryAllCredentialResponse, error)
	// Queries a list of PublicKey items.
	PublicKey(ctx context.Context, in *QueryGetPublicKeyRequest, opts ...grpc.CallOption) (*QueryGetPublicKeyResponse, error)
	PublicKeyAll(ctx context.Context, in *QueryAllPublicKeyRequest, opts ...grpc.CallOption) (*QueryAllPublicKeyResponse, error)
	// Queries a list of Wallet items.
	Wallet(ctx context.Context, in *QueryGetWalletRequest, opts ...grpc.CallOption) (*QueryGetWalletResponse, error)
	WalletAll(ctx context.Context, in *QueryAllWalletRequest, opts ...grpc.CallOption) (*QueryAllWalletResponse, error)
	// Queries a list of IntervalPublicKeyID items.
	IntervalPublicKeyID(ctx context.Context, in *QueryGetIntervalPublicKeyIDRequest, opts ...grpc.CallOption) (*QueryGetIntervalPublicKeyIDResponse, error)
	IntervalPublicKeyIDAll(ctx context.Context, in *QueryAllIntervalPublicKeyIDRequest, opts ...grpc.CallOption) (*QueryAllIntervalPublicKeyIDResponse, error)
	// Queries a list of PioneerJar items.
	PioneerJar(ctx context.Context, in *QueryGetPioneerJarRequest, opts ...grpc.CallOption) (*QueryGetPioneerJarResponse, error)
	PioneerJarAll(ctx context.Context, in *QueryAllPioneerJarRequest, opts ...grpc.CallOption) (*QueryAllPioneerJarResponse, error)
	// Queries a list of JarRegulator items.
	JarRegulator(ctx context.Context, in *QueryGetJarRegulatorRequest, opts ...grpc.CallOption) (*QueryGetJarRegulatorResponse, error)
	JarRegulatorAll(ctx context.Context, in *QueryAllJarRegulatorRequest, opts ...grpc.CallOption) (*QueryAllJarRegulatorResponse, error)
	// Queries a list of SuspiciousTransaction items.
	SuspiciousTransaction(ctx context.Context, in *QueryGetSuspiciousTransactionRequest, opts ...grpc.CallOption) (*QueryGetSuspiciousTransactionResponse, error)
	SuspiciousTransactionAll(ctx context.Context, in *QueryAllSuspiciousTransactionRequest, opts ...grpc.CallOption) (*QueryAllSuspiciousTransactionResponse, error)
	// Queries a list of ProtectKey items.
	ProtectKey(ctx context.Context, in *QueryGetProtectKeyRequest, opts ...grpc.CallOption) (*QueryGetProtectKeyResponse, error)
	ProtectKeyAll(ctx context.Context, in *QueryAllProtectKeyRequest, opts ...grpc.CallOption) (*QueryAllProtectKeyResponse, error)
	// Queries a list of RecoverKey items.
	RecoverKey(ctx context.Context, in *QueryGetRecoverKeyRequest, opts ...grpc.CallOption) (*QueryGetRecoverKeyResponse, error)
	RecoverKeyAll(ctx context.Context, in *QueryAllRecoverKeyRequest, opts ...grpc.CallOption) (*QueryAllRecoverKeyResponse, error)
	// Queries a list of Treasury items.
	Treasury(ctx context.Context, in *QueryTreasuryRequest, opts ...grpc.CallOption) (*QueryTreasuryResponse, error)
	// Queries a list of Account items.
	Account(ctx context.Context, in *QueryAccountRequest, opts ...grpc.CallOption) (*QueryAccountResponse, error)
	// Queries a list of Incentives items.
	Incentives(ctx context.Context, in *QueryIncentivesRequest, opts ...grpc.CallOption) (*QueryIncentivesResponse, error)
	// Queries a list of EnclaveSyncEnclave items.
	EnclaveSyncEnclave(ctx context.Context, in *QueryEnclaveSyncEnclaveRequest, opts ...grpc.CallOption) (*QueryEnclaveSyncEnclaveResponse, error)
	// Queries a list of EnclaveSecretShare items.
	EnclaveSecretShare(ctx context.Context, in *QueryEnclaveSecretShareRequest, opts ...grpc.CallOption) (*QueryEnclaveSecretShareResponse, error)
	// Queries a list of EnclaveRecoverKeyShare items.
	EnclaveRecoverKeyShare(ctx context.Context, in *QueryEnclaveRecoverKeyShareRequest, opts ...grpc.CallOption) (*QueryEnclaveRecoverKeyShareResponse, error)
	EnclaveValidateEnclaveIdentity(ctx context.Context, in *QueryEnclaveValidateEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryEnclaveValidateEnclaveIdentityResponse, error)
	// Queries a list of FindCredential items.
	FindCredential(ctx context.Context, in *QueryFindCredentialRequest, opts ...grpc.CallOption) (*QueryFindCredentialResponse, error)
	// Queries a list of EnclaveIdentity items.
	EnclaveIdentity(ctx context.Context, in *QueryGetEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryGetEnclaveIdentityResponse, error)
	EnclaveIdentityAll(ctx context.Context, in *QueryAllEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryAllEnclaveIdentityResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Credential(ctx context.Context, in *QueryGetCredentialRequest, opts ...grpc.CallOption) (*QueryGetCredentialResponse, error) {
	out := new(QueryGetCredentialResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/Credential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CredentialAll(ctx context.Context, in *QueryAllCredentialRequest, opts ...grpc.CallOption) (*QueryAllCredentialResponse, error) {
	out := new(QueryAllCredentialResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/CredentialAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicKey(ctx context.Context, in *QueryGetPublicKeyRequest, opts ...grpc.CallOption) (*QueryGetPublicKeyResponse, error) {
	out := new(QueryGetPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/PublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicKeyAll(ctx context.Context, in *QueryAllPublicKeyRequest, opts ...grpc.CallOption) (*QueryAllPublicKeyResponse, error) {
	out := new(QueryAllPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/PublicKeyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Wallet(ctx context.Context, in *QueryGetWalletRequest, opts ...grpc.CallOption) (*QueryGetWalletResponse, error) {
	out := new(QueryGetWalletResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/Wallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WalletAll(ctx context.Context, in *QueryAllWalletRequest, opts ...grpc.CallOption) (*QueryAllWalletResponse, error) {
	out := new(QueryAllWalletResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/WalletAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IntervalPublicKeyID(ctx context.Context, in *QueryGetIntervalPublicKeyIDRequest, opts ...grpc.CallOption) (*QueryGetIntervalPublicKeyIDResponse, error) {
	out := new(QueryGetIntervalPublicKeyIDResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/IntervalPublicKeyID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IntervalPublicKeyIDAll(ctx context.Context, in *QueryAllIntervalPublicKeyIDRequest, opts ...grpc.CallOption) (*QueryAllIntervalPublicKeyIDResponse, error) {
	out := new(QueryAllIntervalPublicKeyIDResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/IntervalPublicKeyIDAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PioneerJar(ctx context.Context, in *QueryGetPioneerJarRequest, opts ...grpc.CallOption) (*QueryGetPioneerJarResponse, error) {
	out := new(QueryGetPioneerJarResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/PioneerJar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PioneerJarAll(ctx context.Context, in *QueryAllPioneerJarRequest, opts ...grpc.CallOption) (*QueryAllPioneerJarResponse, error) {
	out := new(QueryAllPioneerJarResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/PioneerJarAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) JarRegulator(ctx context.Context, in *QueryGetJarRegulatorRequest, opts ...grpc.CallOption) (*QueryGetJarRegulatorResponse, error) {
	out := new(QueryGetJarRegulatorResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/JarRegulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) JarRegulatorAll(ctx context.Context, in *QueryAllJarRegulatorRequest, opts ...grpc.CallOption) (*QueryAllJarRegulatorResponse, error) {
	out := new(QueryAllJarRegulatorResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/JarRegulatorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuspiciousTransaction(ctx context.Context, in *QueryGetSuspiciousTransactionRequest, opts ...grpc.CallOption) (*QueryGetSuspiciousTransactionResponse, error) {
	out := new(QueryGetSuspiciousTransactionResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/SuspiciousTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuspiciousTransactionAll(ctx context.Context, in *QueryAllSuspiciousTransactionRequest, opts ...grpc.CallOption) (*QueryAllSuspiciousTransactionResponse, error) {
	out := new(QueryAllSuspiciousTransactionResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/SuspiciousTransactionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProtectKey(ctx context.Context, in *QueryGetProtectKeyRequest, opts ...grpc.CallOption) (*QueryGetProtectKeyResponse, error) {
	out := new(QueryGetProtectKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/ProtectKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProtectKeyAll(ctx context.Context, in *QueryAllProtectKeyRequest, opts ...grpc.CallOption) (*QueryAllProtectKeyResponse, error) {
	out := new(QueryAllProtectKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/ProtectKeyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecoverKey(ctx context.Context, in *QueryGetRecoverKeyRequest, opts ...grpc.CallOption) (*QueryGetRecoverKeyResponse, error) {
	out := new(QueryGetRecoverKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/RecoverKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecoverKeyAll(ctx context.Context, in *QueryAllRecoverKeyRequest, opts ...grpc.CallOption) (*QueryAllRecoverKeyResponse, error) {
	out := new(QueryAllRecoverKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/RecoverKeyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Treasury(ctx context.Context, in *QueryTreasuryRequest, opts ...grpc.CallOption) (*QueryTreasuryResponse, error) {
	out := new(QueryTreasuryResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/Treasury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Account(ctx context.Context, in *QueryAccountRequest, opts ...grpc.CallOption) (*QueryAccountResponse, error) {
	out := new(QueryAccountResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Incentives(ctx context.Context, in *QueryIncentivesRequest, opts ...grpc.CallOption) (*QueryIncentivesResponse, error) {
	out := new(QueryIncentivesResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/Incentives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveSyncEnclave(ctx context.Context, in *QueryEnclaveSyncEnclaveRequest, opts ...grpc.CallOption) (*QueryEnclaveSyncEnclaveResponse, error) {
	out := new(QueryEnclaveSyncEnclaveResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/EnclaveSyncEnclave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveSecretShare(ctx context.Context, in *QueryEnclaveSecretShareRequest, opts ...grpc.CallOption) (*QueryEnclaveSecretShareResponse, error) {
	out := new(QueryEnclaveSecretShareResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/EnclaveSecretShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveRecoverKeyShare(ctx context.Context, in *QueryEnclaveRecoverKeyShareRequest, opts ...grpc.CallOption) (*QueryEnclaveRecoverKeyShareResponse, error) {
	out := new(QueryEnclaveRecoverKeyShareResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/EnclaveRecoverKeyShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveValidateEnclaveIdentity(ctx context.Context, in *QueryEnclaveValidateEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryEnclaveValidateEnclaveIdentityResponse, error) {
	out := new(QueryEnclaveValidateEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/EnclaveValidateEnclaveIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FindCredential(ctx context.Context, in *QueryFindCredentialRequest, opts ...grpc.CallOption) (*QueryFindCredentialResponse, error) {
	out := new(QueryFindCredentialResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/FindCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveIdentity(ctx context.Context, in *QueryGetEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryGetEnclaveIdentityResponse, error) {
	out := new(QueryGetEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/EnclaveIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveIdentityAll(ctx context.Context, in *QueryAllEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryAllEnclaveIdentityResponse, error) {
	out := new(QueryAllEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Query/EnclaveIdentityAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Credential items.
	Credential(context.Context, *QueryGetCredentialRequest) (*QueryGetCredentialResponse, error)
	CredentialAll(context.Context, *QueryAllCredentialRequest) (*QueryAllCredentialResponse, error)
	// Queries a list of PublicKey items.
	PublicKey(context.Context, *QueryGetPublicKeyRequest) (*QueryGetPublicKeyResponse, error)
	PublicKeyAll(context.Context, *QueryAllPublicKeyRequest) (*QueryAllPublicKeyResponse, error)
	// Queries a list of Wallet items.
	Wallet(context.Context, *QueryGetWalletRequest) (*QueryGetWalletResponse, error)
	WalletAll(context.Context, *QueryAllWalletRequest) (*QueryAllWalletResponse, error)
	// Queries a list of IntervalPublicKeyID items.
	IntervalPublicKeyID(context.Context, *QueryGetIntervalPublicKeyIDRequest) (*QueryGetIntervalPublicKeyIDResponse, error)
	IntervalPublicKeyIDAll(context.Context, *QueryAllIntervalPublicKeyIDRequest) (*QueryAllIntervalPublicKeyIDResponse, error)
	// Queries a list of PioneerJar items.
	PioneerJar(context.Context, *QueryGetPioneerJarRequest) (*QueryGetPioneerJarResponse, error)
	PioneerJarAll(context.Context, *QueryAllPioneerJarRequest) (*QueryAllPioneerJarResponse, error)
	// Queries a list of JarRegulator items.
	JarRegulator(context.Context, *QueryGetJarRegulatorRequest) (*QueryGetJarRegulatorResponse, error)
	JarRegulatorAll(context.Context, *QueryAllJarRegulatorRequest) (*QueryAllJarRegulatorResponse, error)
	// Queries a list of SuspiciousTransaction items.
	SuspiciousTransaction(context.Context, *QueryGetSuspiciousTransactionRequest) (*QueryGetSuspiciousTransactionResponse, error)
	SuspiciousTransactionAll(context.Context, *QueryAllSuspiciousTransactionRequest) (*QueryAllSuspiciousTransactionResponse, error)
	// Queries a list of ProtectKey items.
	ProtectKey(context.Context, *QueryGetProtectKeyRequest) (*QueryGetProtectKeyResponse, error)
	ProtectKeyAll(context.Context, *QueryAllProtectKeyRequest) (*QueryAllProtectKeyResponse, error)
	// Queries a list of RecoverKey items.
	RecoverKey(context.Context, *QueryGetRecoverKeyRequest) (*QueryGetRecoverKeyResponse, error)
	RecoverKeyAll(context.Context, *QueryAllRecoverKeyRequest) (*QueryAllRecoverKeyResponse, error)
	// Queries a list of Treasury items.
	Treasury(context.Context, *QueryTreasuryRequest) (*QueryTreasuryResponse, error)
	// Queries a list of Account items.
	Account(context.Context, *QueryAccountRequest) (*QueryAccountResponse, error)
	// Queries a list of Incentives items.
	Incentives(context.Context, *QueryIncentivesRequest) (*QueryIncentivesResponse, error)
	// Queries a list of EnclaveSyncEnclave items.
	EnclaveSyncEnclave(context.Context, *QueryEnclaveSyncEnclaveRequest) (*QueryEnclaveSyncEnclaveResponse, error)
	// Queries a list of EnclaveSecretShare items.
	EnclaveSecretShare(context.Context, *QueryEnclaveSecretShareRequest) (*QueryEnclaveSecretShareResponse, error)
	// Queries a list of EnclaveRecoverKeyShare items.
	EnclaveRecoverKeyShare(context.Context, *QueryEnclaveRecoverKeyShareRequest) (*QueryEnclaveRecoverKeyShareResponse, error)
	EnclaveValidateEnclaveIdentity(context.Context, *QueryEnclaveValidateEnclaveIdentityRequest) (*QueryEnclaveValidateEnclaveIdentityResponse, error)
	// Queries a list of FindCredential items.
	FindCredential(context.Context, *QueryFindCredentialRequest) (*QueryFindCredentialResponse, error)
	// Queries a list of EnclaveIdentity items.
	EnclaveIdentity(context.Context, *QueryGetEnclaveIdentityRequest) (*QueryGetEnclaveIdentityResponse, error)
	EnclaveIdentityAll(context.Context, *QueryAllEnclaveIdentityRequest) (*QueryAllEnclaveIdentityResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Credential(ctx context.Context, req *QueryGetCredentialRequest) (*QueryGetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credential not implemented")
}
func (*UnimplementedQueryServer) CredentialAll(ctx context.Context, req *QueryAllCredentialRequest) (*QueryAllCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialAll not implemented")
}
func (*UnimplementedQueryServer) PublicKey(ctx context.Context, req *QueryGetPublicKeyRequest) (*QueryGetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}
func (*UnimplementedQueryServer) PublicKeyAll(ctx context.Context, req *QueryAllPublicKeyRequest) (*QueryAllPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKeyAll not implemented")
}
func (*UnimplementedQueryServer) Wallet(ctx context.Context, req *QueryGetWalletRequest) (*QueryGetWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wallet not implemented")
}
func (*UnimplementedQueryServer) WalletAll(ctx context.Context, req *QueryAllWalletRequest) (*QueryAllWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletAll not implemented")
}
func (*UnimplementedQueryServer) IntervalPublicKeyID(ctx context.Context, req *QueryGetIntervalPublicKeyIDRequest) (*QueryGetIntervalPublicKeyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntervalPublicKeyID not implemented")
}
func (*UnimplementedQueryServer) IntervalPublicKeyIDAll(ctx context.Context, req *QueryAllIntervalPublicKeyIDRequest) (*QueryAllIntervalPublicKeyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntervalPublicKeyIDAll not implemented")
}
func (*UnimplementedQueryServer) PioneerJar(ctx context.Context, req *QueryGetPioneerJarRequest) (*QueryGetPioneerJarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerJar not implemented")
}
func (*UnimplementedQueryServer) PioneerJarAll(ctx context.Context, req *QueryAllPioneerJarRequest) (*QueryAllPioneerJarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerJarAll not implemented")
}
func (*UnimplementedQueryServer) JarRegulator(ctx context.Context, req *QueryGetJarRegulatorRequest) (*QueryGetJarRegulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JarRegulator not implemented")
}
func (*UnimplementedQueryServer) JarRegulatorAll(ctx context.Context, req *QueryAllJarRegulatorRequest) (*QueryAllJarRegulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JarRegulatorAll not implemented")
}
func (*UnimplementedQueryServer) SuspiciousTransaction(ctx context.Context, req *QueryGetSuspiciousTransactionRequest) (*QueryGetSuspiciousTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspiciousTransaction not implemented")
}
func (*UnimplementedQueryServer) SuspiciousTransactionAll(ctx context.Context, req *QueryAllSuspiciousTransactionRequest) (*QueryAllSuspiciousTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspiciousTransactionAll not implemented")
}
func (*UnimplementedQueryServer) ProtectKey(ctx context.Context, req *QueryGetProtectKeyRequest) (*QueryGetProtectKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtectKey not implemented")
}
func (*UnimplementedQueryServer) ProtectKeyAll(ctx context.Context, req *QueryAllProtectKeyRequest) (*QueryAllProtectKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtectKeyAll not implemented")
}
func (*UnimplementedQueryServer) RecoverKey(ctx context.Context, req *QueryGetRecoverKeyRequest) (*QueryGetRecoverKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverKey not implemented")
}
func (*UnimplementedQueryServer) RecoverKeyAll(ctx context.Context, req *QueryAllRecoverKeyRequest) (*QueryAllRecoverKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverKeyAll not implemented")
}
func (*UnimplementedQueryServer) Treasury(ctx context.Context, req *QueryTreasuryRequest) (*QueryTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Treasury not implemented")
}
func (*UnimplementedQueryServer) Account(ctx context.Context, req *QueryAccountRequest) (*QueryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (*UnimplementedQueryServer) Incentives(ctx context.Context, req *QueryIncentivesRequest) (*QueryIncentivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Incentives not implemented")
}
func (*UnimplementedQueryServer) EnclaveSyncEnclave(ctx context.Context, req *QueryEnclaveSyncEnclaveRequest) (*QueryEnclaveSyncEnclaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveSyncEnclave not implemented")
}
func (*UnimplementedQueryServer) EnclaveSecretShare(ctx context.Context, req *QueryEnclaveSecretShareRequest) (*QueryEnclaveSecretShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveSecretShare not implemented")
}
func (*UnimplementedQueryServer) EnclaveRecoverKeyShare(ctx context.Context, req *QueryEnclaveRecoverKeyShareRequest) (*QueryEnclaveRecoverKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveRecoverKeyShare not implemented")
}
func (*UnimplementedQueryServer) EnclaveValidateEnclaveIdentity(ctx context.Context, req *QueryEnclaveValidateEnclaveIdentityRequest) (*QueryEnclaveValidateEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveValidateEnclaveIdentity not implemented")
}
func (*UnimplementedQueryServer) FindCredential(ctx context.Context, req *QueryFindCredentialRequest) (*QueryFindCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCredential not implemented")
}
func (*UnimplementedQueryServer) EnclaveIdentity(ctx context.Context, req *QueryGetEnclaveIdentityRequest) (*QueryGetEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveIdentity not implemented")
}
func (*UnimplementedQueryServer) EnclaveIdentityAll(ctx context.Context, req *QueryAllEnclaveIdentityRequest) (*QueryAllEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveIdentityAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Credential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Credential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/Credential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Credential(ctx, req.(*QueryGetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CredentialAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CredentialAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/CredentialAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CredentialAll(ctx, req.(*QueryAllCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicKey(ctx, req.(*QueryGetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicKeyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicKeyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/PublicKeyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicKeyAll(ctx, req.(*QueryAllPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Wallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Wallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/Wallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Wallet(ctx, req.(*QueryGetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WalletAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WalletAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/WalletAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WalletAll(ctx, req.(*QueryAllWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IntervalPublicKeyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIntervalPublicKeyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IntervalPublicKeyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/IntervalPublicKeyID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IntervalPublicKeyID(ctx, req.(*QueryGetIntervalPublicKeyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IntervalPublicKeyIDAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIntervalPublicKeyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IntervalPublicKeyIDAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/IntervalPublicKeyIDAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IntervalPublicKeyIDAll(ctx, req.(*QueryAllIntervalPublicKeyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PioneerJar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPioneerJarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PioneerJar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/PioneerJar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PioneerJar(ctx, req.(*QueryGetPioneerJarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PioneerJarAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPioneerJarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PioneerJarAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/PioneerJarAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PioneerJarAll(ctx, req.(*QueryAllPioneerJarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_JarRegulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetJarRegulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).JarRegulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/JarRegulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).JarRegulator(ctx, req.(*QueryGetJarRegulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_JarRegulatorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllJarRegulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).JarRegulatorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/JarRegulatorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).JarRegulatorAll(ctx, req.(*QueryAllJarRegulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuspiciousTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSuspiciousTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuspiciousTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/SuspiciousTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuspiciousTransaction(ctx, req.(*QueryGetSuspiciousTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuspiciousTransactionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSuspiciousTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuspiciousTransactionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/SuspiciousTransactionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuspiciousTransactionAll(ctx, req.(*QueryAllSuspiciousTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProtectKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtectKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProtectKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/ProtectKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProtectKey(ctx, req.(*QueryGetProtectKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProtectKeyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProtectKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProtectKeyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/ProtectKeyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProtectKeyAll(ctx, req.(*QueryAllProtectKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecoverKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecoverKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecoverKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/RecoverKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecoverKey(ctx, req.(*QueryGetRecoverKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecoverKeyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRecoverKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecoverKeyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/RecoverKeyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecoverKeyAll(ctx, req.(*QueryAllRecoverKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Treasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Treasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/Treasury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Treasury(ctx, req.(*QueryTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Account(ctx, req.(*QueryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Incentives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Incentives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/Incentives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Incentives(ctx, req.(*QueryIncentivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveSyncEnclave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveSyncEnclaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveSyncEnclave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/EnclaveSyncEnclave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveSyncEnclave(ctx, req.(*QueryEnclaveSyncEnclaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveSecretShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveSecretShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveSecretShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/EnclaveSecretShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveSecretShare(ctx, req.(*QueryEnclaveSecretShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveRecoverKeyShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveRecoverKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveRecoverKeyShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/EnclaveRecoverKeyShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveRecoverKeyShare(ctx, req.(*QueryEnclaveRecoverKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveValidateEnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveValidateEnclaveIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveValidateEnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/EnclaveValidateEnclaveIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveValidateEnclaveIdentity(ctx, req.(*QueryEnclaveValidateEnclaveIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FindCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFindCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FindCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/FindCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FindCredential(ctx, req.(*QueryFindCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEnclaveIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/EnclaveIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveIdentity(ctx, req.(*QueryGetEnclaveIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveIdentityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEnclaveIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveIdentityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Query/EnclaveIdentityAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveIdentityAll(ctx, req.(*QueryAllEnclaveIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qadena.qadena.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Credential",
			Handler:    _Query_Credential_Handler,
		},
		{
			MethodName: "CredentialAll",
			Handler:    _Query_CredentialAll_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _Query_PublicKey_Handler,
		},
		{
			MethodName: "PublicKeyAll",
			Handler:    _Query_PublicKeyAll_Handler,
		},
		{
			MethodName: "Wallet",
			Handler:    _Query_Wallet_Handler,
		},
		{
			MethodName: "WalletAll",
			Handler:    _Query_WalletAll_Handler,
		},
		{
			MethodName: "IntervalPublicKeyID",
			Handler:    _Query_IntervalPublicKeyID_Handler,
		},
		{
			MethodName: "IntervalPublicKeyIDAll",
			Handler:    _Query_IntervalPublicKeyIDAll_Handler,
		},
		{
			MethodName: "PioneerJar",
			Handler:    _Query_PioneerJar_Handler,
		},
		{
			MethodName: "PioneerJarAll",
			Handler:    _Query_PioneerJarAll_Handler,
		},
		{
			MethodName: "JarRegulator",
			Handler:    _Query_JarRegulator_Handler,
		},
		{
			MethodName: "JarRegulatorAll",
			Handler:    _Query_JarRegulatorAll_Handler,
		},
		{
			MethodName: "SuspiciousTransaction",
			Handler:    _Query_SuspiciousTransaction_Handler,
		},
		{
			MethodName: "SuspiciousTransactionAll",
			Handler:    _Query_SuspiciousTransactionAll_Handler,
		},
		{
			MethodName: "ProtectKey",
			Handler:    _Query_ProtectKey_Handler,
		},
		{
			MethodName: "ProtectKeyAll",
			Handler:    _Query_ProtectKeyAll_Handler,
		},
		{
			MethodName: "RecoverKey",
			Handler:    _Query_RecoverKey_Handler,
		},
		{
			MethodName: "RecoverKeyAll",
			Handler:    _Query_RecoverKeyAll_Handler,
		},
		{
			MethodName: "Treasury",
			Handler:    _Query_Treasury_Handler,
		},
		{
			MethodName: "Account",
			Handler:    _Query_Account_Handler,
		},
		{
			MethodName: "Incentives",
			Handler:    _Query_Incentives_Handler,
		},
		{
			MethodName: "EnclaveSyncEnclave",
			Handler:    _Query_EnclaveSyncEnclave_Handler,
		},
		{
			MethodName: "EnclaveSecretShare",
			Handler:    _Query_EnclaveSecretShare_Handler,
		},
		{
			MethodName: "EnclaveRecoverKeyShare",
			Handler:    _Query_EnclaveRecoverKeyShare_Handler,
		},
		{
			MethodName: "EnclaveValidateEnclaveIdentity",
			Handler:    _Query_EnclaveValidateEnclaveIdentity_Handler,
		},
		{
			MethodName: "FindCredential",
			Handler:    _Query_FindCredential_Handler,
		},
		{
			MethodName: "EnclaveIdentity",
			Handler:    _Query_EnclaveIdentity_Handler,
		},
		{
			MethodName: "EnclaveIdentityAll",
			Handler:    _Query_EnclaveIdentityAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qadena/qadena/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialType) > 0 {
		i -= len(m.CredentialType)
		copy(dAtA[i:], m.CredentialType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredentialType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CredentialID) > 0 {
		i -= len(m.CredentialID)
		copy(dAtA[i:], m.CredentialID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredentialID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Credential) > 0 {
		for iNdEx := len(m.Credential) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Credential[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPublicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPublicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPublicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKType) > 0 {
		i -= len(m.PubKType)
		copy(dAtA[i:], m.PubKType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PubKType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKID) > 0 {
		i -= len(m.PubKID)
		copy(dAtA[i:], m.PubKID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PubKID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPublicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPublicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPublicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		for iNdEx := len(m.PublicKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PublicKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletID) > 0 {
		i -= len(m.WalletID)
		copy(dAtA[i:], m.WalletID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Wallet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Wallet) > 0 {
		for iNdEx := len(m.Wallet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wallet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIntervalPublicKeyIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIntervalPublicKeyIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIntervalPublicKeyIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIntervalPublicKeyIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIntervalPublicKeyIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIntervalPublicKeyIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IntervalPublicKeyID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllIntervalPublicKeyIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIntervalPublicKeyIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIntervalPublicKeyIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIntervalPublicKeyIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIntervalPublicKeyIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIntervalPublicKeyIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IntervalPublicKeyID) > 0 {
		for iNdEx := len(m.IntervalPublicKeyID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IntervalPublicKeyID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPioneerJarRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPioneerJarRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPioneerJarRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PioneerID) > 0 {
		i -= len(m.PioneerID)
		copy(dAtA[i:], m.PioneerID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PioneerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPioneerJarResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPioneerJarResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPioneerJarResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PioneerJar.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPioneerJarRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPioneerJarRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPioneerJarRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPioneerJarResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPioneerJarResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPioneerJarResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PioneerJar) > 0 {
		for iNdEx := len(m.PioneerJar) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PioneerJar[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetJarRegulatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetJarRegulatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetJarRegulatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JarID) > 0 {
		i -= len(m.JarID)
		copy(dAtA[i:], m.JarID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.JarID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetJarRegulatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetJarRegulatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetJarRegulatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.JarRegulator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllJarRegulatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllJarRegulatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllJarRegulatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllJarRegulatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllJarRegulatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllJarRegulatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.JarRegulator) > 0 {
		for iNdEx := len(m.JarRegulator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JarRegulator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSuspiciousTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuspiciousTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuspiciousTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSuspiciousTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuspiciousTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuspiciousTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SuspiciousTransaction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSuspiciousTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSuspiciousTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSuspiciousTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSuspiciousTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSuspiciousTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSuspiciousTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SuspiciousTransaction) > 0 {
		for iNdEx := len(m.SuspiciousTransaction) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SuspiciousTransaction[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtectKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtectKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtectKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletID) > 0 {
		i -= len(m.WalletID)
		copy(dAtA[i:], m.WalletID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtectKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtectKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtectKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProtectKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProtectKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProtectKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProtectKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialID) > 0 {
		i -= len(m.CredentialID)
		copy(dAtA[i:], m.CredentialID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredentialID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProtectKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProtectKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProtectKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProtectKey) > 0 {
		for iNdEx := len(m.ProtectKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecoverKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecoverKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecoverKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletID) > 0 {
		i -= len(m.WalletID)
		copy(dAtA[i:], m.WalletID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecoverKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecoverKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecoverKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RecoverKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRecoverKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecoverKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecoverKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialID) > 0 {
		i -= len(m.CredentialID)
		copy(dAtA[i:], m.CredentialID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredentialID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRecoverKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecoverKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecoverKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecoverKey) > 0 {
		for iNdEx := len(m.RecoverKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecoverKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTreasuryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTreasuryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTreasuryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTreasuryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTreasuryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTreasuryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EncryptedBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TotalBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedBalance) > 0 {
		i -= len(m.EncryptedBalance)
		copy(dAtA[i:], m.EncryptedBalance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncryptedBalance)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransparentBalance) > 0 {
		i -= len(m.TransparentBalance)
		copy(dAtA[i:], m.TransparentBalance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TransparentBalance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIncentivesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CreateEphemeralWalletTransparentIncentive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.CreateWalletTransparentIncentive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CreateEphemeralWalletIncentive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CreateWalletIncentive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEnclaveValidateEnclaveIdentityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnclaveValidateEnclaveIdentityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnclaveValidateEnclaveIdentityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProductID) > 0 {
		i -= len(m.ProductID)
		copy(dAtA[i:], m.ProductID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProductID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SignerID) > 0 {
		i -= len(m.SignerID)
		copy(dAtA[i:], m.SignerID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SignerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniqueID) > 0 {
		i -= len(m.UniqueID)
		copy(dAtA[i:], m.UniqueID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UniqueID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnclaveValidateEnclaveIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnclaveValidateEnclaveIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnclaveValidateEnclaveIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnclaveSyncEnclaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnclaveSyncEnclaveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnclaveSyncEnclaveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnclavePubK) > 0 {
		i -= len(m.EnclavePubK)
		copy(dAtA[i:], m.EnclavePubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EnclavePubK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnclaveSyncEnclaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnclaveSyncEnclaveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnclaveSyncEnclaveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncEnclaveParamsEnclavePubK) > 0 {
		i -= len(m.EncEnclaveParamsEnclavePubK)
		copy(dAtA[i:], m.EncEnclaveParamsEnclavePubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncEnclaveParamsEnclavePubK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnclaveSecretShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnclaveSecretShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnclaveSecretShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKID) > 0 {
		i -= len(m.PubKID)
		copy(dAtA[i:], m.PubKID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PubKID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EnclavePubK) > 0 {
		i -= len(m.EnclavePubK)
		copy(dAtA[i:], m.EnclavePubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EnclavePubK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnclaveSecretShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnclaveSecretShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnclaveSecretShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncSecretShareEnclavePubK) > 0 {
		i -= len(m.EncSecretShareEnclavePubK)
		copy(dAtA[i:], m.EncSecretShareEnclavePubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncSecretShareEnclavePubK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnclaveRecoverKeyShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnclaveRecoverKeyShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnclaveRecoverKeyShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncShareWalletPubK) > 0 {
		i -= len(m.EncShareWalletPubK)
		copy(dAtA[i:], m.EncShareWalletPubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncShareWalletPubK)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShareWalletID) > 0 {
		i -= len(m.ShareWalletID)
		copy(dAtA[i:], m.ShareWalletID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ShareWalletID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewWalletID) > 0 {
		i -= len(m.NewWalletID)
		copy(dAtA[i:], m.NewWalletID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NewWalletID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnclaveRecoverKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnclaveRecoverKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnclaveRecoverKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncShareWalletPubK) > 0 {
		i -= len(m.EncShareWalletPubK)
		copy(dAtA[i:], m.EncShareWalletPubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncShareWalletPubK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncCheckPCSSIntervalPubK) > 0 {
		i -= len(m.EncCheckPCSSIntervalPubK)
		copy(dAtA[i:], m.EncCheckPCSSIntervalPubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncCheckPCSSIntervalPubK)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EncProofPCSSIntervalPubK) > 0 {
		i -= len(m.EncProofPCSSIntervalPubK)
		copy(dAtA[i:], m.EncProofPCSSIntervalPubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncProofPCSSIntervalPubK)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EncUserCredentialPubKSSIntervalPubK) > 0 {
		i -= len(m.EncUserCredentialPubKSSIntervalPubK)
		copy(dAtA[i:], m.EncUserCredentialPubKSSIntervalPubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncUserCredentialPubKSSIntervalPubK)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SSIntervalPubKID) > 0 {
		i -= len(m.SSIntervalPubKID)
		copy(dAtA[i:], m.SSIntervalPubKID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SSIntervalPubKID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CredentialType) > 0 {
		i -= len(m.CredentialType)
		copy(dAtA[i:], m.CredentialType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredentialType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CredentialPC) > 0 {
		i -= len(m.CredentialPC)
		copy(dAtA[i:], m.CredentialPC)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredentialPC)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncCredentialIDUserCredentialPubK) > 0 {
		i -= len(m.EncCredentialIDUserCredentialPubK)
		copy(dAtA[i:], m.EncCredentialIDUserCredentialPubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncCredentialIDUserCredentialPubK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncPersonalInfoUserCredentialPubK) > 0 {
		i -= len(m.EncPersonalInfoUserCredentialPubK)
		copy(dAtA[i:], m.EncPersonalInfoUserCredentialPubK)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncPersonalInfoUserCredentialPubK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEnclaveIdentityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEnclaveIdentityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEnclaveIdentityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UniqueID) > 0 {
		i -= len(m.UniqueID)
		copy(dAtA[i:], m.UniqueID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UniqueID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEnclaveIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEnclaveIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEnclaveIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EnclaveIdentity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEnclaveIdentityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEnclaveIdentityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEnclaveIdentityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEnclaveIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEnclaveIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEnclaveIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EnclaveIdentity) > 0 {
		for iNdEx := len(m.EnclaveIdentity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnclaveIdentity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CredentialType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Credential.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Credential) > 0 {
		for _, e := range m.Credential {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPublicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PubKType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PublicKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPublicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		for _, e := range m.PublicKey {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Wallet.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Wallet) > 0 {
		for _, e := range m.Wallet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIntervalPublicKeyIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIntervalPublicKeyIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IntervalPublicKeyID.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllIntervalPublicKeyIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIntervalPublicKeyIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IntervalPublicKeyID) > 0 {
		for _, e := range m.IntervalPublicKeyID {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPioneerJarRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PioneerID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPioneerJarResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PioneerJar.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPioneerJarRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPioneerJarResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PioneerJar) > 0 {
		for _, e := range m.PioneerJar {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetJarRegulatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JarID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetJarRegulatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.JarRegulator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllJarRegulatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllJarRegulatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JarRegulator) > 0 {
		for _, e := range m.JarRegulator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSuspiciousTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSuspiciousTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SuspiciousTransaction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSuspiciousTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSuspiciousTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuspiciousTransaction) > 0 {
		for _, e := range m.SuspiciousTransaction {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtectKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtectKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProtectKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProtectKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CredentialID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProtectKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProtectKey) > 0 {
		for _, e := range m.ProtectKey {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecoverKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecoverKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RecoverKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRecoverKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CredentialID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRecoverKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecoverKey) > 0 {
		for _, e := range m.RecoverKey {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTreasuryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTreasuryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EncryptedBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransparentBalance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EncryptedBalance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIncentivesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIncentivesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CreateWalletIncentive.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CreateEphemeralWalletIncentive.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CreateWalletTransparentIncentive.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CreateEphemeralWalletTransparentIncentive.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEnclaveValidateEnclaveIdentityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UniqueID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SignerID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ProductID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEnclaveValidateEnclaveIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEnclaveSyncEnclaveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EnclavePubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEnclaveSyncEnclaveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EncEnclaveParamsEnclavePubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEnclaveSecretShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EnclavePubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PubKID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEnclaveSecretShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EncSecretShareEnclavePubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEnclaveRecoverKeyShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NewWalletID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ShareWalletID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EncShareWalletPubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEnclaveRecoverKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EncShareWalletPubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFindCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialPC)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CredentialType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SSIntervalPubKID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EncUserCredentialPubKSSIntervalPubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EncProofPCSSIntervalPubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EncCheckPCSSIntervalPubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFindCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncPersonalInfoUserCredentialPubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EncCredentialIDUserCredentialPubK)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEnclaveIdentityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEnclaveIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EnclaveIdentity.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEnclaveIdentityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEnclaveIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EnclaveIdentity) > 0 {
		for _, e := range m.EnclaveIdentity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credential = append(m.Credential, Credential{})
			if err := m.Credential[len(m.Credential)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPublicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPublicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPublicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPublicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPublicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPublicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey, PublicKey{})
			if err := m.PublicKey[len(m.PublicKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Wallet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallet = append(m.Wallet, Wallet{})
			if err := m.Wallet[len(m.Wallet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIntervalPublicKeyIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIntervalPublicKeyIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIntervalPublicKeyIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIntervalPublicKeyIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIntervalPublicKeyIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIntervalPublicKeyIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalPublicKeyID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IntervalPublicKeyID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIntervalPublicKeyIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIntervalPublicKeyIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIntervalPublicKeyIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIntervalPublicKeyIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIntervalPublicKeyIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIntervalPublicKeyIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalPublicKeyID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntervalPublicKeyID = append(m.IntervalPublicKeyID, IntervalPublicKeyID{})
			if err := m.IntervalPublicKeyID[len(m.IntervalPublicKeyID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPioneerJarRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPioneerJarRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPioneerJarRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PioneerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PioneerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPioneerJarResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPioneerJarResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPioneerJarResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PioneerJar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PioneerJar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPioneerJarRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPioneerJarRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPioneerJarRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPioneerJarResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPioneerJarResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPioneerJarResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PioneerJar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PioneerJar = append(m.PioneerJar, PioneerJar{})
			if err := m.PioneerJar[len(m.PioneerJar)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetJarRegulatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetJarRegulatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetJarRegulatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JarID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JarID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetJarRegulatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetJarRegulatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetJarRegulatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JarRegulator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JarRegulator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllJarRegulatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllJarRegulatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllJarRegulatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllJarRegulatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllJarRegulatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllJarRegulatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JarRegulator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JarRegulator = append(m.JarRegulator, JarRegulator{})
			if err := m.JarRegulator[len(m.JarRegulator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuspiciousTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuspiciousTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuspiciousTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuspiciousTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuspiciousTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuspiciousTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspiciousTransaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SuspiciousTransaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSuspiciousTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSuspiciousTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSuspiciousTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSuspiciousTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSuspiciousTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSuspiciousTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspiciousTransaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuspiciousTransaction = append(m.SuspiciousTransaction, SuspiciousTransaction{})
			if err := m.SuspiciousTransaction[len(m.SuspiciousTransaction)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtectKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtectKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtectKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtectKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtectKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtectKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtectKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProtectKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProtectKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProtectKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProtectKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProtectKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProtectKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectKey = append(m.ProtectKey, ProtectKey{})
			if err := m.ProtectKey[len(m.ProtectKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecoverKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecoverKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecoverKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecoverKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecoverKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecoverKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecoverKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecoverKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecoverKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecoverKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecoverKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecoverKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecoverKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoverKey = append(m.RecoverKey, RecoverKey{})
			if err := m.RecoverKey[len(m.RecoverKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTreasuryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTreasuryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTreasuryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTreasuryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTreasuryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTreasuryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EncryptedBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransparentBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransparentBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateWalletIncentive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreateWalletIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateEphemeralWalletIncentive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreateEphemeralWalletIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateWalletTransparentIncentive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreateWalletTransparentIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateEphemeralWalletTransparentIncentive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreateEphemeralWalletTransparentIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnclaveValidateEnclaveIdentityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnclaveValidateEnclaveIdentityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnclaveValidateEnclaveIdentityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnclaveValidateEnclaveIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnclaveValidateEnclaveIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnclaveValidateEnclaveIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnclaveSyncEnclaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnclaveSyncEnclaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnclaveSyncEnclaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclavePubK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnclavePubK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnclaveSyncEnclaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnclaveSyncEnclaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnclaveSyncEnclaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncEnclaveParamsEnclavePubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncEnclaveParamsEnclavePubK = append(m.EncEnclaveParamsEnclavePubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncEnclaveParamsEnclavePubK == nil {
				m.EncEnclaveParamsEnclavePubK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnclaveSecretShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnclaveSecretShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnclaveSecretShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclavePubK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnclavePubK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnclaveSecretShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnclaveSecretShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnclaveSecretShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncSecretShareEnclavePubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncSecretShareEnclavePubK = append(m.EncSecretShareEnclavePubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncSecretShareEnclavePubK == nil {
				m.EncSecretShareEnclavePubK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnclaveRecoverKeyShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnclaveRecoverKeyShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnclaveRecoverKeyShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewWalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewWalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareWalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareWalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncShareWalletPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncShareWalletPubK = append(m.EncShareWalletPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncShareWalletPubK == nil {
				m.EncShareWalletPubK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnclaveRecoverKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnclaveRecoverKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnclaveRecoverKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncShareWalletPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncShareWalletPubK = append(m.EncShareWalletPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncShareWalletPubK == nil {
				m.EncShareWalletPubK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialPC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialPC = append(m.CredentialPC[:0], dAtA[iNdEx:postIndex]...)
			if m.CredentialPC == nil {
				m.CredentialPC = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSIntervalPubKID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SSIntervalPubKID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncUserCredentialPubKSSIntervalPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncUserCredentialPubKSSIntervalPubK = append(m.EncUserCredentialPubKSSIntervalPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncUserCredentialPubKSSIntervalPubK == nil {
				m.EncUserCredentialPubKSSIntervalPubK = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncProofPCSSIntervalPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncProofPCSSIntervalPubK = append(m.EncProofPCSSIntervalPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncProofPCSSIntervalPubK == nil {
				m.EncProofPCSSIntervalPubK = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCheckPCSSIntervalPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCheckPCSSIntervalPubK = append(m.EncCheckPCSSIntervalPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCheckPCSSIntervalPubK == nil {
				m.EncCheckPCSSIntervalPubK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncPersonalInfoUserCredentialPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncPersonalInfoUserCredentialPubK = append(m.EncPersonalInfoUserCredentialPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncPersonalInfoUserCredentialPubK == nil {
				m.EncPersonalInfoUserCredentialPubK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCredentialIDUserCredentialPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCredentialIDUserCredentialPubK = append(m.EncCredentialIDUserCredentialPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCredentialIDUserCredentialPubK == nil {
				m.EncCredentialIDUserCredentialPubK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEnclaveIdentityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEnclaveIdentityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEnclaveIdentityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEnclaveIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEnclaveIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEnclaveIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclaveIdentity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EnclaveIdentity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEnclaveIdentityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEnclaveIdentityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEnclaveIdentityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEnclaveIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEnclaveIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEnclaveIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclaveIdentity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnclaveIdentity = append(m.EnclaveIdentity, EnclaveIdentity{})
			if err := m.EnclaveIdentity[len(m.EnclaveIdentity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
