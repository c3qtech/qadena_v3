// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/range_proof.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BRangeProof struct {
	A        *BECPoint           `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	S        *BECPoint           `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	TCommits []*BECPoint         `protobuf:"bytes,3,rep,name=tCommits,proto3" json:"tCommits,omitempty"`
	TauX     *BInt               `protobuf:"bytes,4,opt,name=tauX,proto3" json:"tauX,omitempty"`
	Mu       *BInt               `protobuf:"bytes,5,opt,name=mu,proto3" json:"mu,omitempty"`
	T        *BInt               `protobuf:"bytes,6,opt,name=t,proto3" json:"t,omitempty"`
	IPP      *BInnerProductProof `protobuf:"bytes,7,opt,name=iPP,proto3" json:"iPP,omitempty"`
}

func (m *BRangeProof) Reset()         { *m = BRangeProof{} }
func (m *BRangeProof) String() string { return proto.CompactTextString(m) }
func (*BRangeProof) ProtoMessage()    {}
func (*BRangeProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b1d338c961e63f8, []int{0}
}
func (m *BRangeProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BRangeProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BRangeProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BRangeProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BRangeProof.Merge(m, src)
}
func (m *BRangeProof) XXX_Size() int {
	return m.Size()
}
func (m *BRangeProof) XXX_DiscardUnknown() {
	xxx_messageInfo_BRangeProof.DiscardUnknown(m)
}

var xxx_messageInfo_BRangeProof proto.InternalMessageInfo

func (m *BRangeProof) GetA() *BECPoint {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *BRangeProof) GetS() *BECPoint {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *BRangeProof) GetTCommits() []*BECPoint {
	if m != nil {
		return m.TCommits
	}
	return nil
}

func (m *BRangeProof) GetTauX() *BInt {
	if m != nil {
		return m.TauX
	}
	return nil
}

func (m *BRangeProof) GetMu() *BInt {
	if m != nil {
		return m.Mu
	}
	return nil
}

func (m *BRangeProof) GetT() *BInt {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *BRangeProof) GetIPP() *BInnerProductProof {
	if m != nil {
		return m.IPP
	}
	return nil
}

func init() {
	proto.RegisterType((*BRangeProof)(nil), "qadena.qadena.BRangeProof")
}

func init() { proto.RegisterFile("qadena/qadena/range_proof.proto", fileDescriptor_3b1d338c961e63f8) }

var fileDescriptor_3b1d338c961e63f8 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xd0, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0x07, 0xf0, 0xa6, 0x9d, 0x53, 0x32, 0xbc, 0x44, 0xc4, 0x50, 0x24, 0x6e, 0x13, 0xd1, 0x53,
	0x07, 0xf6, 0x0d, 0x3a, 0x3c, 0x78, 0x2b, 0x3d, 0x89, 0x97, 0x92, 0xad, 0xb1, 0xf4, 0xd0, 0xa4,
	0xa6, 0x5f, 0x41, 0xdf, 0xc2, 0xa7, 0xf1, 0x19, 0x3c, 0xee, 0xe8, 0x51, 0xda, 0x17, 0x91, 0xb4,
	0x75, 0x50, 0x65, 0xee, 0x94, 0xc3, 0xf7, 0xfb, 0xbe, 0xfc, 0xf9, 0xe3, 0x8b, 0x67, 0x9e, 0x08,
	0xc9, 0x17, 0xfd, 0xa3, 0xb9, 0x4c, 0x45, 0x5c, 0x68, 0xa5, 0x9e, 0xbc, 0x42, 0x2b, 0x50, 0xe4,
	0xb8, 0x9b, 0x78, 0xdd, 0xe3, 0x9e, 0x0f, 0xbd, 0x58, 0xc7, 0x85, 0xca, 0x24, 0x74, 0xd8, 0x9d,
	0x0f, 0xa7, 0x99, 0x94, 0x42, 0x9b, 0x6b, 0x49, 0xcc, 0x75, 0xda, 0x1b, 0x77, 0x68, 0x56, 0x59,
	0xba, 0xdd, 0x9f, 0xbf, 0xdb, 0x78, 0x12, 0x44, 0x26, 0x43, 0x68, 0x22, 0x90, 0x2b, 0x8c, 0x38,
	0x45, 0x53, 0x74, 0x33, 0xb9, 0x3d, 0xf3, 0x06, 0x41, 0xbc, 0xe0, 0x6e, 0x19, 0x9a, 0x9f, 0x23,
	0xc4, 0x0d, 0x2b, 0xa9, 0xbd, 0x87, 0x95, 0xc4, 0xc7, 0x47, 0xb0, 0x54, 0x79, 0x9e, 0x41, 0x49,
	0x9d, 0xa9, 0xf3, 0x9f, 0xde, 0x42, 0x72, 0x8d, 0x47, 0xc0, 0xab, 0x07, 0x3a, 0x6a, 0xcf, 0x9f,
	0xfc, 0x5e, 0xb8, 0x97, 0x10, 0xb5, 0x80, 0x5c, 0x62, 0x3b, 0xaf, 0xe8, 0xc1, 0x6e, 0x66, 0xe7,
	0x15, 0x99, 0x61, 0x04, 0x74, 0xbc, 0xdb, 0x20, 0x20, 0x3e, 0x76, 0xb2, 0x30, 0xa4, 0x87, 0x2d,
	0x9a, 0xfd, 0x45, 0x52, 0xe8, 0x50, 0xab, 0xa4, 0x5a, 0x43, 0xdb, 0x51, 0x64, 0x74, 0xb0, 0xf8,
	0xa8, 0x19, 0xda, 0xd4, 0x0c, 0x7d, 0xd5, 0x0c, 0xbd, 0x35, 0xcc, 0xda, 0x34, 0xcc, 0xfa, 0x6c,
	0x98, 0xf5, 0x78, 0xda, 0xf7, 0xfc, 0xf2, 0x53, 0x38, 0xbc, 0x16, 0xa2, 0x5c, 0x8d, 0xdb, 0xc2,
	0xfd, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0xc2, 0xa7, 0xf5, 0x00, 0x02, 0x00, 0x00,
}

func (m *BRangeProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BRangeProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BRangeProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IPP != nil {
		{
			size, err := m.IPP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.T != nil {
		{
			size, err := m.T.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Mu != nil {
		{
			size, err := m.Mu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TauX != nil {
		{
			size, err := m.TauX.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TCommits) > 0 {
		for iNdEx := len(m.TCommits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TCommits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRangeProof(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.S != nil {
		{
			size, err := m.S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.A != nil {
		{
			size, err := m.A.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRangeProof(dAtA []byte, offset int, v uint64) int {
	offset -= sovRangeProof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BRangeProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A != nil {
		l = m.A.Size()
		n += 1 + l + sovRangeProof(uint64(l))
	}
	if m.S != nil {
		l = m.S.Size()
		n += 1 + l + sovRangeProof(uint64(l))
	}
	if len(m.TCommits) > 0 {
		for _, e := range m.TCommits {
			l = e.Size()
			n += 1 + l + sovRangeProof(uint64(l))
		}
	}
	if m.TauX != nil {
		l = m.TauX.Size()
		n += 1 + l + sovRangeProof(uint64(l))
	}
	if m.Mu != nil {
		l = m.Mu.Size()
		n += 1 + l + sovRangeProof(uint64(l))
	}
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sovRangeProof(uint64(l))
	}
	if m.IPP != nil {
		l = m.IPP.Size()
		n += 1 + l + sovRangeProof(uint64(l))
	}
	return n
}

func sovRangeProof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRangeProof(x uint64) (n int) {
	return sovRangeProof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BRangeProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRangeProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BRangeProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BRangeProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.A == nil {
				m.A = &BECPoint{}
			}
			if err := m.A.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S == nil {
				m.S = &BECPoint{}
			}
			if err := m.S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCommits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TCommits = append(m.TCommits, &BECPoint{})
			if err := m.TCommits[len(m.TCommits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TauX", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TauX == nil {
				m.TauX = &BInt{}
			}
			if err := m.TauX.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mu == nil {
				m.Mu = &BInt{}
			}
			if err := m.Mu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.T == nil {
				m.T = &BInt{}
			}
			if err := m.T.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IPP == nil {
				m.IPP = &BInnerProductProof{}
			}
			if err := m.IPP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRangeProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRangeProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRangeProof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRangeProof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRangeProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRangeProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRangeProof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRangeProof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRangeProof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRangeProof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRangeProof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRangeProof = fmt.Errorf("proto: unexpected end of group")
)
