// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/enclave_identity.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EnclaveIdentity struct {
	UniqueID  string `protobuf:"bytes,1,opt,name=uniqueID,proto3" json:"uniqueID,omitempty"`
	SignerID  string `protobuf:"bytes,2,opt,name=signerID,proto3" json:"signerID,omitempty"`
	ProductID string `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	Status    string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *EnclaveIdentity) Reset()         { *m = EnclaveIdentity{} }
func (m *EnclaveIdentity) String() string { return proto.CompactTextString(m) }
func (*EnclaveIdentity) ProtoMessage()    {}
func (*EnclaveIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43c504ff50e98df, []int{0}
}
func (m *EnclaveIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnclaveIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnclaveIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnclaveIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnclaveIdentity.Merge(m, src)
}
func (m *EnclaveIdentity) XXX_Size() int {
	return m.Size()
}
func (m *EnclaveIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_EnclaveIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_EnclaveIdentity proto.InternalMessageInfo

func (m *EnclaveIdentity) GetUniqueID() string {
	if m != nil {
		return m.UniqueID
	}
	return ""
}

func (m *EnclaveIdentity) GetSignerID() string {
	if m != nil {
		return m.SignerID
	}
	return ""
}

func (m *EnclaveIdentity) GetProductID() string {
	if m != nil {
		return m.ProductID
	}
	return ""
}

func (m *EnclaveIdentity) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*EnclaveIdentity)(nil), "qadena.qadena.EnclaveIdentity")
}

func init() {
	proto.RegisterFile("qadena/qadena/enclave_identity.proto", fileDescriptor_b43c504ff50e98df)
}

var fileDescriptor_b43c504ff50e98df = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x4c, 0x4c, 0x49,
	0xcd, 0x4b, 0xd4, 0x87, 0x52, 0xa9, 0x79, 0xc9, 0x39, 0x89, 0x65, 0xa9, 0xf1, 0x99, 0x29, 0xa9,
	0x79, 0x25, 0x99, 0x25, 0x95, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xbc, 0x10, 0x69, 0x3d,
	0x08, 0xa5, 0x54, 0xcf, 0xc5, 0xef, 0x0a, 0x51, 0xe8, 0x09, 0x55, 0x27, 0x24, 0xc5, 0xc5, 0x51,
	0x9a, 0x97, 0x59, 0x58, 0x9a, 0xea, 0xe9, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe7,
	0x83, 0xe4, 0x8a, 0x33, 0xd3, 0xf3, 0x52, 0x8b, 0x3c, 0x5d, 0x24, 0x98, 0x20, 0x72, 0x30, 0xbe,
	0x90, 0x0c, 0x17, 0x67, 0x41, 0x51, 0x7e, 0x4a, 0x69, 0x72, 0x89, 0xa7, 0x8b, 0x04, 0x33, 0x58,
	0x12, 0x21, 0x20, 0x24, 0xc6, 0xc5, 0x56, 0x5c, 0x92, 0x58, 0x52, 0x5a, 0x2c, 0xc1, 0x02, 0x96,
	0x82, 0xf2, 0x9c, 0xf4, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x14,
	0xea, 0x91, 0x0a, 0x98, 0x8f, 0x4a, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0xfe, 0x30, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x53, 0x81, 0xf9, 0x0a, 0xef, 0x00, 0x00, 0x00,
}

func (m *EnclaveIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnclaveIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnclaveIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintEnclaveIdentity(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProductID) > 0 {
		i -= len(m.ProductID)
		copy(dAtA[i:], m.ProductID)
		i = encodeVarintEnclaveIdentity(dAtA, i, uint64(len(m.ProductID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SignerID) > 0 {
		i -= len(m.SignerID)
		copy(dAtA[i:], m.SignerID)
		i = encodeVarintEnclaveIdentity(dAtA, i, uint64(len(m.SignerID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueID) > 0 {
		i -= len(m.UniqueID)
		copy(dAtA[i:], m.UniqueID)
		i = encodeVarintEnclaveIdentity(dAtA, i, uint64(len(m.UniqueID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnclaveIdentity(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnclaveIdentity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EnclaveIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueID)
	if l > 0 {
		n += 1 + l + sovEnclaveIdentity(uint64(l))
	}
	l = len(m.SignerID)
	if l > 0 {
		n += 1 + l + sovEnclaveIdentity(uint64(l))
	}
	l = len(m.ProductID)
	if l > 0 {
		n += 1 + l + sovEnclaveIdentity(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovEnclaveIdentity(uint64(l))
	}
	return n
}

func sovEnclaveIdentity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnclaveIdentity(x uint64) (n int) {
	return sovEnclaveIdentity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnclaveIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnclaveIdentity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnclaveIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnclaveIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnclaveIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnclaveIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnclaveIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnclaveIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnclaveIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnclaveIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnclaveIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnclaveIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnclaveIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnclaveIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnclaveIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnclaveIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnclaveIdentity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnclaveIdentity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnclaveIdentity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnclaveIdentity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnclaveIdentity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnclaveIdentity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnclaveIdentity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnclaveIdentity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnclaveIdentity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnclaveIdentity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnclaveIdentity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnclaveIdentity = fmt.Errorf("proto: unexpected end of group")
)
