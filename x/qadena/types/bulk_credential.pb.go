// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/bulk_credential.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BulkCredential struct {
	CredentialID                 string           `protobuf:"bytes,1,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
	CredentialPedersenCommit     *BPedersenCommit `protobuf:"bytes,2,opt,name=credentialPedersenCommit,proto3" json:"credentialPedersenCommit,omitempty"`
	EncCredentialInfoVShare      []byte           `protobuf:"bytes,3,opt,name=encCredentialInfoVShare,proto3" json:"encCredentialInfoVShare,omitempty"`
	EncCredentialHashVShare      []byte           `protobuf:"bytes,4,opt,name=encCredentialHashVShare,proto3" json:"encCredentialHashVShare,omitempty"`
	FindCredentialPedersenCommit *BPedersenCommit `protobuf:"bytes,5,opt,name=findCredentialPedersenCommit,proto3" json:"findCredentialPedersenCommit,omitempty"`
}

func (m *BulkCredential) Reset()         { *m = BulkCredential{} }
func (m *BulkCredential) String() string { return proto.CompactTextString(m) }
func (*BulkCredential) ProtoMessage()    {}
func (*BulkCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_d69b4c81f50a1aae, []int{0}
}
func (m *BulkCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BulkCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BulkCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BulkCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkCredential.Merge(m, src)
}
func (m *BulkCredential) XXX_Size() int {
	return m.Size()
}
func (m *BulkCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkCredential.DiscardUnknown(m)
}

var xxx_messageInfo_BulkCredential proto.InternalMessageInfo

func (m *BulkCredential) GetCredentialID() string {
	if m != nil {
		return m.CredentialID
	}
	return ""
}

func (m *BulkCredential) GetCredentialPedersenCommit() *BPedersenCommit {
	if m != nil {
		return m.CredentialPedersenCommit
	}
	return nil
}

func (m *BulkCredential) GetEncCredentialInfoVShare() []byte {
	if m != nil {
		return m.EncCredentialInfoVShare
	}
	return nil
}

func (m *BulkCredential) GetEncCredentialHashVShare() []byte {
	if m != nil {
		return m.EncCredentialHashVShare
	}
	return nil
}

func (m *BulkCredential) GetFindCredentialPedersenCommit() *BPedersenCommit {
	if m != nil {
		return m.FindCredentialPedersenCommit
	}
	return nil
}

func init() {
	proto.RegisterType((*BulkCredential)(nil), "qadena.qadena.BulkCredential")
}

func init() {
	proto.RegisterFile("qadena/qadena/bulk_credential.proto", fileDescriptor_d69b4c81f50a1aae)
}

var fileDescriptor_d69b4c81f50a1aae = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2e, 0x4c, 0x4c, 0x49,
	0xcd, 0x4b, 0xd4, 0x87, 0x52, 0x49, 0xa5, 0x39, 0xd9, 0xf1, 0xc9, 0x45, 0xa9, 0x29, 0xa9, 0x79,
	0x25, 0x99, 0x89, 0x39, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xbc, 0x10, 0x59, 0x3d, 0x08,
	0x25, 0xa5, 0x8a, 0xa6, 0x27, 0xbe, 0x20, 0x35, 0x25, 0xb5, 0xa8, 0x38, 0x35, 0x2f, 0x3e, 0x39,
	0x3f, 0x37, 0x37, 0xb3, 0x04, 0xa2, 0x4b, 0xe9, 0x05, 0x13, 0x17, 0x9f, 0x53, 0x69, 0x4e, 0xb6,
	0x33, 0xdc, 0x38, 0x21, 0x25, 0x2e, 0x1e, 0x84, 0xe1, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x28, 0x62, 0x42, 0x51, 0x5c, 0x12, 0x08, 0x7e, 0x00, 0xd4, 0x64, 0x67, 0xb0, 0xc1,
	0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x72, 0x7a, 0x28, 0xee, 0xd1, 0x73, 0x42, 0x55, 0x15,
	0x84, 0x53, 0xbf, 0x90, 0x05, 0x97, 0x78, 0x6a, 0x5e, 0x32, 0xc2, 0x41, 0x9e, 0x79, 0x69, 0xf9,
	0x61, 0xc1, 0x19, 0x89, 0x45, 0xa9, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0xb8, 0xa4, 0x31,
	0x74, 0x7a, 0x24, 0x16, 0x67, 0x40, 0x75, 0xb2, 0x60, 0xd1, 0x89, 0x90, 0x16, 0x4a, 0xe2, 0x92,
	0x49, 0xcb, 0xcc, 0x4b, 0x71, 0xc6, 0xe5, 0x27, 0x56, 0xa2, 0xfc, 0x84, 0xd7, 0x0c, 0x27, 0xfd,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39,
	0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x12, 0x85, 0x46, 0x52, 0x05, 0x2c,
	0xb6, 0x4a, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x51, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x86, 0x1d, 0x88, 0x45, 0xff, 0x01, 0x00, 0x00,
}

func (m *BulkCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BulkCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FindCredentialPedersenCommit != nil {
		{
			size, err := m.FindCredentialPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBulkCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EncCredentialHashVShare) > 0 {
		i -= len(m.EncCredentialHashVShare)
		copy(dAtA[i:], m.EncCredentialHashVShare)
		i = encodeVarintBulkCredential(dAtA, i, uint64(len(m.EncCredentialHashVShare)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EncCredentialInfoVShare) > 0 {
		i -= len(m.EncCredentialInfoVShare)
		copy(dAtA[i:], m.EncCredentialInfoVShare)
		i = encodeVarintBulkCredential(dAtA, i, uint64(len(m.EncCredentialInfoVShare)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CredentialPedersenCommit != nil {
		{
			size, err := m.CredentialPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBulkCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CredentialID) > 0 {
		i -= len(m.CredentialID)
		copy(dAtA[i:], m.CredentialID)
		i = encodeVarintBulkCredential(dAtA, i, uint64(len(m.CredentialID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBulkCredential(dAtA []byte, offset int, v uint64) int {
	offset -= sovBulkCredential(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BulkCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialID)
	if l > 0 {
		n += 1 + l + sovBulkCredential(uint64(l))
	}
	if m.CredentialPedersenCommit != nil {
		l = m.CredentialPedersenCommit.Size()
		n += 1 + l + sovBulkCredential(uint64(l))
	}
	l = len(m.EncCredentialInfoVShare)
	if l > 0 {
		n += 1 + l + sovBulkCredential(uint64(l))
	}
	l = len(m.EncCredentialHashVShare)
	if l > 0 {
		n += 1 + l + sovBulkCredential(uint64(l))
	}
	if m.FindCredentialPedersenCommit != nil {
		l = m.FindCredentialPedersenCommit.Size()
		n += 1 + l + sovBulkCredential(uint64(l))
	}
	return n
}

func sovBulkCredential(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBulkCredential(x uint64) (n int) {
	return sovBulkCredential(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BulkCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBulkCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBulkCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBulkCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBulkCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBulkCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBulkCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBulkCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialPedersenCommit == nil {
				m.CredentialPedersenCommit = &BPedersenCommit{}
			}
			if err := m.CredentialPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCredentialInfoVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBulkCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBulkCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBulkCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCredentialInfoVShare = append(m.EncCredentialInfoVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCredentialInfoVShare == nil {
				m.EncCredentialInfoVShare = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCredentialHashVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBulkCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBulkCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBulkCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCredentialHashVShare = append(m.EncCredentialHashVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCredentialHashVShare == nil {
				m.EncCredentialHashVShare = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindCredentialPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBulkCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBulkCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBulkCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FindCredentialPedersenCommit == nil {
				m.FindCredentialPedersenCommit = &BPedersenCommit{}
			}
			if err := m.FindCredentialPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBulkCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBulkCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBulkCredential(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBulkCredential
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBulkCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBulkCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBulkCredential
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBulkCredential
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBulkCredential
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBulkCredential        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBulkCredential          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBulkCredential = fmt.Errorf("proto: unexpected end of group")
)
