// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/public_key.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PublicKey struct {
	PubKID       string   `protobuf:"bytes,1,opt,name=pubKID,proto3" json:"pubKID,omitempty"`
	PubKType     string   `protobuf:"bytes,2,opt,name=pubKType,proto3" json:"pubKType,omitempty"`
	PubK         string   `protobuf:"bytes,3,opt,name=pubK,proto3" json:"pubK,omitempty"`
	Shares       []*Share `protobuf:"bytes,4,rep,name=shares,proto3" json:"shares,omitempty"`
	RemoteReport []byte   `protobuf:"bytes,5,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}
func (*PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b77a07fc78ec812, []int{0}
}
func (m *PublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKey.Merge(m, src)
}
func (m *PublicKey) XXX_Size() int {
	return m.Size()
}
func (m *PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKey proto.InternalMessageInfo

func (m *PublicKey) GetPubKID() string {
	if m != nil {
		return m.PubKID
	}
	return ""
}

func (m *PublicKey) GetPubKType() string {
	if m != nil {
		return m.PubKType
	}
	return ""
}

func (m *PublicKey) GetPubK() string {
	if m != nil {
		return m.PubK
	}
	return ""
}

func (m *PublicKey) GetShares() []*Share {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *PublicKey) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func init() {
	proto.RegisterType((*PublicKey)(nil), "qadena.qadena.PublicKey")
}

func init() { proto.RegisterFile("qadena/qadena/public_key.proto", fileDescriptor_6b77a07fc78ec812) }

var fileDescriptor_6b77a07fc78ec812 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x4c, 0x4c, 0x49,
	0xcd, 0x4b, 0xd4, 0x87, 0x52, 0x05, 0xa5, 0x49, 0x39, 0x99, 0xc9, 0xf1, 0xd9, 0xa9, 0x95, 0x7a,
	0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xbc, 0x10, 0x09, 0x3d, 0x08, 0x25, 0x25, 0x89, 0xaa, 0xbc,
	0x38, 0x23, 0xb1, 0x28, 0x15, 0xa2, 0x52, 0x69, 0x29, 0x23, 0x17, 0x67, 0x00, 0x58, 0xbb, 0x77,
	0x6a, 0xa5, 0x90, 0x18, 0x17, 0x5b, 0x41, 0x69, 0x92, 0xb7, 0xa7, 0x8b, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x94, 0x27, 0x24, 0xc5, 0xc5, 0x01, 0x62, 0x85, 0x54, 0x16, 0xa4, 0x4a, 0x30,
	0x81, 0x65, 0xe0, 0x7c, 0x21, 0x21, 0x2e, 0x16, 0x10, 0x5b, 0x82, 0x19, 0x2c, 0x0e, 0x66, 0x0b,
	0xe9, 0x70, 0xb1, 0x81, 0x2d, 0x29, 0x96, 0x60, 0x51, 0x60, 0xd6, 0xe0, 0x36, 0x12, 0xd1, 0x43,
	0x71, 0x90, 0x5e, 0x30, 0x48, 0x32, 0x08, 0xaa, 0x46, 0x48, 0x89, 0x8b, 0xa7, 0x28, 0x35, 0x37,
	0xbf, 0x24, 0x35, 0x28, 0xb5, 0x20, 0xbf, 0xa8, 0x44, 0x82, 0x55, 0x81, 0x51, 0x83, 0x27, 0x08,
	0x45, 0xcc, 0xc9, 0xf5, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63,
	0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xb4, 0xd3,
	0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x93, 0x8d, 0x0b, 0x4b, 0x52, 0x93,
	0x33, 0xa0, 0x1e, 0x8d, 0x2f, 0x33, 0xd6, 0xaf, 0x80, 0x79, 0xba, 0xa4, 0xb2, 0x20, 0xb5, 0x38,
	0x89, 0x0d, 0xec, 0x6b, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x65, 0x79, 0x19, 0x41,
	0x01, 0x00, 0x00,
}

func (m *PublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintPublicKey(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicKey(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PubK) > 0 {
		i -= len(m.PubK)
		copy(dAtA[i:], m.PubK)
		i = encodeVarintPublicKey(dAtA, i, uint64(len(m.PubK)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKType) > 0 {
		i -= len(m.PubKType)
		copy(dAtA[i:], m.PubKType)
		i = encodeVarintPublicKey(dAtA, i, uint64(len(m.PubKType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKID) > 0 {
		i -= len(m.PubKID)
		copy(dAtA[i:], m.PubKID)
		i = encodeVarintPublicKey(dAtA, i, uint64(len(m.PubKID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicKey(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicKey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKID)
	if l > 0 {
		n += 1 + l + sovPublicKey(uint64(l))
	}
	l = len(m.PubKType)
	if l > 0 {
		n += 1 + l + sovPublicKey(uint64(l))
	}
	l = len(m.PubK)
	if l > 0 {
		n += 1 + l + sovPublicKey(uint64(l))
	}
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovPublicKey(uint64(l))
		}
	}
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovPublicKey(uint64(l))
	}
	return n
}

func sovPublicKey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicKey(x uint64) (n int) {
	return sovPublicKey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, &Share{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPublicKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPublicKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicKey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicKey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicKey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicKey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicKey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicKey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicKey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicKey = fmt.Errorf("proto: unexpected end of group")
)
