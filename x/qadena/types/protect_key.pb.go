// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/protect_key.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProtectKey struct {
	WalletID     string          `protobuf:"bytes,1,opt,name=walletID,proto3" json:"walletID,omitempty"`
	Threshold    int32           `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	RecoverShare []*RecoverShare `protobuf:"bytes,3,rep,name=recoverShare,proto3" json:"recoverShare,omitempty"`
}

func (m *ProtectKey) Reset()         { *m = ProtectKey{} }
func (m *ProtectKey) String() string { return proto.CompactTextString(m) }
func (*ProtectKey) ProtoMessage()    {}
func (*ProtectKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_00caade000d18658, []int{0}
}
func (m *ProtectKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtectKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtectKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtectKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtectKey.Merge(m, src)
}
func (m *ProtectKey) XXX_Size() int {
	return m.Size()
}
func (m *ProtectKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtectKey.DiscardUnknown(m)
}

var xxx_messageInfo_ProtectKey proto.InternalMessageInfo

func (m *ProtectKey) GetWalletID() string {
	if m != nil {
		return m.WalletID
	}
	return ""
}

func (m *ProtectKey) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *ProtectKey) GetRecoverShare() []*RecoverShare {
	if m != nil {
		return m.RecoverShare
	}
	return nil
}

func init() {
	proto.RegisterType((*ProtectKey)(nil), "qadena.qadena.ProtectKey")
}

func init() { proto.RegisterFile("qadena/qadena/protect_key.proto", fileDescriptor_00caade000d18658) }

var fileDescriptor_00caade000d18658 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x4c, 0x4c, 0x49,
	0xcd, 0x4b, 0xd4, 0x87, 0x52, 0x05, 0x45, 0xf9, 0x25, 0xa9, 0xc9, 0x25, 0xf1, 0xd9, 0xa9, 0x95,
	0x7a, 0x20, 0x76, 0xbe, 0x10, 0x2f, 0x44, 0x46, 0x0f, 0x42, 0x49, 0x29, 0xa2, 0xaa, 0x2f, 0x4a,
	0x4d, 0xce, 0x2f, 0x4b, 0x2d, 0x8a, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x85, 0xe8, 0x50, 0x6a, 0x67,
	0xe4, 0xe2, 0x0a, 0x80, 0x98, 0xe3, 0x9d, 0x5a, 0x29, 0x24, 0xc5, 0xc5, 0x51, 0x9e, 0x98, 0x93,
	0x93, 0x5a, 0xe2, 0xe9, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe7, 0x0b, 0xc9, 0x70,
	0x71, 0x96, 0x64, 0x14, 0xa5, 0x16, 0x67, 0xe4, 0xe7, 0xa4, 0x48, 0x30, 0x29, 0x30, 0x6a, 0xb0,
	0x06, 0x21, 0x04, 0x84, 0xec, 0xb9, 0x78, 0xa0, 0xe6, 0x07, 0x83, 0x8c, 0x97, 0x60, 0x56, 0x60,
	0xd6, 0xe0, 0x36, 0x92, 0xd6, 0x43, 0x71, 0x91, 0x5e, 0x10, 0x92, 0x92, 0x20, 0x14, 0x0d, 0x4e,
	0xfa, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7,
	0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x25, 0x0a, 0x75, 0x7f, 0x05,
	0xcc, 0x23, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x1f, 0x18, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xb5, 0xda, 0x02, 0x15, 0x16, 0x01, 0x00, 0x00,
}

func (m *ProtectKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtectKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtectKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecoverShare) > 0 {
		for iNdEx := len(m.RecoverShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecoverShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtectKey(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Threshold != 0 {
		i = encodeVarintProtectKey(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WalletID) > 0 {
		i -= len(m.WalletID)
		copy(dAtA[i:], m.WalletID)
		i = encodeVarintProtectKey(dAtA, i, uint64(len(m.WalletID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtectKey(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtectKey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProtectKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletID)
	if l > 0 {
		n += 1 + l + sovProtectKey(uint64(l))
	}
	if m.Threshold != 0 {
		n += 1 + sovProtectKey(uint64(m.Threshold))
	}
	if len(m.RecoverShare) > 0 {
		for _, e := range m.RecoverShare {
			l = e.Size()
			n += 1 + l + sovProtectKey(uint64(l))
		}
	}
	return n
}

func sovProtectKey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtectKey(x uint64) (n int) {
	return sovProtectKey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtectKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtectKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtectKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtectKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtectKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtectKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoverShare = append(m.RecoverShare, &RecoverShare{})
			if err := m.RecoverShare[len(m.RecoverShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtectKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtectKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtectKey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtectKey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtectKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtectKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtectKey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtectKey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtectKey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtectKey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtectKey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtectKey = fmt.Errorf("proto: unexpected end of group")
)
