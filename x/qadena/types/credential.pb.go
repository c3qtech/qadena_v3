// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/credential.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Credential struct {
	CredentialID                 string           `protobuf:"bytes,1,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
	CredentialType               string           `protobuf:"bytes,2,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
	WalletID                     string           `protobuf:"bytes,3,opt,name=walletID,proto3" json:"walletID,omitempty"`
	CredentialPedersenCommit     *BPedersenCommit `protobuf:"bytes,4,opt,name=credentialPedersenCommit,proto3" json:"credentialPedersenCommit,omitempty"`
	EncCredentialHashVShare      []byte           `protobuf:"bytes,5,opt,name=encCredentialHashVShare,proto3" json:"encCredentialHashVShare,omitempty"`
	CredentialHashVShareBind     *VShareBindData  `protobuf:"bytes,6,opt,name=credentialHashVShareBind,proto3" json:"credentialHashVShareBind,omitempty"`
	EncCredentialInfoVShare      []byte           `protobuf:"bytes,7,opt,name=encCredentialInfoVShare,proto3" json:"encCredentialInfoVShare,omitempty"`
	CredentialInfoVShareBind     *VShareBindData  `protobuf:"bytes,8,opt,name=credentialInfoVShareBind,proto3" json:"credentialInfoVShareBind,omitempty"`
	FindCredentialPedersenCommit *BPedersenCommit `protobuf:"bytes,9,opt,name=findCredentialPedersenCommit,proto3" json:"findCredentialPedersenCommit,omitempty"`
	ProviderWalletID             string           `protobuf:"bytes,10,opt,name=providerWalletID,proto3" json:"providerWalletID,omitempty"`
	ReferenceCredentialID        string           `protobuf:"bytes,11,opt,name=referenceCredentialID,proto3" json:"referenceCredentialID,omitempty"`
}

func (m *Credential) Reset()         { *m = Credential{} }
func (m *Credential) String() string { return proto.CompactTextString(m) }
func (*Credential) ProtoMessage()    {}
func (*Credential) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f95d2b506b702bc, []int{0}
}
func (m *Credential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Credential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Credential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Credential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credential.Merge(m, src)
}
func (m *Credential) XXX_Size() int {
	return m.Size()
}
func (m *Credential) XXX_DiscardUnknown() {
	xxx_messageInfo_Credential.DiscardUnknown(m)
}

var xxx_messageInfo_Credential proto.InternalMessageInfo

func (m *Credential) GetCredentialID() string {
	if m != nil {
		return m.CredentialID
	}
	return ""
}

func (m *Credential) GetCredentialType() string {
	if m != nil {
		return m.CredentialType
	}
	return ""
}

func (m *Credential) GetWalletID() string {
	if m != nil {
		return m.WalletID
	}
	return ""
}

func (m *Credential) GetCredentialPedersenCommit() *BPedersenCommit {
	if m != nil {
		return m.CredentialPedersenCommit
	}
	return nil
}

func (m *Credential) GetEncCredentialHashVShare() []byte {
	if m != nil {
		return m.EncCredentialHashVShare
	}
	return nil
}

func (m *Credential) GetCredentialHashVShareBind() *VShareBindData {
	if m != nil {
		return m.CredentialHashVShareBind
	}
	return nil
}

func (m *Credential) GetEncCredentialInfoVShare() []byte {
	if m != nil {
		return m.EncCredentialInfoVShare
	}
	return nil
}

func (m *Credential) GetCredentialInfoVShareBind() *VShareBindData {
	if m != nil {
		return m.CredentialInfoVShareBind
	}
	return nil
}

func (m *Credential) GetFindCredentialPedersenCommit() *BPedersenCommit {
	if m != nil {
		return m.FindCredentialPedersenCommit
	}
	return nil
}

func (m *Credential) GetProviderWalletID() string {
	if m != nil {
		return m.ProviderWalletID
	}
	return ""
}

func (m *Credential) GetReferenceCredentialID() string {
	if m != nil {
		return m.ReferenceCredentialID
	}
	return ""
}

// clone alert, this is also in nameservice/tx.proto!!!!
type MsgBindCredential struct {
	Creator             string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CredentialType      string           `protobuf:"bytes,2,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
	CredentialInfo      string           `protobuf:"bytes,3,opt,name=credentialInfo,proto3" json:"credentialInfo,omitempty"`
	ProofPedersenCommit *BPedersenCommit `protobuf:"bytes,4,opt,name=proofPedersenCommit,proto3" json:"proofPedersenCommit,omitempty"`
}

func (m *MsgBindCredential) Reset()         { *m = MsgBindCredential{} }
func (m *MsgBindCredential) String() string { return proto.CompactTextString(m) }
func (*MsgBindCredential) ProtoMessage()    {}
func (*MsgBindCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f95d2b506b702bc, []int{1}
}
func (m *MsgBindCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBindCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBindCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBindCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBindCredential.Merge(m, src)
}
func (m *MsgBindCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgBindCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBindCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBindCredential proto.InternalMessageInfo

func (m *MsgBindCredential) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBindCredential) GetCredentialType() string {
	if m != nil {
		return m.CredentialType
	}
	return ""
}

func (m *MsgBindCredential) GetCredentialInfo() string {
	if m != nil {
		return m.CredentialInfo
	}
	return ""
}

func (m *MsgBindCredential) GetProofPedersenCommit() *BPedersenCommit {
	if m != nil {
		return m.ProofPedersenCommit
	}
	return nil
}

type MsgBindCredentialResponse struct {
}

func (m *MsgBindCredentialResponse) Reset()         { *m = MsgBindCredentialResponse{} }
func (m *MsgBindCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBindCredentialResponse) ProtoMessage()    {}
func (*MsgBindCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f95d2b506b702bc, []int{2}
}
func (m *MsgBindCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBindCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBindCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBindCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBindCredentialResponse.Merge(m, src)
}
func (m *MsgBindCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBindCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBindCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBindCredentialResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Credential)(nil), "qadena.qadena.Credential")
	proto.RegisterType((*MsgBindCredential)(nil), "qadena.qadena.MsgBindCredential")
	proto.RegisterType((*MsgBindCredentialResponse)(nil), "qadena.qadena.MsgBindCredentialResponse")
}

func init() { proto.RegisterFile("qadena/qadena/credential.proto", fileDescriptor_8f95d2b506b702bc) }

var fileDescriptor_8f95d2b506b702bc = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0x63, 0xa0, 0xff, 0xa6, 0x05, 0x81, 0x51, 0x85, 0x09, 0x60, 0x45, 0x41, 0xa0, 0x88,
	0x43, 0x2a, 0x01, 0x07, 0xce, 0x49, 0x0e, 0xe4, 0x80, 0x54, 0x2d, 0x08, 0x44, 0x2f, 0x2b, 0xef,
	0x7a, 0x96, 0xae, 0x94, 0xda, 0x8b, 0xd7, 0x2a, 0xf4, 0x2d, 0x78, 0x24, 0x8e, 0xdc, 0xe8, 0x91,
	0x23, 0x4a, 0x5e, 0x04, 0xd5, 0xbb, 0xa9, 0xeb, 0x24, 0x8b, 0x02, 0xa7, 0x95, 0x67, 0xbe, 0x6f,
	0xf5, 0x1b, 0xfb, 0x1b, 0xe0, 0x9f, 0x85, 0x44, 0x25, 0x0e, 0xea, 0x4f, 0x6a, 0x50, 0xa2, 0xb2,
	0xb9, 0x98, 0xf4, 0x0b, 0xa3, 0xad, 0xa6, 0x37, 0xab, 0x46, 0xbf, 0xfa, 0xb4, 0x1f, 0x87, 0xf2,
	0x02, 0x25, 0x9a, 0x12, 0x55, 0x9c, 0xea, 0x93, 0x93, 0xdc, 0x56, 0x9e, 0xf6, 0x93, 0x50, 0x94,
	0xc4, 0x6b, 0xc9, 0x4e, 0xe3, 0xf2, 0x58, 0x18, 0x8c, 0x93, 0x5c, 0xc9, 0x58, 0x0a, 0x2b, 0x2a,
	0x59, 0xf7, 0xfb, 0x06, 0xc0, 0xf0, 0x12, 0x8b, 0x76, 0x61, 0xcf, 0x43, 0x8e, 0x47, 0x8c, 0x74,
	0x48, 0x6f, 0x27, 0x0a, 0x6a, 0xf4, 0x29, 0xdc, 0xf2, 0xe7, 0x77, 0x67, 0x05, 0xb2, 0x6b, 0x4e,
	0xb5, 0x50, 0xa5, 0x6d, 0xd8, 0xfe, 0x22, 0x26, 0x13, 0xb4, 0xe3, 0x11, 0xbb, 0xee, 0x14, 0x97,
	0x67, 0x7a, 0x04, 0xcc, 0xab, 0x0f, 0xeb, 0x01, 0x86, 0x8e, 0x9f, 0xdd, 0xe8, 0x90, 0xde, 0xee,
	0x73, 0xde, 0x0f, 0xee, 0xa6, 0x3f, 0x08, 0x55, 0x51, 0xa3, 0x9f, 0xbe, 0x82, 0x7b, 0xa8, 0x52,
	0x3f, 0xd4, 0x6b, 0x51, 0x1e, 0xbf, 0x7f, 0x7b, 0x31, 0x3d, 0xdb, 0xe8, 0x90, 0xde, 0x5e, 0xd4,
	0xd4, 0xa6, 0x1f, 0xaf, 0x52, 0xf9, 0xfa, 0x20, 0x57, 0x92, 0x6d, 0x3a, 0xaa, 0x47, 0x0b, 0x54,
	0x5e, 0x30, 0x12, 0x56, 0x44, 0x8d, 0xf6, 0x25, 0xa8, 0xb1, 0xca, 0x74, 0x0d, 0xb5, 0xb5, 0x02,
	0xca, 0xb7, 0x43, 0x28, 0x5f, 0x77, 0x50, 0xdb, 0xff, 0x08, 0x15, 0xda, 0x69, 0x02, 0x0f, 0xb3,
	0x5c, 0xc9, 0x61, 0xd3, 0x4b, 0xec, 0xac, 0xf5, 0x12, 0x7f, 0xfd, 0x07, 0x7d, 0x06, 0xb7, 0x0b,
	0xa3, 0x4f, 0x73, 0x89, 0xe6, 0xc3, 0x3c, 0x0d, 0xe0, 0xd2, 0xb0, 0x54, 0xa7, 0x2f, 0x61, 0xdf,
	0x60, 0x86, 0x06, 0x55, 0x8a, 0xc3, 0xab, 0x31, 0xdc, 0x75, 0x86, 0xd5, 0xcd, 0xee, 0x4f, 0x02,
	0x77, 0xde, 0x94, 0x9f, 0x06, 0x01, 0x05, 0x65, 0xb0, 0x95, 0x1a, 0x14, 0x56, 0x9b, 0x3a, 0xc4,
	0xf3, 0xe3, 0xda, 0xf9, 0x0d, 0x74, 0x17, 0x37, 0x57, 0xa7, 0x78, 0xa1, 0x4a, 0x0f, 0xe1, 0x6e,
	0x61, 0xb4, 0xce, 0xfe, 0x2b, 0xc6, 0xab, 0xac, 0xdd, 0x07, 0x70, 0x7f, 0x69, 0xa0, 0x08, 0xcb,
	0x42, 0xab, 0x12, 0x07, 0x07, 0x3f, 0xa6, 0x9c, 0x9c, 0x4f, 0x39, 0xf9, 0x3d, 0xe5, 0xe4, 0xdb,
	0x8c, 0xb7, 0xce, 0x67, 0xbc, 0xf5, 0x6b, 0xc6, 0x5b, 0x47, 0xfb, 0xf5, 0xae, 0x7f, 0x9d, 0x2f,
	0xbd, 0x3d, 0x2b, 0xb0, 0x4c, 0x36, 0xdd, 0xa6, 0xbf, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x01,
	0xb0, 0x16, 0x88, 0x8d, 0x04, 0x00, 0x00,
}

func (m *Credential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReferenceCredentialID) > 0 {
		i -= len(m.ReferenceCredentialID)
		copy(dAtA[i:], m.ReferenceCredentialID)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.ReferenceCredentialID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ProviderWalletID) > 0 {
		i -= len(m.ProviderWalletID)
		copy(dAtA[i:], m.ProviderWalletID)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.ProviderWalletID)))
		i--
		dAtA[i] = 0x52
	}
	if m.FindCredentialPedersenCommit != nil {
		{
			size, err := m.FindCredentialPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CredentialInfoVShareBind != nil {
		{
			size, err := m.CredentialInfoVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.EncCredentialInfoVShare) > 0 {
		i -= len(m.EncCredentialInfoVShare)
		copy(dAtA[i:], m.EncCredentialInfoVShare)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.EncCredentialInfoVShare)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CredentialHashVShareBind != nil {
		{
			size, err := m.CredentialHashVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.EncCredentialHashVShare) > 0 {
		i -= len(m.EncCredentialHashVShare)
		copy(dAtA[i:], m.EncCredentialHashVShare)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.EncCredentialHashVShare)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CredentialPedersenCommit != nil {
		{
			size, err := m.CredentialPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.WalletID) > 0 {
		i -= len(m.WalletID)
		copy(dAtA[i:], m.WalletID)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.WalletID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CredentialType) > 0 {
		i -= len(m.CredentialType)
		copy(dAtA[i:], m.CredentialType)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.CredentialType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CredentialID) > 0 {
		i -= len(m.CredentialID)
		copy(dAtA[i:], m.CredentialID)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.CredentialID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBindCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBindCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBindCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofPedersenCommit != nil {
		{
			size, err := m.ProofPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CredentialInfo) > 0 {
		i -= len(m.CredentialInfo)
		copy(dAtA[i:], m.CredentialInfo)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.CredentialInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CredentialType) > 0 {
		i -= len(m.CredentialType)
		copy(dAtA[i:], m.CredentialType)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.CredentialType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBindCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBindCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBindCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintCredential(dAtA []byte, offset int, v uint64) int {
	offset -= sovCredential(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Credential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialID)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.CredentialType)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.WalletID)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.CredentialPedersenCommit != nil {
		l = m.CredentialPedersenCommit.Size()
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.EncCredentialHashVShare)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.CredentialHashVShareBind != nil {
		l = m.CredentialHashVShareBind.Size()
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.EncCredentialInfoVShare)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.CredentialInfoVShareBind != nil {
		l = m.CredentialInfoVShareBind.Size()
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.FindCredentialPedersenCommit != nil {
		l = m.FindCredentialPedersenCommit.Size()
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.ProviderWalletID)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.ReferenceCredentialID)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}

func (m *MsgBindCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.CredentialType)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.CredentialInfo)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.ProofPedersenCommit != nil {
		l = m.ProofPedersenCommit.Size()
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}

func (m *MsgBindCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovCredential(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCredential(x uint64) (n int) {
	return sovCredential(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Credential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialPedersenCommit == nil {
				m.CredentialPedersenCommit = &BPedersenCommit{}
			}
			if err := m.CredentialPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCredentialHashVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCredentialHashVShare = append(m.EncCredentialHashVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCredentialHashVShare == nil {
				m.EncCredentialHashVShare = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialHashVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialHashVShareBind == nil {
				m.CredentialHashVShareBind = &VShareBindData{}
			}
			if err := m.CredentialHashVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCredentialInfoVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCredentialInfoVShare = append(m.EncCredentialInfoVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCredentialInfoVShare == nil {
				m.EncCredentialInfoVShare = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialInfoVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialInfoVShareBind == nil {
				m.CredentialInfoVShareBind = &VShareBindData{}
			}
			if err := m.CredentialInfoVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindCredentialPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FindCredentialPedersenCommit == nil {
				m.FindCredentialPedersenCommit = &BPedersenCommit{}
			}
			if err := m.FindCredentialPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderWalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderWalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceCredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceCredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBindCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBindCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBindCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofPedersenCommit == nil {
				m.ProofPedersenCommit = &BPedersenCommit{}
			}
			if err := m.ProofPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBindCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBindCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBindCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCredential(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCredential
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCredential
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCredential
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCredential        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCredential          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCredential = fmt.Errorf("proto: unexpected end of group")
)
