// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/b_pedersen_commit.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// a,x don't need to be transmitted
type BPedersenCommit struct {
	C *BECPoint `protobuf:"bytes,1,opt,name=c,proto3" json:"c,omitempty"`
}

func (m *BPedersenCommit) Reset()         { *m = BPedersenCommit{} }
func (m *BPedersenCommit) String() string { return proto.CompactTextString(m) }
func (*BPedersenCommit) ProtoMessage()    {}
func (*BPedersenCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_1304fa03c96d56b6, []int{0}
}
func (m *BPedersenCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BPedersenCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BPedersenCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BPedersenCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BPedersenCommit.Merge(m, src)
}
func (m *BPedersenCommit) XXX_Size() int {
	return m.Size()
}
func (m *BPedersenCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_BPedersenCommit.DiscardUnknown(m)
}

var xxx_messageInfo_BPedersenCommit proto.InternalMessageInfo

func (m *BPedersenCommit) GetC() *BECPoint {
	if m != nil {
		return m.C
	}
	return nil
}

func init() {
	proto.RegisterType((*BPedersenCommit)(nil), "qadena.qadena.BPedersenCommit")
}

func init() {
	proto.RegisterFile("qadena/qadena/b_pedersen_commit.proto", fileDescriptor_1304fa03c96d56b6)
}

var fileDescriptor_1304fa03c96d56b6 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x4c, 0x4c, 0x49,
	0xcd, 0x4b, 0xd4, 0x87, 0x52, 0x49, 0xf1, 0x05, 0xa9, 0x29, 0xa9, 0x45, 0xc5, 0xa9, 0x79, 0xf1,
	0xc9, 0xf9, 0xb9, 0xb9, 0x99, 0x25, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xbc, 0x10, 0x79,
	0x3d, 0x08, 0x25, 0x25, 0x83, 0xaa, 0x2b, 0x35, 0x39, 0xbe, 0x20, 0x3f, 0x33, 0x0f, 0xaa, 0x58,
	0xc9, 0x82, 0x8b, 0xdf, 0x29, 0x00, 0x6a, 0x8c, 0x33, 0xd8, 0x14, 0x21, 0x55, 0x2e, 0xc6, 0x64,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x71, 0x3d, 0x14, 0xb3, 0xf4, 0x9c, 0x5c, 0x9d, 0x03,
	0x40, 0x9a, 0x83, 0x18, 0x93, 0x9d, 0xf4, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1,
	0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e,
	0x21, 0x4a, 0x14, 0x6a, 0x55, 0x05, 0xcc, 0xce, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0,
	0x8d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x05, 0x5c, 0x7d, 0xc7, 0x00, 0x00, 0x00,
}

func (m *BPedersenCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BPedersenCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BPedersenCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C != nil {
		{
			size, err := m.C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBPedersenCommit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBPedersenCommit(dAtA []byte, offset int, v uint64) int {
	offset -= sovBPedersenCommit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BPedersenCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C != nil {
		l = m.C.Size()
		n += 1 + l + sovBPedersenCommit(uint64(l))
	}
	return n
}

func sovBPedersenCommit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBPedersenCommit(x uint64) (n int) {
	return sovBPedersenCommit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BPedersenCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBPedersenCommit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BPedersenCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BPedersenCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBPedersenCommit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBPedersenCommit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBPedersenCommit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C == nil {
				m.C = &BECPoint{}
			}
			if err := m.C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBPedersenCommit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBPedersenCommit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBPedersenCommit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBPedersenCommit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBPedersenCommit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBPedersenCommit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBPedersenCommit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBPedersenCommit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBPedersenCommit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBPedersenCommit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBPedersenCommit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBPedersenCommit = fmt.Errorf("proto: unexpected end of group")
)
