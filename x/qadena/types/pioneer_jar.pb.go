// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/pioneer_jar.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PioneerJar struct {
	PioneerID    string `protobuf:"bytes,1,opt,name=pioneerID,proto3" json:"pioneerID,omitempty"`
	JarID        string `protobuf:"bytes,2,opt,name=jarID,proto3" json:"jarID,omitempty"`
	RemoteReport []byte `protobuf:"bytes,3,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
}

func (m *PioneerJar) Reset()         { *m = PioneerJar{} }
func (m *PioneerJar) String() string { return proto.CompactTextString(m) }
func (*PioneerJar) ProtoMessage()    {}
func (*PioneerJar) Descriptor() ([]byte, []int) {
	return fileDescriptor_79f8d7be06644e8b, []int{0}
}
func (m *PioneerJar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PioneerJar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PioneerJar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PioneerJar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PioneerJar.Merge(m, src)
}
func (m *PioneerJar) XXX_Size() int {
	return m.Size()
}
func (m *PioneerJar) XXX_DiscardUnknown() {
	xxx_messageInfo_PioneerJar.DiscardUnknown(m)
}

var xxx_messageInfo_PioneerJar proto.InternalMessageInfo

func (m *PioneerJar) GetPioneerID() string {
	if m != nil {
		return m.PioneerID
	}
	return ""
}

func (m *PioneerJar) GetJarID() string {
	if m != nil {
		return m.JarID
	}
	return ""
}

func (m *PioneerJar) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func init() {
	proto.RegisterType((*PioneerJar)(nil), "qadena.qadena.PioneerJar")
}

func init() { proto.RegisterFile("qadena/qadena/pioneer_jar.proto", fileDescriptor_79f8d7be06644e8b) }

var fileDescriptor_79f8d7be06644e8b = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x4c, 0x4c, 0x49,
	0xcd, 0x4b, 0xd4, 0x87, 0x52, 0x05, 0x99, 0xf9, 0x79, 0xa9, 0xa9, 0x45, 0xf1, 0x59, 0x89, 0x45,
	0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xbc, 0x10, 0x19, 0x3d, 0x08, 0xa5, 0x94, 0xc2, 0xc5,
	0x15, 0x00, 0x51, 0xe3, 0x95, 0x58, 0x24, 0x24, 0xc3, 0xc5, 0x09, 0xd5, 0xe1, 0xe9, 0x22, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x84, 0x10, 0x10, 0x12, 0xe1, 0x62, 0xcd, 0x4a, 0x04, 0xc9, 0x30,
	0x81, 0x65, 0x20, 0x1c, 0x21, 0x25, 0x2e, 0x9e, 0xa2, 0xd4, 0xdc, 0xfc, 0x92, 0xd4, 0xa0, 0xd4,
	0x82, 0xfc, 0xa2, 0x12, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x14, 0x31, 0x27, 0xfd, 0x13,
	0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x12, 0x85, 0x3a, 0xb4, 0x02, 0xe6, 0xe2,
	0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x63, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xd7, 0x0c, 0x54, 0x16, 0xcf, 0x00, 0x00, 0x00,
}

func (m *PioneerJar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PioneerJar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PioneerJar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintPioneerJar(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JarID) > 0 {
		i -= len(m.JarID)
		copy(dAtA[i:], m.JarID)
		i = encodeVarintPioneerJar(dAtA, i, uint64(len(m.JarID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PioneerID) > 0 {
		i -= len(m.PioneerID)
		copy(dAtA[i:], m.PioneerID)
		i = encodeVarintPioneerJar(dAtA, i, uint64(len(m.PioneerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPioneerJar(dAtA []byte, offset int, v uint64) int {
	offset -= sovPioneerJar(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PioneerJar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PioneerID)
	if l > 0 {
		n += 1 + l + sovPioneerJar(uint64(l))
	}
	l = len(m.JarID)
	if l > 0 {
		n += 1 + l + sovPioneerJar(uint64(l))
	}
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovPioneerJar(uint64(l))
	}
	return n
}

func sovPioneerJar(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPioneerJar(x uint64) (n int) {
	return sovPioneerJar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PioneerJar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPioneerJar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PioneerJar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PioneerJar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PioneerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPioneerJar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPioneerJar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPioneerJar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PioneerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JarID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPioneerJar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPioneerJar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPioneerJar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JarID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPioneerJar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPioneerJar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPioneerJar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPioneerJar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPioneerJar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPioneerJar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPioneerJar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPioneerJar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPioneerJar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPioneerJar
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPioneerJar
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPioneerJar
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPioneerJar        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPioneerJar          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPioneerJar = fmt.Errorf("proto: unexpected end of group")
)
