// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/v_share_bind_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VShareBindData struct {
	Data []*VShareBindDataInternal `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *VShareBindData) Reset()         { *m = VShareBindData{} }
func (m *VShareBindData) String() string { return proto.CompactTextString(m) }
func (*VShareBindData) ProtoMessage()    {}
func (*VShareBindData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d319efff7267aac4, []int{0}
}
func (m *VShareBindData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VShareBindData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VShareBindData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VShareBindData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VShareBindData.Merge(m, src)
}
func (m *VShareBindData) XXX_Size() int {
	return m.Size()
}
func (m *VShareBindData) XXX_DiscardUnknown() {
	xxx_messageInfo_VShareBindData.DiscardUnknown(m)
}

var xxx_messageInfo_VShareBindData proto.InternalMessageInfo

func (m *VShareBindData) GetData() []*VShareBindDataInternal {
	if m != nil {
		return m.Data
	}
	return nil
}

type BECPointInfo struct {
	ECPoint  *BECPoint `protobuf:"bytes,1,opt,name=ECPoint,proto3" json:"ECPoint,omitempty"`
	NodeType string    `protobuf:"bytes,2,opt,name=NodeType,proto3" json:"NodeType,omitempty"`
	NodeID   string    `protobuf:"bytes,3,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
}

func (m *BECPointInfo) Reset()         { *m = BECPointInfo{} }
func (m *BECPointInfo) String() string { return proto.CompactTextString(m) }
func (*BECPointInfo) ProtoMessage()    {}
func (*BECPointInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d319efff7267aac4, []int{1}
}
func (m *BECPointInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BECPointInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BECPointInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BECPointInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BECPointInfo.Merge(m, src)
}
func (m *BECPointInfo) XXX_Size() int {
	return m.Size()
}
func (m *BECPointInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BECPointInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BECPointInfo proto.InternalMessageInfo

func (m *BECPointInfo) GetECPoint() *BECPoint {
	if m != nil {
		return m.ECPoint
	}
	return nil
}

func (m *BECPointInfo) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *BECPointInfo) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type VShareBindDataInternal struct {
	W  *BInt             `protobuf:"bytes,1,opt,name=W,proto3" json:"W,omitempty"`
	Z  *BInt             `protobuf:"bytes,2,opt,name=Z,proto3" json:"Z,omitempty"`
	C  *BECPoint         `protobuf:"bytes,3,opt,name=C,proto3" json:"C,omitempty"`
	Y  *BECPointInfo     `protobuf:"bytes,4,opt,name=Y,proto3" json:"Y,omitempty"`
	Cc []*BECPointInfo   `protobuf:"bytes,5,rep,name=Cc,proto3" json:"Cc,omitempty"`
	R  *BVSharedSecret   `protobuf:"bytes,6,opt,name=R,proto3" json:"R,omitempty"`
	Rr []*BVSharedSecret `protobuf:"bytes,7,rep,name=Rr,proto3" json:"Rr,omitempty"`
}

func (m *VShareBindDataInternal) Reset()         { *m = VShareBindDataInternal{} }
func (m *VShareBindDataInternal) String() string { return proto.CompactTextString(m) }
func (*VShareBindDataInternal) ProtoMessage()    {}
func (*VShareBindDataInternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d319efff7267aac4, []int{2}
}
func (m *VShareBindDataInternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VShareBindDataInternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VShareBindDataInternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VShareBindDataInternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VShareBindDataInternal.Merge(m, src)
}
func (m *VShareBindDataInternal) XXX_Size() int {
	return m.Size()
}
func (m *VShareBindDataInternal) XXX_DiscardUnknown() {
	xxx_messageInfo_VShareBindDataInternal.DiscardUnknown(m)
}

var xxx_messageInfo_VShareBindDataInternal proto.InternalMessageInfo

func (m *VShareBindDataInternal) GetW() *BInt {
	if m != nil {
		return m.W
	}
	return nil
}

func (m *VShareBindDataInternal) GetZ() *BInt {
	if m != nil {
		return m.Z
	}
	return nil
}

func (m *VShareBindDataInternal) GetC() *BECPoint {
	if m != nil {
		return m.C
	}
	return nil
}

func (m *VShareBindDataInternal) GetY() *BECPointInfo {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *VShareBindDataInternal) GetCc() []*BECPointInfo {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *VShareBindDataInternal) GetR() *BVSharedSecret {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *VShareBindDataInternal) GetRr() []*BVSharedSecret {
	if m != nil {
		return m.Rr
	}
	return nil
}

func init() {
	proto.RegisterType((*VShareBindData)(nil), "qadena.qadena.VShareBindData")
	proto.RegisterType((*BECPointInfo)(nil), "qadena.qadena.BECPointInfo")
	proto.RegisterType((*VShareBindDataInternal)(nil), "qadena.qadena.VShareBindDataInternal")
}

func init() {
	proto.RegisterFile("qadena/qadena/v_share_bind_data.proto", fileDescriptor_d319efff7267aac4)
}

var fileDescriptor_d319efff7267aac4 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x6b, 0xe2, 0x40,
	0x14, 0xc7, 0x9d, 0xe8, 0xea, 0xee, 0xb8, 0xbb, 0x87, 0x59, 0x70, 0x87, 0xec, 0x36, 0x58, 0x41,
	0xb0, 0x48, 0x23, 0xd5, 0x53, 0xaf, 0x46, 0x0f, 0xa1, 0x50, 0xca, 0x58, 0x2a, 0x7a, 0x09, 0x93,
	0x64, 0xaa, 0x81, 0x76, 0x12, 0xe3, 0x28, 0xf5, 0x5b, 0xf4, 0xeb, 0xf4, 0x1b, 0xf4, 0xe8, 0xb1,
	0xc7, 0xa2, 0x5f, 0xa4, 0x64, 0x12, 0x5b, 0x12, 0xaa, 0x3d, 0xbd, 0xbc, 0xfc, 0x7f, 0xf3, 0xfe,
	0x6f, 0xde, 0x3c, 0x58, 0x9f, 0x51, 0x97, 0x71, 0xda, 0x4a, 0xc2, 0xd2, 0x9a, 0x4f, 0x69, 0xc8,
	0x2c, 0xdb, 0xe3, 0xae, 0xe5, 0x52, 0x41, 0xf5, 0x20, 0xf4, 0x85, 0x8f, 0x7e, 0xc5, 0xba, 0x1e,
	0x07, 0xf5, 0x7f, 0xfa, 0x14, 0x73, 0xac, 0xc0, 0xf7, 0xb8, 0x88, 0x61, 0x55, 0x4d, 0xab, 0xb6,
	0x37, 0xf9, 0xd0, 0x32, 0x7e, 0xb6, 0x95, 0x38, 0xba, 0xd6, 0x9c, 0x39, 0x21, 0x4b, 0xb0, 0xda,
	0x05, 0xfc, 0x7d, 0x33, 0x88, 0xfe, 0x77, 0x3d, 0xee, 0xf6, 0xa8, 0xa0, 0xe8, 0x1c, 0x16, 0xa2,
	0x88, 0x41, 0x35, 0xdf, 0x28, 0xb7, 0xeb, 0x7a, 0xaa, 0x21, 0x3d, 0x0d, 0x9b, 0x5c, 0xb0, 0x90,
	0xd3, 0x3b, 0x22, 0x8f, 0xd4, 0x16, 0xf0, 0x67, 0xb7, 0x6f, 0x5c, 0x45, 0x1d, 0x9a, 0xfc, 0xd6,
	0x47, 0x67, 0xb0, 0x94, 0xa4, 0x18, 0x54, 0x41, 0xa3, 0xdc, 0xfe, 0x9b, 0xa9, 0xb6, 0xa3, 0xc9,
	0x8e, 0x43, 0x2a, 0xfc, 0x7e, 0xe9, 0xbb, 0xec, 0x7a, 0x15, 0x30, 0xac, 0x54, 0x41, 0xe3, 0x07,
	0x79, 0xcf, 0x51, 0x05, 0x16, 0xa3, 0x6f, 0xb3, 0x87, 0xf3, 0x52, 0x49, 0xb2, 0xda, 0x93, 0x02,
	0x2b, 0x9f, 0xf7, 0x85, 0x8e, 0x21, 0x18, 0x26, 0xde, 0x7f, 0xb2, 0xde, 0x26, 0x17, 0x04, 0x0c,
	0x23, 0x64, 0x2c, 0xad, 0xf6, 0x21, 0x63, 0x54, 0x87, 0xc0, 0x90, 0x9e, 0x07, 0x6e, 0x00, 0x0c,
	0x74, 0x02, 0xc1, 0x08, 0x17, 0x24, 0xf6, 0x6f, 0x0f, 0x16, 0x8d, 0x85, 0x80, 0x11, 0x6a, 0x42,
	0xc5, 0x70, 0xf0, 0x37, 0x39, 0xe2, 0x83, 0xac, 0x62, 0x38, 0xa8, 0x09, 0x01, 0xc1, 0x45, 0x59,
	0xf7, 0x28, 0xcb, 0xc6, 0xf7, 0x76, 0x07, 0xf2, 0x4d, 0x09, 0x20, 0xe8, 0x14, 0x2a, 0x24, 0xc4,
	0x25, 0x59, 0xf9, 0x0b, 0x5a, 0x21, 0x61, 0xb7, 0xff, 0xbc, 0xd1, 0xc0, 0x7a, 0xa3, 0x81, 0xd7,
	0x8d, 0x06, 0x1e, 0xb7, 0x5a, 0x6e, 0xbd, 0xd5, 0x72, 0x2f, 0x5b, 0x2d, 0x37, 0x6e, 0x4e, 0x3c,
	0x31, 0x5d, 0xd8, 0xba, 0xe3, 0xdf, 0xb7, 0x9c, 0xce, 0x4c, 0x30, 0x67, 0x9a, 0x2c, 0x93, 0xb5,
	0xec, 0xb4, 0x1e, 0x76, 0x8b, 0x25, 0x56, 0x01, 0x9b, 0xdb, 0x45, 0xb9, 0x4d, 0x9d, 0xb7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xfc, 0x3f, 0xb8, 0x85, 0xe6, 0x02, 0x00, 0x00,
}

func (m *VShareBindData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VShareBindData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VShareBindData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVShareBindData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BECPointInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BECPointInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BECPointInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintVShareBindData(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintVShareBindData(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0x12
	}
	if m.ECPoint != nil {
		{
			size, err := m.ECPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVShareBindData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VShareBindDataInternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VShareBindDataInternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VShareBindDataInternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rr) > 0 {
		for iNdEx := len(m.Rr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVShareBindData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.R != nil {
		{
			size, err := m.R.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVShareBindData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Cc) > 0 {
		for iNdEx := len(m.Cc) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cc[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVShareBindData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Y != nil {
		{
			size, err := m.Y.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVShareBindData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.C != nil {
		{
			size, err := m.C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVShareBindData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Z != nil {
		{
			size, err := m.Z.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVShareBindData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.W != nil {
		{
			size, err := m.W.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVShareBindData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVShareBindData(dAtA []byte, offset int, v uint64) int {
	offset -= sovVShareBindData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VShareBindData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovVShareBindData(uint64(l))
		}
	}
	return n
}

func (m *BECPointInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ECPoint != nil {
		l = m.ECPoint.Size()
		n += 1 + l + sovVShareBindData(uint64(l))
	}
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovVShareBindData(uint64(l))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovVShareBindData(uint64(l))
	}
	return n
}

func (m *VShareBindDataInternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.W != nil {
		l = m.W.Size()
		n += 1 + l + sovVShareBindData(uint64(l))
	}
	if m.Z != nil {
		l = m.Z.Size()
		n += 1 + l + sovVShareBindData(uint64(l))
	}
	if m.C != nil {
		l = m.C.Size()
		n += 1 + l + sovVShareBindData(uint64(l))
	}
	if m.Y != nil {
		l = m.Y.Size()
		n += 1 + l + sovVShareBindData(uint64(l))
	}
	if len(m.Cc) > 0 {
		for _, e := range m.Cc {
			l = e.Size()
			n += 1 + l + sovVShareBindData(uint64(l))
		}
	}
	if m.R != nil {
		l = m.R.Size()
		n += 1 + l + sovVShareBindData(uint64(l))
	}
	if len(m.Rr) > 0 {
		for _, e := range m.Rr {
			l = e.Size()
			n += 1 + l + sovVShareBindData(uint64(l))
		}
	}
	return n
}

func sovVShareBindData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVShareBindData(x uint64) (n int) {
	return sovVShareBindData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VShareBindData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVShareBindData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VShareBindData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VShareBindData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &VShareBindDataInternal{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVShareBindData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BECPointInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVShareBindData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BECPointInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BECPointInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ECPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ECPoint == nil {
				m.ECPoint = &BECPoint{}
			}
			if err := m.ECPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVShareBindData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VShareBindDataInternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVShareBindData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VShareBindDataInternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VShareBindDataInternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.W == nil {
				m.W = &BInt{}
			}
			if err := m.W.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Z == nil {
				m.Z = &BInt{}
			}
			if err := m.Z.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C == nil {
				m.C = &BECPoint{}
			}
			if err := m.C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Y == nil {
				m.Y = &BECPointInfo{}
			}
			if err := m.Y.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cc = append(m.Cc, &BECPointInfo{})
			if err := m.Cc[len(m.Cc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.R == nil {
				m.R = &BVSharedSecret{}
			}
			if err := m.R.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVShareBindData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rr = append(m.Rr, &BVSharedSecret{})
			if err := m.Rr[len(m.Rr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVShareBindData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVShareBindData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVShareBindData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVShareBindData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVShareBindData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVShareBindData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVShareBindData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVShareBindData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVShareBindData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVShareBindData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVShareBindData = fmt.Errorf("proto: unexpected end of group")
)
