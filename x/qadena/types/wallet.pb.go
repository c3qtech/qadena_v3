// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/wallet.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WalletAmount struct {
	WalletAmountPedersenCommit *BPedersenCommit   `protobuf:"bytes,1,opt,name=walletAmountPedersenCommit,proto3" json:"walletAmountPedersenCommit,omitempty"`
	EncWalletAmountVShare      []byte             `protobuf:"bytes,2,opt,name=encWalletAmountVShare,proto3" json:"encWalletAmountVShare,omitempty"`
	WalletAmountVShareBind     *VShareBindData    `protobuf:"bytes,3,opt,name=walletAmountVShareBind,proto3" json:"walletAmountVShareBind,omitempty"`
	RequiredSenderCheckPC      []*BPedersenCommit `protobuf:"bytes,4,rep,name=RequiredSenderCheckPC,proto3" json:"RequiredSenderCheckPC,omitempty"`
}

func (m *WalletAmount) Reset()         { *m = WalletAmount{} }
func (m *WalletAmount) String() string { return proto.CompactTextString(m) }
func (*WalletAmount) ProtoMessage()    {}
func (*WalletAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a965999ed27022, []int{0}
}
func (m *WalletAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletAmount.Merge(m, src)
}
func (m *WalletAmount) XXX_Size() int {
	return m.Size()
}
func (m *WalletAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletAmount.DiscardUnknown(m)
}

var xxx_messageInfo_WalletAmount proto.InternalMessageInfo

func (m *WalletAmount) GetWalletAmountPedersenCommit() *BPedersenCommit {
	if m != nil {
		return m.WalletAmountPedersenCommit
	}
	return nil
}

func (m *WalletAmount) GetEncWalletAmountVShare() []byte {
	if m != nil {
		return m.EncWalletAmountVShare
	}
	return nil
}

func (m *WalletAmount) GetWalletAmountVShareBind() *VShareBindData {
	if m != nil {
		return m.WalletAmountVShareBind
	}
	return nil
}

func (m *WalletAmount) GetRequiredSenderCheckPC() []*BPedersenCommit {
	if m != nil {
		return m.RequiredSenderCheckPC
	}
	return nil
}

type ListWalletAmount struct {
	WalletAmounts []*WalletAmount `protobuf:"bytes,1,rep,name=walletAmounts,proto3" json:"walletAmounts,omitempty"`
}

func (m *ListWalletAmount) Reset()         { *m = ListWalletAmount{} }
func (m *ListWalletAmount) String() string { return proto.CompactTextString(m) }
func (*ListWalletAmount) ProtoMessage()    {}
func (*ListWalletAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a965999ed27022, []int{1}
}
func (m *ListWalletAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletAmount.Merge(m, src)
}
func (m *ListWalletAmount) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletAmount.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletAmount proto.InternalMessageInfo

func (m *ListWalletAmount) GetWalletAmounts() []*WalletAmount {
	if m != nil {
		return m.WalletAmounts
	}
	return nil
}

// WARNING:  ANY CHANGES TO WALLET MUST BE DONE TO STABLEWALLET, and c.SetStableWallet must be updated
// THE ONLY DIFFERENCE IS THAT MAPS ARE CHANGED TO REPEATED
// IF YOU ADD ANYTHING HERE, YOU MUST MAKE SURE TO MODIFY common.SetStableWallet
type Wallet struct {
	WalletID                             string                       `protobuf:"bytes,1,opt,name=walletID,proto3" json:"walletID,omitempty"`
	HomePioneerID                        string                       `protobuf:"bytes,2,opt,name=homePioneerID,proto3" json:"homePioneerID,omitempty"`
	ServiceProviderID                    []string                     `protobuf:"bytes,3,rep,name=serviceProviderID,proto3" json:"serviceProviderID,omitempty"`
	WalletAmount                         map[string]*WalletAmount     `protobuf:"bytes,4,rep,name=walletAmount,proto3" json:"walletAmount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CredentialID                         string                       `protobuf:"bytes,5,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
	EncCreateWalletVShare                []byte                       `protobuf:"bytes,6,opt,name=encCreateWalletVShare,proto3" json:"encCreateWalletVShare,omitempty"`
	CreateWalletVShareBind               *VShareBindData              `protobuf:"bytes,7,opt,name=createWalletVShareBind,proto3" json:"createWalletVShareBind,omitempty"`
	EphemeralWalletAmountCount           map[string]int32             `protobuf:"bytes,8,rep,name=ephemeralWalletAmountCount,proto3" json:"ephemeralWalletAmountCount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	QueuedWalletAmount                   map[string]*ListWalletAmount `protobuf:"bytes,9,rep,name=queuedWalletAmount,proto3" json:"queuedWalletAmount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AcceptPasswordPedersenCommit         *BPedersenCommit             `protobuf:"bytes,10,opt,name=acceptPasswordPedersenCommit,proto3" json:"acceptPasswordPedersenCommit,omitempty"`
	EncAcceptValidatedCredentialsVShare  []byte                       `protobuf:"bytes,11,opt,name=encAcceptValidatedCredentialsVShare,proto3" json:"encAcceptValidatedCredentialsVShare,omitempty"`
	AcceptValidatedCredentialsVShareBind *VShareBindData              `protobuf:"bytes,12,opt,name=acceptValidatedCredentialsVShareBind,proto3" json:"acceptValidatedCredentialsVShareBind,omitempty"`
	SenderOptions                        string                       `protobuf:"bytes,13,opt,name=senderOptions,proto3" json:"senderOptions,omitempty"`
	RecoverShares                        []*RecoverShare              `protobuf:"bytes,14,rep,name=recoverShares,proto3" json:"recoverShares,omitempty"`
}

func (m *Wallet) Reset()         { *m = Wallet{} }
func (m *Wallet) String() string { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()    {}
func (*Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a965999ed27022, []int{2}
}
func (m *Wallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wallet.Merge(m, src)
}
func (m *Wallet) XXX_Size() int {
	return m.Size()
}
func (m *Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Wallet proto.InternalMessageInfo

func (m *Wallet) GetWalletID() string {
	if m != nil {
		return m.WalletID
	}
	return ""
}

func (m *Wallet) GetHomePioneerID() string {
	if m != nil {
		return m.HomePioneerID
	}
	return ""
}

func (m *Wallet) GetServiceProviderID() []string {
	if m != nil {
		return m.ServiceProviderID
	}
	return nil
}

func (m *Wallet) GetWalletAmount() map[string]*WalletAmount {
	if m != nil {
		return m.WalletAmount
	}
	return nil
}

func (m *Wallet) GetCredentialID() string {
	if m != nil {
		return m.CredentialID
	}
	return ""
}

func (m *Wallet) GetEncCreateWalletVShare() []byte {
	if m != nil {
		return m.EncCreateWalletVShare
	}
	return nil
}

func (m *Wallet) GetCreateWalletVShareBind() *VShareBindData {
	if m != nil {
		return m.CreateWalletVShareBind
	}
	return nil
}

func (m *Wallet) GetEphemeralWalletAmountCount() map[string]int32 {
	if m != nil {
		return m.EphemeralWalletAmountCount
	}
	return nil
}

func (m *Wallet) GetQueuedWalletAmount() map[string]*ListWalletAmount {
	if m != nil {
		return m.QueuedWalletAmount
	}
	return nil
}

func (m *Wallet) GetAcceptPasswordPedersenCommit() *BPedersenCommit {
	if m != nil {
		return m.AcceptPasswordPedersenCommit
	}
	return nil
}

func (m *Wallet) GetEncAcceptValidatedCredentialsVShare() []byte {
	if m != nil {
		return m.EncAcceptValidatedCredentialsVShare
	}
	return nil
}

func (m *Wallet) GetAcceptValidatedCredentialsVShareBind() *VShareBindData {
	if m != nil {
		return m.AcceptValidatedCredentialsVShareBind
	}
	return nil
}

func (m *Wallet) GetSenderOptions() string {
	if m != nil {
		return m.SenderOptions
	}
	return ""
}

func (m *Wallet) GetRecoverShares() []*RecoverShare {
	if m != nil {
		return m.RecoverShares
	}
	return nil
}

type StringWalletAmount struct {
	Name string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Val  *WalletAmount `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *StringWalletAmount) Reset()         { *m = StringWalletAmount{} }
func (m *StringWalletAmount) String() string { return proto.CompactTextString(m) }
func (*StringWalletAmount) ProtoMessage()    {}
func (*StringWalletAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a965999ed27022, []int{3}
}
func (m *StringWalletAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringWalletAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringWalletAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringWalletAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringWalletAmount.Merge(m, src)
}
func (m *StringWalletAmount) XXX_Size() int {
	return m.Size()
}
func (m *StringWalletAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_StringWalletAmount.DiscardUnknown(m)
}

var xxx_messageInfo_StringWalletAmount proto.InternalMessageInfo

func (m *StringWalletAmount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StringWalletAmount) GetVal() *WalletAmount {
	if m != nil {
		return m.Val
	}
	return nil
}

type StringInt32 struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Val  int32  `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *StringInt32) Reset()         { *m = StringInt32{} }
func (m *StringInt32) String() string { return proto.CompactTextString(m) }
func (*StringInt32) ProtoMessage()    {}
func (*StringInt32) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a965999ed27022, []int{4}
}
func (m *StringInt32) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringInt32) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringInt32.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringInt32) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringInt32.Merge(m, src)
}
func (m *StringInt32) XXX_Size() int {
	return m.Size()
}
func (m *StringInt32) XXX_DiscardUnknown() {
	xxx_messageInfo_StringInt32.DiscardUnknown(m)
}

var xxx_messageInfo_StringInt32 proto.InternalMessageInfo

func (m *StringInt32) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StringInt32) GetVal() int32 {
	if m != nil {
		return m.Val
	}
	return 0
}

type StringListWalletAmount struct {
	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Val  *ListWalletAmount `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *StringListWalletAmount) Reset()         { *m = StringListWalletAmount{} }
func (m *StringListWalletAmount) String() string { return proto.CompactTextString(m) }
func (*StringListWalletAmount) ProtoMessage()    {}
func (*StringListWalletAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a965999ed27022, []int{5}
}
func (m *StringListWalletAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringListWalletAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringListWalletAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringListWalletAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringListWalletAmount.Merge(m, src)
}
func (m *StringListWalletAmount) XXX_Size() int {
	return m.Size()
}
func (m *StringListWalletAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_StringListWalletAmount.DiscardUnknown(m)
}

var xxx_messageInfo_StringListWalletAmount proto.InternalMessageInfo

func (m *StringListWalletAmount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StringListWalletAmount) GetVal() *ListWalletAmount {
	if m != nil {
		return m.Val
	}
	return nil
}

type StableWallet struct {
	WalletID                             string                    `protobuf:"bytes,1,opt,name=walletID,proto3" json:"walletID,omitempty"`
	HomePioneerID                        string                    `protobuf:"bytes,2,opt,name=homePioneerID,proto3" json:"homePioneerID,omitempty"`
	ServiceProviderID                    []string                  `protobuf:"bytes,3,rep,name=serviceProviderID,proto3" json:"serviceProviderID,omitempty"`
	WalletAmount                         []*StringWalletAmount     `protobuf:"bytes,4,rep,name=walletAmount,proto3" json:"walletAmount,omitempty"`
	CredentialID                         string                    `protobuf:"bytes,5,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
	EncCreateWalletVShare                []byte                    `protobuf:"bytes,6,opt,name=encCreateWalletVShare,proto3" json:"encCreateWalletVShare,omitempty"`
	CreateWalletVShareBind               *VShareBindData           `protobuf:"bytes,7,opt,name=createWalletVShareBind,proto3" json:"createWalletVShareBind,omitempty"`
	EphemeralWalletAmountCount           []*StringInt32            `protobuf:"bytes,8,rep,name=ephemeralWalletAmountCount,proto3" json:"ephemeralWalletAmountCount,omitempty"`
	QueuedWalletAmount                   []*StringListWalletAmount `protobuf:"bytes,9,rep,name=queuedWalletAmount,proto3" json:"queuedWalletAmount,omitempty"`
	AcceptPasswordPedersenCommit         *BPedersenCommit          `protobuf:"bytes,10,opt,name=acceptPasswordPedersenCommit,proto3" json:"acceptPasswordPedersenCommit,omitempty"`
	EncAcceptValidatedCredentialsVShare  []byte                    `protobuf:"bytes,11,opt,name=encAcceptValidatedCredentialsVShare,proto3" json:"encAcceptValidatedCredentialsVShare,omitempty"`
	AcceptValidatedCredentialsVShareBind *VShareBindData           `protobuf:"bytes,12,opt,name=acceptValidatedCredentialsVShareBind,proto3" json:"acceptValidatedCredentialsVShareBind,omitempty"`
	SenderOptions                        string                    `protobuf:"bytes,13,opt,name=senderOptions,proto3" json:"senderOptions,omitempty"`
	RecoverShares                        []*RecoverShare           `protobuf:"bytes,14,rep,name=recoverShares,proto3" json:"recoverShares,omitempty"`
}

func (m *StableWallet) Reset()         { *m = StableWallet{} }
func (m *StableWallet) String() string { return proto.CompactTextString(m) }
func (*StableWallet) ProtoMessage()    {}
func (*StableWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a965999ed27022, []int{6}
}
func (m *StableWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StableWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StableWallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StableWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StableWallet.Merge(m, src)
}
func (m *StableWallet) XXX_Size() int {
	return m.Size()
}
func (m *StableWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_StableWallet.DiscardUnknown(m)
}

var xxx_messageInfo_StableWallet proto.InternalMessageInfo

func (m *StableWallet) GetWalletID() string {
	if m != nil {
		return m.WalletID
	}
	return ""
}

func (m *StableWallet) GetHomePioneerID() string {
	if m != nil {
		return m.HomePioneerID
	}
	return ""
}

func (m *StableWallet) GetServiceProviderID() []string {
	if m != nil {
		return m.ServiceProviderID
	}
	return nil
}

func (m *StableWallet) GetWalletAmount() []*StringWalletAmount {
	if m != nil {
		return m.WalletAmount
	}
	return nil
}

func (m *StableWallet) GetCredentialID() string {
	if m != nil {
		return m.CredentialID
	}
	return ""
}

func (m *StableWallet) GetEncCreateWalletVShare() []byte {
	if m != nil {
		return m.EncCreateWalletVShare
	}
	return nil
}

func (m *StableWallet) GetCreateWalletVShareBind() *VShareBindData {
	if m != nil {
		return m.CreateWalletVShareBind
	}
	return nil
}

func (m *StableWallet) GetEphemeralWalletAmountCount() []*StringInt32 {
	if m != nil {
		return m.EphemeralWalletAmountCount
	}
	return nil
}

func (m *StableWallet) GetQueuedWalletAmount() []*StringListWalletAmount {
	if m != nil {
		return m.QueuedWalletAmount
	}
	return nil
}

func (m *StableWallet) GetAcceptPasswordPedersenCommit() *BPedersenCommit {
	if m != nil {
		return m.AcceptPasswordPedersenCommit
	}
	return nil
}

func (m *StableWallet) GetEncAcceptValidatedCredentialsVShare() []byte {
	if m != nil {
		return m.EncAcceptValidatedCredentialsVShare
	}
	return nil
}

func (m *StableWallet) GetAcceptValidatedCredentialsVShareBind() *VShareBindData {
	if m != nil {
		return m.AcceptValidatedCredentialsVShareBind
	}
	return nil
}

func (m *StableWallet) GetSenderOptions() string {
	if m != nil {
		return m.SenderOptions
	}
	return ""
}

func (m *StableWallet) GetRecoverShares() []*RecoverShare {
	if m != nil {
		return m.RecoverShares
	}
	return nil
}

func init() {
	proto.RegisterType((*WalletAmount)(nil), "qadena.qadena.WalletAmount")
	proto.RegisterType((*ListWalletAmount)(nil), "qadena.qadena.ListWalletAmount")
	proto.RegisterType((*Wallet)(nil), "qadena.qadena.Wallet")
	proto.RegisterMapType((map[string]int32)(nil), "qadena.qadena.Wallet.EphemeralWalletAmountCountEntry")
	proto.RegisterMapType((map[string]*ListWalletAmount)(nil), "qadena.qadena.Wallet.QueuedWalletAmountEntry")
	proto.RegisterMapType((map[string]*WalletAmount)(nil), "qadena.qadena.Wallet.WalletAmountEntry")
	proto.RegisterType((*StringWalletAmount)(nil), "qadena.qadena.StringWalletAmount")
	proto.RegisterType((*StringInt32)(nil), "qadena.qadena.StringInt32")
	proto.RegisterType((*StringListWalletAmount)(nil), "qadena.qadena.StringListWalletAmount")
	proto.RegisterType((*StableWallet)(nil), "qadena.qadena.StableWallet")
}

func init() { proto.RegisterFile("qadena/qadena/wallet.proto", fileDescriptor_14a965999ed27022) }

var fileDescriptor_14a965999ed27022 = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcd, 0x4e, 0xe3, 0x56,
	0x14, 0xc6, 0x84, 0x00, 0x39, 0x24, 0x15, 0x5c, 0x15, 0x6a, 0xb9, 0x25, 0x84, 0x00, 0x2a, 0x8b,
	0x12, 0x04, 0x14, 0xa9, 0xea, 0x0e, 0x12, 0x16, 0x51, 0x5b, 0x35, 0x75, 0x0a, 0x48, 0xa8, 0x9d,
	0xe8, 0xc6, 0x3e, 0x33, 0xb1, 0x70, 0xec, 0xe4, 0xfa, 0x26, 0x19, 0xde, 0x62, 0xde, 0x67, 0x5e,
	0x60, 0x96, 0xcc, 0x6e, 0x96, 0x23, 0x78, 0x84, 0x79, 0x81, 0x51, 0xae, 0x3d, 0xe0, 0x9f, 0x4b,
	0xe2, 0xdd, 0x08, 0x69, 0x56, 0xb6, 0xef, 0xfd, 0xbe, 0xf3, 0x7f, 0x3e, 0x19, 0xb4, 0x3e, 0x35,
	0xd1, 0xa1, 0xfb, 0xc1, 0x63, 0x44, 0x6d, 0x1b, 0x79, 0xa5, 0xc7, 0x5c, 0xee, 0x92, 0x82, 0x7f,
	0x58, 0xf1, 0x1f, 0xda, 0x56, 0x14, 0xda, 0x43, 0x13, 0x99, 0x87, 0x4e, 0xcb, 0x70, 0xbb, 0x5d,
	0x2b, 0xe0, 0x68, 0x3b, 0x51, 0x50, 0xbb, 0x25, 0x87, 0x6d, 0x46, 0x61, 0x0c, 0x0d, 0x77, 0x88,
	0xac, 0xe5, 0x75, 0x28, 0xc3, 0x00, 0xb2, 0x1e, 0xb3, 0x64, 0x39, 0x66, 0xcb, 0xa4, 0x9c, 0xca,
	0x1d, 0x0d, 0x7d, 0x6e, 0x2b, 0x06, 0x2b, 0xbf, 0x9f, 0x85, 0xfc, 0xa5, 0x48, 0xea, 0xa4, 0xeb,
	0x0e, 0x1c, 0x4e, 0x5e, 0x80, 0x36, 0x0a, 0x7d, 0x37, 0x82, 0xf0, 0xaa, 0x22, 0x3a, 0x55, 0x29,
	0x29, 0xbb, 0x4b, 0x87, 0xc5, 0x4a, 0x24, 0xf3, 0xca, 0x69, 0x14, 0xa5, 0x4f, 0xb0, 0x40, 0x7e,
	0x85, 0x55, 0x74, 0x8c, 0xb0, 0xcb, 0x8b, 0xe6, 0x38, 0x32, 0x75, 0xb6, 0xa4, 0xec, 0xe6, 0x75,
	0xf9, 0x25, 0x39, 0x87, 0xb5, 0x51, 0xe2, 0xf4, 0xd4, 0x72, 0x4c, 0x35, 0x23, 0x22, 0x5a, 0x8f,
	0x45, 0xf4, 0x08, 0xa8, 0x51, 0x4e, 0xf5, 0x27, 0xc8, 0xe4, 0x5f, 0x58, 0xd5, 0xb1, 0x3f, 0xb0,
	0x18, 0x9a, 0x4d, 0x74, 0x4c, 0x64, 0xd5, 0x0e, 0x1a, 0xd7, 0x8d, 0xaa, 0x3a, 0x57, 0xca, 0xa4,
	0xc8, 0x53, 0x4e, 0x2e, 0x9f, 0xc3, 0xf2, 0x9f, 0x96, 0xc7, 0x23, 0x65, 0x3d, 0x81, 0x42, 0x38,
	0x06, 0x4f, 0x55, 0x84, 0x87, 0x1f, 0x63, 0x1e, 0xc2, 0x1c, 0x3d, 0xca, 0x28, 0x7f, 0xca, 0xc1,
	0xbc, 0x7f, 0x4f, 0x34, 0x58, 0xf4, 0xef, 0xea, 0x35, 0xd1, 0x92, 0x9c, 0xfe, 0xf0, 0x4d, 0xb6,
	0xa1, 0xd0, 0x71, 0xbb, 0xd8, 0xb0, 0x5c, 0x07, 0x91, 0xd5, 0x6b, 0xa2, 0xb0, 0x39, 0x3d, 0x7a,
	0x48, 0x7e, 0x81, 0x15, 0x0f, 0xd9, 0xd0, 0x32, 0xb0, 0xc1, 0xdc, 0xa1, 0x65, 0x0a, 0x64, 0xa6,
	0x94, 0xd9, 0xcd, 0xe9, 0xc9, 0x0b, 0xf2, 0x07, 0xe4, 0xc3, 0xb1, 0x04, 0xe5, 0xf9, 0x59, 0x1a,
	0x7c, 0x24, 0x87, 0x33, 0x87, 0xb3, 0x1b, 0x3d, 0x42, 0x26, 0x65, 0xc8, 0x1b, 0x0c, 0x4d, 0x74,
	0xb8, 0x45, 0xed, 0x7a, 0x4d, 0xcd, 0x8a, 0xf8, 0x22, 0x67, 0xc1, 0x94, 0x54, 0x19, 0x52, 0x8e,
	0xbe, 0xbd, 0x60, 0x4a, 0xe6, 0x1f, 0xa6, 0x24, 0x79, 0x39, 0x9e, 0x12, 0x23, 0x71, 0x2a, 0xa6,
	0x64, 0x21, 0xd5, 0x94, 0xc8, 0xc9, 0x64, 0x00, 0x1a, 0xf6, 0x3a, 0xd8, 0x45, 0x46, 0xed, 0x70,
	0x72, 0x55, 0x51, 0x8b, 0x45, 0x51, 0x8b, 0x63, 0x79, 0x2d, 0xce, 0x9e, 0xe4, 0xf9, 0x95, 0x99,
	0x60, 0x98, 0xfc, 0x0f, 0xa4, 0x3f, 0xc0, 0x01, 0x9a, 0xe1, 0x2b, 0x35, 0x27, 0xdc, 0xed, 0xc9,
	0xdd, 0xfd, 0x93, 0xc0, 0xfb, 0x6e, 0x24, 0x86, 0x48, 0x1b, 0x7e, 0xa2, 0x86, 0x81, 0x3d, 0xde,
	0xa0, 0x9e, 0x37, 0x72, 0x99, 0x19, 0x5b, 0x75, 0x48, 0xb5, 0xea, 0x13, 0x6d, 0x90, 0x06, 0x6c,
	0xa1, 0x63, 0x9c, 0x08, 0xc8, 0x05, 0xb5, 0x2d, 0x93, 0x72, 0x34, 0xab, 0x0f, 0x8d, 0xf6, 0x82,
	0xa6, 0x2e, 0x89, 0xa6, 0xa6, 0x81, 0x92, 0x3e, 0x6c, 0xd3, 0x29, 0x18, 0xd1, 0xf0, 0x7c, 0x9a,
	0x86, 0xa7, 0x32, 0x35, 0x5e, 0x28, 0x4f, 0xec, 0xf7, 0xdf, 0x3d, 0x6e, 0xb9, 0x8e, 0xa7, 0x16,
	0xfc, 0x85, 0x8a, 0x1c, 0x8e, 0x17, 0x3c, 0x50, 0x69, 0xc1, 0xf4, 0xd4, 0xef, 0xa4, 0x0b, 0xae,
	0x87, 0x30, 0x7a, 0x94, 0xa1, 0xfd, 0x07, 0x2b, 0x89, 0xd6, 0x91, 0x65, 0xc8, 0x5c, 0xe3, 0x4d,
	0xb0, 0xe5, 0xe3, 0x57, 0x72, 0x00, 0xd9, 0x21, 0xb5, 0x07, 0xbe, 0x62, 0x4e, 0x91, 0x10, 0x1f,
	0xf9, 0xfb, 0xec, 0x6f, 0x8a, 0xf6, 0x17, 0x6c, 0x4c, 0x99, 0x46, 0x89, 0xaf, 0xef, 0xc3, 0xbe,
	0xb2, 0x61, 0x73, 0x2f, 0xe1, 0x87, 0x27, 0xa6, 0x4d, 0x62, 0xe6, 0x38, 0x1a, 0xf2, 0x46, 0x2c,
	0xe4, 0xb8, 0x5a, 0x86, 0xfc, 0x94, 0x2f, 0x81, 0x34, 0x39, 0xb3, 0x9c, 0x57, 0x91, 0xe1, 0x25,
	0x30, 0xe7, 0xd0, 0x2e, 0x06, 0x3e, 0xc4, 0x3b, 0xd9, 0x83, 0xcc, 0x90, 0xda, 0x69, 0xaa, 0x32,
	0xc6, 0x95, 0x8f, 0x60, 0xc9, 0x37, 0x5c, 0x77, 0xf8, 0xd1, 0xa1, 0xd4, 0xe2, 0xf2, 0xa3, 0xc5,
	0xac, 0x4f, 0x6a, 0xc1, 0x9a, 0x4f, 0x4a, 0x08, 0xbc, 0x8c, 0x7f, 0x10, 0x8e, 0x68, 0x6a, 0xd2,
	0xc2, 0xc1, 0xdb, 0x05, 0xc8, 0x37, 0x39, 0x6d, 0xdb, 0xf8, 0x95, 0xa4, 0xfe, 0x4c, 0x2a, 0xf5,
	0x9b, 0xb1, 0xe0, 0x93, 0x2d, 0x79, 0xee, 0x22, 0x7f, 0x95, 0x42, 0xe4, 0x35, 0x69, 0x15, 0xc4,
	0xfc, 0x4c, 0x54, 0xf2, 0xf3, 0x09, 0x4a, 0xbe, 0x23, 0xb5, 0x99, 0x18, 0x8e, 0x6f, 0x0a, 0xfe,
	0x0c, 0x14, 0xfc, 0x74, 0xff, 0xdd, 0x5d, 0x51, 0xb9, 0xbd, 0x2b, 0x2a, 0x1f, 0xef, 0x8a, 0xca,
	0x9b, 0xfb, 0xe2, 0xcc, 0xed, 0x7d, 0x71, 0xe6, 0xc3, 0x7d, 0x71, 0xe6, 0x6a, 0x35, 0xf8, 0x0f,
	0x7f, 0xfd, 0xe5, 0x87, 0x9c, 0xdf, 0xf4, 0xd0, 0x6b, 0xcf, 0x8b, 0xbf, 0xf0, 0xa3, 0xcf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xdd, 0x62, 0x36, 0x73, 0x67, 0x0c, 0x00, 0x00,
}

func (m *WalletAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequiredSenderCheckPC) > 0 {
		for iNdEx := len(m.RequiredSenderCheckPC) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequiredSenderCheckPC[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.WalletAmountVShareBind != nil {
		{
			size, err := m.WalletAmountVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EncWalletAmountVShare) > 0 {
		i -= len(m.EncWalletAmountVShare)
		copy(dAtA[i:], m.EncWalletAmountVShare)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.EncWalletAmountVShare)))
		i--
		dAtA[i] = 0x12
	}
	if m.WalletAmountPedersenCommit != nil {
		{
			size, err := m.WalletAmountPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletAmounts) > 0 {
		for iNdEx := len(m.WalletAmounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WalletAmounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Wallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecoverShares) > 0 {
		for iNdEx := len(m.RecoverShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecoverShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.SenderOptions) > 0 {
		i -= len(m.SenderOptions)
		copy(dAtA[i:], m.SenderOptions)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.SenderOptions)))
		i--
		dAtA[i] = 0x6a
	}
	if m.AcceptValidatedCredentialsVShareBind != nil {
		{
			size, err := m.AcceptValidatedCredentialsVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.EncAcceptValidatedCredentialsVShare) > 0 {
		i -= len(m.EncAcceptValidatedCredentialsVShare)
		copy(dAtA[i:], m.EncAcceptValidatedCredentialsVShare)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.EncAcceptValidatedCredentialsVShare)))
		i--
		dAtA[i] = 0x5a
	}
	if m.AcceptPasswordPedersenCommit != nil {
		{
			size, err := m.AcceptPasswordPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.QueuedWalletAmount) > 0 {
		for k := range m.QueuedWalletAmount {
			v := m.QueuedWalletAmount[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWallet(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWallet(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWallet(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.EphemeralWalletAmountCount) > 0 {
		for k := range m.EphemeralWalletAmountCount {
			v := m.EphemeralWalletAmountCount[k]
			baseI := i
			i = encodeVarintWallet(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWallet(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWallet(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CreateWalletVShareBind != nil {
		{
			size, err := m.CreateWalletVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EncCreateWalletVShare) > 0 {
		i -= len(m.EncCreateWalletVShare)
		copy(dAtA[i:], m.EncCreateWalletVShare)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.EncCreateWalletVShare)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CredentialID) > 0 {
		i -= len(m.CredentialID)
		copy(dAtA[i:], m.CredentialID)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.CredentialID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WalletAmount) > 0 {
		for k := range m.WalletAmount {
			v := m.WalletAmount[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWallet(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWallet(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWallet(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ServiceProviderID) > 0 {
		for iNdEx := len(m.ServiceProviderID) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceProviderID[iNdEx])
			copy(dAtA[i:], m.ServiceProviderID[iNdEx])
			i = encodeVarintWallet(dAtA, i, uint64(len(m.ServiceProviderID[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HomePioneerID) > 0 {
		i -= len(m.HomePioneerID)
		copy(dAtA[i:], m.HomePioneerID)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.HomePioneerID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletID) > 0 {
		i -= len(m.WalletID)
		copy(dAtA[i:], m.WalletID)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.WalletID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringWalletAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringWalletAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringWalletAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Val != nil {
		{
			size, err := m.Val.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringInt32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringInt32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringInt32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Val != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Val))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringListWalletAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringListWalletAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringListWalletAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Val != nil {
		{
			size, err := m.Val.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StableWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StableWallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StableWallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecoverShares) > 0 {
		for iNdEx := len(m.RecoverShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecoverShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.SenderOptions) > 0 {
		i -= len(m.SenderOptions)
		copy(dAtA[i:], m.SenderOptions)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.SenderOptions)))
		i--
		dAtA[i] = 0x6a
	}
	if m.AcceptValidatedCredentialsVShareBind != nil {
		{
			size, err := m.AcceptValidatedCredentialsVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.EncAcceptValidatedCredentialsVShare) > 0 {
		i -= len(m.EncAcceptValidatedCredentialsVShare)
		copy(dAtA[i:], m.EncAcceptValidatedCredentialsVShare)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.EncAcceptValidatedCredentialsVShare)))
		i--
		dAtA[i] = 0x5a
	}
	if m.AcceptPasswordPedersenCommit != nil {
		{
			size, err := m.AcceptPasswordPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.QueuedWalletAmount) > 0 {
		for iNdEx := len(m.QueuedWalletAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueuedWalletAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.EphemeralWalletAmountCount) > 0 {
		for iNdEx := len(m.EphemeralWalletAmountCount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EphemeralWalletAmountCount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CreateWalletVShareBind != nil {
		{
			size, err := m.CreateWalletVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EncCreateWalletVShare) > 0 {
		i -= len(m.EncCreateWalletVShare)
		copy(dAtA[i:], m.EncCreateWalletVShare)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.EncCreateWalletVShare)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CredentialID) > 0 {
		i -= len(m.CredentialID)
		copy(dAtA[i:], m.CredentialID)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.CredentialID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WalletAmount) > 0 {
		for iNdEx := len(m.WalletAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WalletAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ServiceProviderID) > 0 {
		for iNdEx := len(m.ServiceProviderID) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceProviderID[iNdEx])
			copy(dAtA[i:], m.ServiceProviderID[iNdEx])
			i = encodeVarintWallet(dAtA, i, uint64(len(m.ServiceProviderID[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HomePioneerID) > 0 {
		i -= len(m.HomePioneerID)
		copy(dAtA[i:], m.HomePioneerID)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.HomePioneerID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletID) > 0 {
		i -= len(m.WalletID)
		copy(dAtA[i:], m.WalletID)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.WalletID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWallet(dAtA []byte, offset int, v uint64) int {
	offset -= sovWallet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WalletAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletAmountPedersenCommit != nil {
		l = m.WalletAmountPedersenCommit.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.EncWalletAmountVShare)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.WalletAmountVShareBind != nil {
		l = m.WalletAmountVShareBind.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	if len(m.RequiredSenderCheckPC) > 0 {
		for _, e := range m.RequiredSenderCheckPC {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	return n
}

func (m *ListWalletAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WalletAmounts) > 0 {
		for _, e := range m.WalletAmounts {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	return n
}

func (m *Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletID)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.HomePioneerID)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if len(m.ServiceProviderID) > 0 {
		for _, s := range m.ServiceProviderID {
			l = len(s)
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if len(m.WalletAmount) > 0 {
		for k, v := range m.WalletAmount {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWallet(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWallet(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWallet(uint64(mapEntrySize))
		}
	}
	l = len(m.CredentialID)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.EncCreateWalletVShare)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.CreateWalletVShareBind != nil {
		l = m.CreateWalletVShareBind.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	if len(m.EphemeralWalletAmountCount) > 0 {
		for k, v := range m.EphemeralWalletAmountCount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWallet(uint64(len(k))) + 1 + sovWallet(uint64(v))
			n += mapEntrySize + 1 + sovWallet(uint64(mapEntrySize))
		}
	}
	if len(m.QueuedWalletAmount) > 0 {
		for k, v := range m.QueuedWalletAmount {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWallet(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWallet(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWallet(uint64(mapEntrySize))
		}
	}
	if m.AcceptPasswordPedersenCommit != nil {
		l = m.AcceptPasswordPedersenCommit.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.EncAcceptValidatedCredentialsVShare)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.AcceptValidatedCredentialsVShareBind != nil {
		l = m.AcceptValidatedCredentialsVShareBind.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.SenderOptions)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if len(m.RecoverShares) > 0 {
		for _, e := range m.RecoverShares {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	return n
}

func (m *StringWalletAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.Val != nil {
		l = m.Val.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *StringInt32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.Val != 0 {
		n += 1 + sovWallet(uint64(m.Val))
	}
	return n
}

func (m *StringListWalletAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.Val != nil {
		l = m.Val.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *StableWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletID)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.HomePioneerID)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if len(m.ServiceProviderID) > 0 {
		for _, s := range m.ServiceProviderID {
			l = len(s)
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if len(m.WalletAmount) > 0 {
		for _, e := range m.WalletAmount {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	l = len(m.CredentialID)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.EncCreateWalletVShare)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.CreateWalletVShareBind != nil {
		l = m.CreateWalletVShareBind.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	if len(m.EphemeralWalletAmountCount) > 0 {
		for _, e := range m.EphemeralWalletAmountCount {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if len(m.QueuedWalletAmount) > 0 {
		for _, e := range m.QueuedWalletAmount {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if m.AcceptPasswordPedersenCommit != nil {
		l = m.AcceptPasswordPedersenCommit.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.EncAcceptValidatedCredentialsVShare)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.AcceptValidatedCredentialsVShareBind != nil {
		l = m.AcceptValidatedCredentialsVShareBind.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.SenderOptions)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if len(m.RecoverShares) > 0 {
		for _, e := range m.RecoverShares {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	return n
}

func sovWallet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWallet(x uint64) (n int) {
	return sovWallet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WalletAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAmountPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WalletAmountPedersenCommit == nil {
				m.WalletAmountPedersenCommit = &BPedersenCommit{}
			}
			if err := m.WalletAmountPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncWalletAmountVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncWalletAmountVShare = append(m.EncWalletAmountVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncWalletAmountVShare == nil {
				m.EncWalletAmountVShare = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAmountVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WalletAmountVShareBind == nil {
				m.WalletAmountVShareBind = &VShareBindData{}
			}
			if err := m.WalletAmountVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredSenderCheckPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredSenderCheckPC = append(m.RequiredSenderCheckPC, &BPedersenCommit{})
			if err := m.RequiredSenderCheckPC[len(m.RequiredSenderCheckPC)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAmounts = append(m.WalletAmounts, &WalletAmount{})
			if err := m.WalletAmounts[len(m.WalletAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePioneerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePioneerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceProviderID = append(m.ServiceProviderID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WalletAmount == nil {
				m.WalletAmount = make(map[string]*WalletAmount)
			}
			var mapkey string
			var mapvalue *WalletAmount
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWallet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWallet
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWallet
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWallet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWallet
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWallet
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WalletAmount{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWallet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWallet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WalletAmount[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCreateWalletVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCreateWalletVShare = append(m.EncCreateWalletVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCreateWalletVShare == nil {
				m.EncCreateWalletVShare = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateWalletVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateWalletVShareBind == nil {
				m.CreateWalletVShareBind = &VShareBindData{}
			}
			if err := m.CreateWalletVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EphemeralWalletAmountCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EphemeralWalletAmountCount == nil {
				m.EphemeralWalletAmountCount = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWallet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWallet
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWallet
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWallet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWallet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWallet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EphemeralWalletAmountCount[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedWalletAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueuedWalletAmount == nil {
				m.QueuedWalletAmount = make(map[string]*ListWalletAmount)
			}
			var mapkey string
			var mapvalue *ListWalletAmount
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWallet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWallet
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWallet
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWallet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWallet
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWallet
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ListWalletAmount{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWallet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWallet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.QueuedWalletAmount[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptPasswordPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptPasswordPedersenCommit == nil {
				m.AcceptPasswordPedersenCommit = &BPedersenCommit{}
			}
			if err := m.AcceptPasswordPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncAcceptValidatedCredentialsVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncAcceptValidatedCredentialsVShare = append(m.EncAcceptValidatedCredentialsVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncAcceptValidatedCredentialsVShare == nil {
				m.EncAcceptValidatedCredentialsVShare = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptValidatedCredentialsVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptValidatedCredentialsVShareBind == nil {
				m.AcceptValidatedCredentialsVShareBind = &VShareBindData{}
			}
			if err := m.AcceptValidatedCredentialsVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderOptions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoverShares = append(m.RecoverShares, &RecoverShare{})
			if err := m.RecoverShares[len(m.RecoverShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringWalletAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringWalletAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringWalletAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Val == nil {
				m.Val = &WalletAmount{}
			}
			if err := m.Val.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringInt32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringInt32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringInt32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringListWalletAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringListWalletAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringListWalletAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Val == nil {
				m.Val = &ListWalletAmount{}
			}
			if err := m.Val.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StableWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StableWallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StableWallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePioneerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePioneerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceProviderID = append(m.ServiceProviderID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAmount = append(m.WalletAmount, &StringWalletAmount{})
			if err := m.WalletAmount[len(m.WalletAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCreateWalletVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCreateWalletVShare = append(m.EncCreateWalletVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCreateWalletVShare == nil {
				m.EncCreateWalletVShare = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateWalletVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateWalletVShareBind == nil {
				m.CreateWalletVShareBind = &VShareBindData{}
			}
			if err := m.CreateWalletVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EphemeralWalletAmountCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EphemeralWalletAmountCount = append(m.EphemeralWalletAmountCount, &StringInt32{})
			if err := m.EphemeralWalletAmountCount[len(m.EphemeralWalletAmountCount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedWalletAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedWalletAmount = append(m.QueuedWalletAmount, &StringListWalletAmount{})
			if err := m.QueuedWalletAmount[len(m.QueuedWalletAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptPasswordPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptPasswordPedersenCommit == nil {
				m.AcceptPasswordPedersenCommit = &BPedersenCommit{}
			}
			if err := m.AcceptPasswordPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncAcceptValidatedCredentialsVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncAcceptValidatedCredentialsVShare = append(m.EncAcceptValidatedCredentialsVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncAcceptValidatedCredentialsVShare == nil {
				m.EncAcceptValidatedCredentialsVShare = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptValidatedCredentialsVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptValidatedCredentialsVShareBind == nil {
				m.AcceptValidatedCredentialsVShareBind = &VShareBindData{}
			}
			if err := m.AcceptValidatedCredentialsVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderOptions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoverShares = append(m.RecoverShares, &RecoverShare{})
			if err := m.RecoverShares[len(m.RecoverShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWallet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWallet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWallet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWallet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWallet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWallet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWallet = fmt.Errorf("proto: unexpected end of group")
)
