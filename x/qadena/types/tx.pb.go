// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgCreateSuspiciousTransaction struct {
	Creator                                 string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	JarID                                   string    `protobuf:"bytes,2,opt,name=jarID,proto3" json:"jarID,omitempty"`
	RegulatorPubKID                         string    `protobuf:"bytes,3,opt,name=regulatorPubKID,proto3" json:"regulatorPubKID,omitempty"`
	Reason                                  string    `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Time                                    time.Time `protobuf:"bytes,5,opt,name=time,proto3,stdtime" json:"time"`
	EncSourcePersonalInfoRegulatorPubK      []byte    `protobuf:"bytes,6,opt,name=encSourcePersonalInfoRegulatorPubK,proto3" json:"encSourcePersonalInfoRegulatorPubK,omitempty"`
	EncDestinationPersonalInfoRegulatorPubK []byte    `protobuf:"bytes,7,opt,name=encDestinationPersonalInfoRegulatorPubK,proto3" json:"encDestinationPersonalInfoRegulatorPubK,omitempty"`
	EncEAmountRegulatorPubK                 []byte    `protobuf:"bytes,8,opt,name=encEAmountRegulatorPubK,proto3" json:"encEAmountRegulatorPubK,omitempty"`
	EncOptInReasonRegulatorPubK             []byte    `protobuf:"bytes,9,opt,name=encOptInReasonRegulatorPubK,proto3" json:"encOptInReasonRegulatorPubK,omitempty"`
}

func (m *MsgCreateSuspiciousTransaction) Reset()         { *m = MsgCreateSuspiciousTransaction{} }
func (m *MsgCreateSuspiciousTransaction) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSuspiciousTransaction) ProtoMessage()    {}
func (*MsgCreateSuspiciousTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{2}
}
func (m *MsgCreateSuspiciousTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSuspiciousTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSuspiciousTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSuspiciousTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSuspiciousTransaction.Merge(m, src)
}
func (m *MsgCreateSuspiciousTransaction) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSuspiciousTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSuspiciousTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSuspiciousTransaction proto.InternalMessageInfo

func (m *MsgCreateSuspiciousTransaction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateSuspiciousTransaction) GetJarID() string {
	if m != nil {
		return m.JarID
	}
	return ""
}

func (m *MsgCreateSuspiciousTransaction) GetRegulatorPubKID() string {
	if m != nil {
		return m.RegulatorPubKID
	}
	return ""
}

func (m *MsgCreateSuspiciousTransaction) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MsgCreateSuspiciousTransaction) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *MsgCreateSuspiciousTransaction) GetEncSourcePersonalInfoRegulatorPubK() []byte {
	if m != nil {
		return m.EncSourcePersonalInfoRegulatorPubK
	}
	return nil
}

func (m *MsgCreateSuspiciousTransaction) GetEncDestinationPersonalInfoRegulatorPubK() []byte {
	if m != nil {
		return m.EncDestinationPersonalInfoRegulatorPubK
	}
	return nil
}

func (m *MsgCreateSuspiciousTransaction) GetEncEAmountRegulatorPubK() []byte {
	if m != nil {
		return m.EncEAmountRegulatorPubK
	}
	return nil
}

func (m *MsgCreateSuspiciousTransaction) GetEncOptInReasonRegulatorPubK() []byte {
	if m != nil {
		return m.EncOptInReasonRegulatorPubK
	}
	return nil
}

type MsgCreateSuspiciousTransactionResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateSuspiciousTransactionResponse) Reset() {
	*m = MsgCreateSuspiciousTransactionResponse{}
}
func (m *MsgCreateSuspiciousTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSuspiciousTransactionResponse) ProtoMessage()    {}
func (*MsgCreateSuspiciousTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{3}
}
func (m *MsgCreateSuspiciousTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSuspiciousTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSuspiciousTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSuspiciousTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSuspiciousTransactionResponse.Merge(m, src)
}
func (m *MsgCreateSuspiciousTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSuspiciousTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSuspiciousTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSuspiciousTransactionResponse proto.InternalMessageInfo

func (m *MsgCreateSuspiciousTransactionResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateSuspiciousTransaction struct {
	Creator                                 string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                                      uint64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	JarID                                   string    `protobuf:"bytes,3,opt,name=jarID,proto3" json:"jarID,omitempty"`
	RegulatorPubKID                         string    `protobuf:"bytes,4,opt,name=regulatorPubKID,proto3" json:"regulatorPubKID,omitempty"`
	Reason                                  string    `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Time                                    time.Time `protobuf:"bytes,6,opt,name=time,proto3,stdtime" json:"time"`
	EncSourcePersonalInfoRegulatorPubK      []byte    `protobuf:"bytes,7,opt,name=encSourcePersonalInfoRegulatorPubK,proto3" json:"encSourcePersonalInfoRegulatorPubK,omitempty"`
	EncDestinationPersonalInfoRegulatorPubK []byte    `protobuf:"bytes,8,opt,name=encDestinationPersonalInfoRegulatorPubK,proto3" json:"encDestinationPersonalInfoRegulatorPubK,omitempty"`
	EncEAmountRegulatorPubK                 []byte    `protobuf:"bytes,9,opt,name=encEAmountRegulatorPubK,proto3" json:"encEAmountRegulatorPubK,omitempty"`
	EncOptInReasonRegulatorPubK             []byte    `protobuf:"bytes,10,opt,name=encOptInReasonRegulatorPubK,proto3" json:"encOptInReasonRegulatorPubK,omitempty"`
}

func (m *MsgUpdateSuspiciousTransaction) Reset()         { *m = MsgUpdateSuspiciousTransaction{} }
func (m *MsgUpdateSuspiciousTransaction) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSuspiciousTransaction) ProtoMessage()    {}
func (*MsgUpdateSuspiciousTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{4}
}
func (m *MsgUpdateSuspiciousTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSuspiciousTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSuspiciousTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSuspiciousTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSuspiciousTransaction.Merge(m, src)
}
func (m *MsgUpdateSuspiciousTransaction) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSuspiciousTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSuspiciousTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSuspiciousTransaction proto.InternalMessageInfo

func (m *MsgUpdateSuspiciousTransaction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateSuspiciousTransaction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateSuspiciousTransaction) GetJarID() string {
	if m != nil {
		return m.JarID
	}
	return ""
}

func (m *MsgUpdateSuspiciousTransaction) GetRegulatorPubKID() string {
	if m != nil {
		return m.RegulatorPubKID
	}
	return ""
}

func (m *MsgUpdateSuspiciousTransaction) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MsgUpdateSuspiciousTransaction) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *MsgUpdateSuspiciousTransaction) GetEncSourcePersonalInfoRegulatorPubK() []byte {
	if m != nil {
		return m.EncSourcePersonalInfoRegulatorPubK
	}
	return nil
}

func (m *MsgUpdateSuspiciousTransaction) GetEncDestinationPersonalInfoRegulatorPubK() []byte {
	if m != nil {
		return m.EncDestinationPersonalInfoRegulatorPubK
	}
	return nil
}

func (m *MsgUpdateSuspiciousTransaction) GetEncEAmountRegulatorPubK() []byte {
	if m != nil {
		return m.EncEAmountRegulatorPubK
	}
	return nil
}

func (m *MsgUpdateSuspiciousTransaction) GetEncOptInReasonRegulatorPubK() []byte {
	if m != nil {
		return m.EncOptInReasonRegulatorPubK
	}
	return nil
}

type MsgUpdateSuspiciousTransactionResponse struct {
}

func (m *MsgUpdateSuspiciousTransactionResponse) Reset() {
	*m = MsgUpdateSuspiciousTransactionResponse{}
}
func (m *MsgUpdateSuspiciousTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSuspiciousTransactionResponse) ProtoMessage()    {}
func (*MsgUpdateSuspiciousTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{5}
}
func (m *MsgUpdateSuspiciousTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSuspiciousTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSuspiciousTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSuspiciousTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSuspiciousTransactionResponse.Merge(m, src)
}
func (m *MsgUpdateSuspiciousTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSuspiciousTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSuspiciousTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSuspiciousTransactionResponse proto.InternalMessageInfo

type MsgDeleteSuspiciousTransaction struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteSuspiciousTransaction) Reset()         { *m = MsgDeleteSuspiciousTransaction{} }
func (m *MsgDeleteSuspiciousTransaction) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSuspiciousTransaction) ProtoMessage()    {}
func (*MsgDeleteSuspiciousTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{6}
}
func (m *MsgDeleteSuspiciousTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSuspiciousTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSuspiciousTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSuspiciousTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSuspiciousTransaction.Merge(m, src)
}
func (m *MsgDeleteSuspiciousTransaction) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSuspiciousTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSuspiciousTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSuspiciousTransaction proto.InternalMessageInfo

func (m *MsgDeleteSuspiciousTransaction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteSuspiciousTransaction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDeleteSuspiciousTransactionResponse struct {
}

func (m *MsgDeleteSuspiciousTransactionResponse) Reset() {
	*m = MsgDeleteSuspiciousTransactionResponse{}
}
func (m *MsgDeleteSuspiciousTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSuspiciousTransactionResponse) ProtoMessage()    {}
func (*MsgDeleteSuspiciousTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{7}
}
func (m *MsgDeleteSuspiciousTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSuspiciousTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSuspiciousTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSuspiciousTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSuspiciousTransactionResponse.Merge(m, src)
}
func (m *MsgDeleteSuspiciousTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSuspiciousTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSuspiciousTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSuspiciousTransactionResponse proto.InternalMessageInfo

type MsgAddPublicKey struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PubK     string `protobuf:"bytes,2,opt,name=pubK,proto3" json:"pubK,omitempty"`
	PubKType string `protobuf:"bytes,3,opt,name=pubKType,proto3" json:"pubKType,omitempty"`
}

func (m *MsgAddPublicKey) Reset()         { *m = MsgAddPublicKey{} }
func (m *MsgAddPublicKey) String() string { return proto.CompactTextString(m) }
func (*MsgAddPublicKey) ProtoMessage()    {}
func (*MsgAddPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{8}
}
func (m *MsgAddPublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddPublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddPublicKey.Merge(m, src)
}
func (m *MsgAddPublicKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddPublicKey proto.InternalMessageInfo

func (m *MsgAddPublicKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddPublicKey) GetPubK() string {
	if m != nil {
		return m.PubK
	}
	return ""
}

func (m *MsgAddPublicKey) GetPubKType() string {
	if m != nil {
		return m.PubKType
	}
	return ""
}

type MsgAddPublicKeyResponse struct {
}

func (m *MsgAddPublicKeyResponse) Reset()         { *m = MsgAddPublicKeyResponse{} }
func (m *MsgAddPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddPublicKeyResponse) ProtoMessage()    {}
func (*MsgAddPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{9}
}
func (m *MsgAddPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddPublicKeyResponse.Merge(m, src)
}
func (m *MsgAddPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddPublicKeyResponse proto.InternalMessageInfo

type MsgAddServiceProvider struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority           string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	PubKID              string `protobuf:"bytes,2,opt,name=pubKID,proto3" json:"pubKID,omitempty"`
	NodeID              string `protobuf:"bytes,3,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	ServiceProviderType string `protobuf:"bytes,4,opt,name=serviceProviderType,proto3" json:"serviceProviderType,omitempty"`
}

func (m *MsgAddServiceProvider) Reset()         { *m = MsgAddServiceProvider{} }
func (m *MsgAddServiceProvider) String() string { return proto.CompactTextString(m) }
func (*MsgAddServiceProvider) ProtoMessage()    {}
func (*MsgAddServiceProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{10}
}
func (m *MsgAddServiceProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddServiceProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddServiceProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddServiceProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddServiceProvider.Merge(m, src)
}
func (m *MsgAddServiceProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddServiceProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddServiceProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddServiceProvider proto.InternalMessageInfo

func (m *MsgAddServiceProvider) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgAddServiceProvider) GetPubKID() string {
	if m != nil {
		return m.PubKID
	}
	return ""
}

func (m *MsgAddServiceProvider) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *MsgAddServiceProvider) GetServiceProviderType() string {
	if m != nil {
		return m.ServiceProviderType
	}
	return ""
}

type MsgAddServiceProviderResponse struct {
}

func (m *MsgAddServiceProviderResponse) Reset()         { *m = MsgAddServiceProviderResponse{} }
func (m *MsgAddServiceProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddServiceProviderResponse) ProtoMessage()    {}
func (*MsgAddServiceProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{11}
}
func (m *MsgAddServiceProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddServiceProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddServiceProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddServiceProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddServiceProviderResponse.Merge(m, src)
}
func (m *MsgAddServiceProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddServiceProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddServiceProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddServiceProviderResponse proto.InternalMessageInfo

type MsgDeactivateServiceProvider struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	NodeID    string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *MsgDeactivateServiceProvider) Reset()         { *m = MsgDeactivateServiceProvider{} }
func (m *MsgDeactivateServiceProvider) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateServiceProvider) ProtoMessage()    {}
func (*MsgDeactivateServiceProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{12}
}
func (m *MsgDeactivateServiceProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateServiceProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateServiceProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateServiceProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateServiceProvider.Merge(m, src)
}
func (m *MsgDeactivateServiceProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateServiceProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateServiceProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateServiceProvider proto.InternalMessageInfo

func (m *MsgDeactivateServiceProvider) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgDeactivateServiceProvider) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type MsgDeactivateServiceProviderResponse struct {
}

func (m *MsgDeactivateServiceProviderResponse) Reset()         { *m = MsgDeactivateServiceProviderResponse{} }
func (m *MsgDeactivateServiceProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateServiceProviderResponse) ProtoMessage()    {}
func (*MsgDeactivateServiceProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{13}
}
func (m *MsgDeactivateServiceProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateServiceProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateServiceProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateServiceProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateServiceProviderResponse.Merge(m, src)
}
func (m *MsgDeactivateServiceProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateServiceProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateServiceProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateServiceProviderResponse proto.InternalMessageInfo

type MsgUpdateEnclaveIdentity struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	UniqueID  string `protobuf:"bytes,2,opt,name=uniqueID,proto3" json:"uniqueID,omitempty"`
	SignerID  string `protobuf:"bytes,3,opt,name=signerID,proto3" json:"signerID,omitempty"`
	ProductID string `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`
	Status    string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateEnclaveIdentity) Reset()         { *m = MsgUpdateEnclaveIdentity{} }
func (m *MsgUpdateEnclaveIdentity) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEnclaveIdentity) ProtoMessage()    {}
func (*MsgUpdateEnclaveIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{14}
}
func (m *MsgUpdateEnclaveIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEnclaveIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEnclaveIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEnclaveIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEnclaveIdentity.Merge(m, src)
}
func (m *MsgUpdateEnclaveIdentity) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEnclaveIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEnclaveIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEnclaveIdentity proto.InternalMessageInfo

func (m *MsgUpdateEnclaveIdentity) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateEnclaveIdentity) GetUniqueID() string {
	if m != nil {
		return m.UniqueID
	}
	return ""
}

func (m *MsgUpdateEnclaveIdentity) GetSignerID() string {
	if m != nil {
		return m.SignerID
	}
	return ""
}

func (m *MsgUpdateEnclaveIdentity) GetProductID() string {
	if m != nil {
		return m.ProductID
	}
	return ""
}

func (m *MsgUpdateEnclaveIdentity) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateEnclaveIdentityResponse struct {
}

func (m *MsgUpdateEnclaveIdentityResponse) Reset()         { *m = MsgUpdateEnclaveIdentityResponse{} }
func (m *MsgUpdateEnclaveIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEnclaveIdentityResponse) ProtoMessage()    {}
func (*MsgUpdateEnclaveIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{15}
}
func (m *MsgUpdateEnclaveIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEnclaveIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEnclaveIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEnclaveIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEnclaveIdentityResponse.Merge(m, src)
}
func (m *MsgUpdateEnclaveIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEnclaveIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEnclaveIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEnclaveIdentityResponse proto.InternalMessageInfo

type MsgPioneerUpdatePioneerJar struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PioneerID    string `protobuf:"bytes,2,opt,name=pioneerID,proto3" json:"pioneerID,omitempty"`
	JarID        string `protobuf:"bytes,3,opt,name=jarID,proto3" json:"jarID,omitempty"`
	RemoteReport []byte `protobuf:"bytes,4,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
}

func (m *MsgPioneerUpdatePioneerJar) Reset()         { *m = MsgPioneerUpdatePioneerJar{} }
func (m *MsgPioneerUpdatePioneerJar) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerUpdatePioneerJar) ProtoMessage()    {}
func (*MsgPioneerUpdatePioneerJar) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{16}
}
func (m *MsgPioneerUpdatePioneerJar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerUpdatePioneerJar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerUpdatePioneerJar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerUpdatePioneerJar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerUpdatePioneerJar.Merge(m, src)
}
func (m *MsgPioneerUpdatePioneerJar) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerUpdatePioneerJar) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerUpdatePioneerJar.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerUpdatePioneerJar proto.InternalMessageInfo

func (m *MsgPioneerUpdatePioneerJar) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPioneerUpdatePioneerJar) GetPioneerID() string {
	if m != nil {
		return m.PioneerID
	}
	return ""
}

func (m *MsgPioneerUpdatePioneerJar) GetJarID() string {
	if m != nil {
		return m.JarID
	}
	return ""
}

func (m *MsgPioneerUpdatePioneerJar) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

type MsgPioneerUpdatePioneerJarResponse struct {
}

func (m *MsgPioneerUpdatePioneerJarResponse) Reset()         { *m = MsgPioneerUpdatePioneerJarResponse{} }
func (m *MsgPioneerUpdatePioneerJarResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerUpdatePioneerJarResponse) ProtoMessage()    {}
func (*MsgPioneerUpdatePioneerJarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{17}
}
func (m *MsgPioneerUpdatePioneerJarResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerUpdatePioneerJarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerUpdatePioneerJarResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerUpdatePioneerJarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerUpdatePioneerJarResponse.Merge(m, src)
}
func (m *MsgPioneerUpdatePioneerJarResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerUpdatePioneerJarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerUpdatePioneerJarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerUpdatePioneerJarResponse proto.InternalMessageInfo

type MsgPioneerUpdateJarRegulator struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	JarID        string `protobuf:"bytes,2,opt,name=jarID,proto3" json:"jarID,omitempty"`
	RegulatorID  string `protobuf:"bytes,3,opt,name=regulatorID,proto3" json:"regulatorID,omitempty"`
	RemoteReport []byte `protobuf:"bytes,4,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
}

func (m *MsgPioneerUpdateJarRegulator) Reset()         { *m = MsgPioneerUpdateJarRegulator{} }
func (m *MsgPioneerUpdateJarRegulator) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerUpdateJarRegulator) ProtoMessage()    {}
func (*MsgPioneerUpdateJarRegulator) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{18}
}
func (m *MsgPioneerUpdateJarRegulator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerUpdateJarRegulator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerUpdateJarRegulator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerUpdateJarRegulator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerUpdateJarRegulator.Merge(m, src)
}
func (m *MsgPioneerUpdateJarRegulator) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerUpdateJarRegulator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerUpdateJarRegulator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerUpdateJarRegulator proto.InternalMessageInfo

func (m *MsgPioneerUpdateJarRegulator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPioneerUpdateJarRegulator) GetJarID() string {
	if m != nil {
		return m.JarID
	}
	return ""
}

func (m *MsgPioneerUpdateJarRegulator) GetRegulatorID() string {
	if m != nil {
		return m.RegulatorID
	}
	return ""
}

func (m *MsgPioneerUpdateJarRegulator) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

type MsgPioneerUpdateJarRegulatorResponse struct {
}

func (m *MsgPioneerUpdateJarRegulatorResponse) Reset()         { *m = MsgPioneerUpdateJarRegulatorResponse{} }
func (m *MsgPioneerUpdateJarRegulatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerUpdateJarRegulatorResponse) ProtoMessage()    {}
func (*MsgPioneerUpdateJarRegulatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{19}
}
func (m *MsgPioneerUpdateJarRegulatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerUpdateJarRegulatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerUpdateJarRegulatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerUpdateJarRegulatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerUpdateJarRegulatorResponse.Merge(m, src)
}
func (m *MsgPioneerUpdateJarRegulatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerUpdateJarRegulatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerUpdateJarRegulatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerUpdateJarRegulatorResponse proto.InternalMessageInfo

type MsgPioneerUpdateEnclaveIdentity struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	UniqueID     string `protobuf:"bytes,2,opt,name=uniqueID,proto3" json:"uniqueID,omitempty"`
	SignerID     string `protobuf:"bytes,3,opt,name=signerID,proto3" json:"signerID,omitempty"`
	ProductID    string `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`
	Status       string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	RemoteReport []byte `protobuf:"bytes,6,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
}

func (m *MsgPioneerUpdateEnclaveIdentity) Reset()         { *m = MsgPioneerUpdateEnclaveIdentity{} }
func (m *MsgPioneerUpdateEnclaveIdentity) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerUpdateEnclaveIdentity) ProtoMessage()    {}
func (*MsgPioneerUpdateEnclaveIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{20}
}
func (m *MsgPioneerUpdateEnclaveIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerUpdateEnclaveIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerUpdateEnclaveIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerUpdateEnclaveIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerUpdateEnclaveIdentity.Merge(m, src)
}
func (m *MsgPioneerUpdateEnclaveIdentity) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerUpdateEnclaveIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerUpdateEnclaveIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerUpdateEnclaveIdentity proto.InternalMessageInfo

func (m *MsgPioneerUpdateEnclaveIdentity) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPioneerUpdateEnclaveIdentity) GetUniqueID() string {
	if m != nil {
		return m.UniqueID
	}
	return ""
}

func (m *MsgPioneerUpdateEnclaveIdentity) GetSignerID() string {
	if m != nil {
		return m.SignerID
	}
	return ""
}

func (m *MsgPioneerUpdateEnclaveIdentity) GetProductID() string {
	if m != nil {
		return m.ProductID
	}
	return ""
}

func (m *MsgPioneerUpdateEnclaveIdentity) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgPioneerUpdateEnclaveIdentity) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

type MsgPioneerUpdateEnclaveIdentityResponse struct {
}

func (m *MsgPioneerUpdateEnclaveIdentityResponse) Reset() {
	*m = MsgPioneerUpdateEnclaveIdentityResponse{}
}
func (m *MsgPioneerUpdateEnclaveIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerUpdateEnclaveIdentityResponse) ProtoMessage()    {}
func (*MsgPioneerUpdateEnclaveIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{21}
}
func (m *MsgPioneerUpdateEnclaveIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerUpdateEnclaveIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerUpdateEnclaveIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerUpdateEnclaveIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerUpdateEnclaveIdentityResponse.Merge(m, src)
}
func (m *MsgPioneerUpdateEnclaveIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerUpdateEnclaveIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerUpdateEnclaveIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerUpdateEnclaveIdentityResponse proto.InternalMessageInfo

type MsgCreateWallet struct {
	Creator                              string                     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	HomePioneerID                        string                     `protobuf:"bytes,2,opt,name=homePioneerID,proto3" json:"homePioneerID,omitempty"`
	ServiceProviderID                    []string                   `protobuf:"bytes,3,rep,name=serviceProviderID,proto3" json:"serviceProviderID,omitempty"`
	EncCreateWalletVShare                []byte                     `protobuf:"bytes,4,opt,name=encCreateWalletVShare,proto3" json:"encCreateWalletVShare,omitempty"`
	CreateWalletVShareBind               *VShareBindData            `protobuf:"bytes,5,opt,name=createWalletVShareBind,proto3" json:"createWalletVShareBind,omitempty"`
	AcceptPasswordPC                     *BPedersenCommit           `protobuf:"bytes,6,opt,name=acceptPasswordPC,proto3" json:"acceptPasswordPC,omitempty"`
	EncAcceptValidatedCredentialsVShare  []byte                     `protobuf:"bytes,7,opt,name=encAcceptValidatedCredentialsVShare,proto3" json:"encAcceptValidatedCredentialsVShare,omitempty"`
	AcceptValidatedCredentialsVShareBind *VShareBindData            `protobuf:"bytes,8,opt,name=acceptValidatedCredentialsVShareBind,proto3" json:"acceptValidatedCredentialsVShareBind,omitempty"`
	WalletAmountPedersenCommit           *EncryptablePedersenCommit `protobuf:"bytes,9,opt,name=walletAmountPedersenCommit,proto3" json:"walletAmountPedersenCommit,omitempty"`
	EncWalletAmountVShare                []byte                     `protobuf:"bytes,10,opt,name=encWalletAmountVShare,proto3" json:"encWalletAmountVShare,omitempty"`
	WalletAmountVShareBind               *VShareBindData            `protobuf:"bytes,11,opt,name=walletAmountVShareBind,proto3" json:"walletAmountVShareBind,omitempty"`
	TransparentWalletAmountPC            *EncryptablePedersenCommit `protobuf:"bytes,12,opt,name=transparentWalletAmountPC,proto3" json:"transparentWalletAmountPC,omitempty"`
	AcceptCredentialType                 string                     `protobuf:"bytes,13,opt,name=acceptCredentialType,proto3" json:"acceptCredentialType,omitempty"`
}

func (m *MsgCreateWallet) Reset()         { *m = MsgCreateWallet{} }
func (m *MsgCreateWallet) String() string { return proto.CompactTextString(m) }
func (*MsgCreateWallet) ProtoMessage()    {}
func (*MsgCreateWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{22}
}
func (m *MsgCreateWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateWallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateWallet.Merge(m, src)
}
func (m *MsgCreateWallet) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateWallet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateWallet proto.InternalMessageInfo

func (m *MsgCreateWallet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateWallet) GetHomePioneerID() string {
	if m != nil {
		return m.HomePioneerID
	}
	return ""
}

func (m *MsgCreateWallet) GetServiceProviderID() []string {
	if m != nil {
		return m.ServiceProviderID
	}
	return nil
}

func (m *MsgCreateWallet) GetEncCreateWalletVShare() []byte {
	if m != nil {
		return m.EncCreateWalletVShare
	}
	return nil
}

func (m *MsgCreateWallet) GetCreateWalletVShareBind() *VShareBindData {
	if m != nil {
		return m.CreateWalletVShareBind
	}
	return nil
}

func (m *MsgCreateWallet) GetAcceptPasswordPC() *BPedersenCommit {
	if m != nil {
		return m.AcceptPasswordPC
	}
	return nil
}

func (m *MsgCreateWallet) GetEncAcceptValidatedCredentialsVShare() []byte {
	if m != nil {
		return m.EncAcceptValidatedCredentialsVShare
	}
	return nil
}

func (m *MsgCreateWallet) GetAcceptValidatedCredentialsVShareBind() *VShareBindData {
	if m != nil {
		return m.AcceptValidatedCredentialsVShareBind
	}
	return nil
}

func (m *MsgCreateWallet) GetWalletAmountPedersenCommit() *EncryptablePedersenCommit {
	if m != nil {
		return m.WalletAmountPedersenCommit
	}
	return nil
}

func (m *MsgCreateWallet) GetEncWalletAmountVShare() []byte {
	if m != nil {
		return m.EncWalletAmountVShare
	}
	return nil
}

func (m *MsgCreateWallet) GetWalletAmountVShareBind() *VShareBindData {
	if m != nil {
		return m.WalletAmountVShareBind
	}
	return nil
}

func (m *MsgCreateWallet) GetTransparentWalletAmountPC() *EncryptablePedersenCommit {
	if m != nil {
		return m.TransparentWalletAmountPC
	}
	return nil
}

func (m *MsgCreateWallet) GetAcceptCredentialType() string {
	if m != nil {
		return m.AcceptCredentialType
	}
	return ""
}

type MsgCreateWalletResponse struct {
}

func (m *MsgCreateWalletResponse) Reset()         { *m = MsgCreateWalletResponse{} }
func (m *MsgCreateWalletResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateWalletResponse) ProtoMessage()    {}
func (*MsgCreateWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{23}
}
func (m *MsgCreateWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateWalletResponse.Merge(m, src)
}
func (m *MsgCreateWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateWalletResponse proto.InternalMessageInfo

type MsgTransferFunds struct {
	Creator                              string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TransactionID                        string           `protobuf:"bytes,2,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	SourcePC                             *BPedersenCommit `protobuf:"bytes,3,opt,name=sourcePC,proto3" json:"sourcePC,omitempty"`
	HiddenTransferPC                     *BPedersenCommit `protobuf:"bytes,4,opt,name=hiddenTransferPC,proto3" json:"hiddenTransferPC,omitempty"`
	NewSourcePC                          *BPedersenCommit `protobuf:"bytes,5,opt,name=newSourcePC,proto3" json:"newSourcePC,omitempty"`
	EncNewSourceWalletAmountVShare       []byte           `protobuf:"bytes,6,opt,name=encNewSourceWalletAmountVShare,proto3" json:"encNewSourceWalletAmountVShare,omitempty"`
	NewSourceWalletAmountVShareBind      *VShareBindData  `protobuf:"bytes,7,opt,name=newSourceWalletAmountVShareBind,proto3" json:"newSourceWalletAmountVShareBind,omitempty"`
	EncNewDestinationWalletAmountVShare  []byte           `protobuf:"bytes,8,opt,name=encNewDestinationWalletAmountVShare,proto3" json:"encNewDestinationWalletAmountVShare,omitempty"`
	NewDestinationWalletAmountVShareBind *VShareBindData  `protobuf:"bytes,9,opt,name=newDestinationWalletAmountVShareBind,proto3" json:"newDestinationWalletAmountVShareBind,omitempty"`
	EncAnonTransferFundsVShare           []byte           `protobuf:"bytes,10,opt,name=encAnonTransferFundsVShare,proto3" json:"encAnonTransferFundsVShare,omitempty"`
	AnonTransferFundsVShareBind          *VShareBindData  `protobuf:"bytes,11,opt,name=anonTransferFundsVShareBind,proto3" json:"anonTransferFundsVShareBind,omitempty"`
	TransparentAmount                    *BInt            `protobuf:"bytes,12,opt,name=transparentAmount,proto3" json:"transparentAmount,omitempty"`
	TokenDenom                           string           `protobuf:"bytes,13,opt,name=tokenDenom,proto3" json:"tokenDenom,omitempty"`
	HiddenTransferPCProof                *BRangeProof     `protobuf:"bytes,14,opt,name=hiddenTransferPCProof,proto3" json:"hiddenTransferPCProof,omitempty"`
	NewSourcePCProof                     *BRangeProof     `protobuf:"bytes,15,opt,name=newSourcePCProof,proto3" json:"newSourcePCProof,omitempty"`
	EncTransferFundsVShare               []byte           `protobuf:"bytes,16,opt,name=encTransferFundsVShare,proto3" json:"encTransferFundsVShare,omitempty"`
	TransferFundsVShareBind              *VShareBindData  `protobuf:"bytes,17,opt,name=transferFundsVShareBind,proto3" json:"transferFundsVShareBind,omitempty"`
}

func (m *MsgTransferFunds) Reset()         { *m = MsgTransferFunds{} }
func (m *MsgTransferFunds) String() string { return proto.CompactTextString(m) }
func (*MsgTransferFunds) ProtoMessage()    {}
func (*MsgTransferFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{24}
}
func (m *MsgTransferFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferFunds.Merge(m, src)
}
func (m *MsgTransferFunds) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferFunds.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferFunds proto.InternalMessageInfo

func (m *MsgTransferFunds) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferFunds) GetTransactionID() string {
	if m != nil {
		return m.TransactionID
	}
	return ""
}

func (m *MsgTransferFunds) GetSourcePC() *BPedersenCommit {
	if m != nil {
		return m.SourcePC
	}
	return nil
}

func (m *MsgTransferFunds) GetHiddenTransferPC() *BPedersenCommit {
	if m != nil {
		return m.HiddenTransferPC
	}
	return nil
}

func (m *MsgTransferFunds) GetNewSourcePC() *BPedersenCommit {
	if m != nil {
		return m.NewSourcePC
	}
	return nil
}

func (m *MsgTransferFunds) GetEncNewSourceWalletAmountVShare() []byte {
	if m != nil {
		return m.EncNewSourceWalletAmountVShare
	}
	return nil
}

func (m *MsgTransferFunds) GetNewSourceWalletAmountVShareBind() *VShareBindData {
	if m != nil {
		return m.NewSourceWalletAmountVShareBind
	}
	return nil
}

func (m *MsgTransferFunds) GetEncNewDestinationWalletAmountVShare() []byte {
	if m != nil {
		return m.EncNewDestinationWalletAmountVShare
	}
	return nil
}

func (m *MsgTransferFunds) GetNewDestinationWalletAmountVShareBind() *VShareBindData {
	if m != nil {
		return m.NewDestinationWalletAmountVShareBind
	}
	return nil
}

func (m *MsgTransferFunds) GetEncAnonTransferFundsVShare() []byte {
	if m != nil {
		return m.EncAnonTransferFundsVShare
	}
	return nil
}

func (m *MsgTransferFunds) GetAnonTransferFundsVShareBind() *VShareBindData {
	if m != nil {
		return m.AnonTransferFundsVShareBind
	}
	return nil
}

func (m *MsgTransferFunds) GetTransparentAmount() *BInt {
	if m != nil {
		return m.TransparentAmount
	}
	return nil
}

func (m *MsgTransferFunds) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

func (m *MsgTransferFunds) GetHiddenTransferPCProof() *BRangeProof {
	if m != nil {
		return m.HiddenTransferPCProof
	}
	return nil
}

func (m *MsgTransferFunds) GetNewSourcePCProof() *BRangeProof {
	if m != nil {
		return m.NewSourcePCProof
	}
	return nil
}

func (m *MsgTransferFunds) GetEncTransferFundsVShare() []byte {
	if m != nil {
		return m.EncTransferFundsVShare
	}
	return nil
}

func (m *MsgTransferFunds) GetTransferFundsVShareBind() *VShareBindData {
	if m != nil {
		return m.TransferFundsVShareBind
	}
	return nil
}

type MsgTransferFundsResponse struct {
}

func (m *MsgTransferFundsResponse) Reset()         { *m = MsgTransferFundsResponse{} }
func (m *MsgTransferFundsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferFundsResponse) ProtoMessage()    {}
func (*MsgTransferFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{25}
}
func (m *MsgTransferFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferFundsResponse.Merge(m, src)
}
func (m *MsgTransferFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferFundsResponse proto.InternalMessageInfo

type MsgReceiveFunds struct {
	Creator                              string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TransactionID                        string           `protobuf:"bytes,2,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	DestinationPC                        *BPedersenCommit `protobuf:"bytes,3,opt,name=destinationPC,proto3" json:"destinationPC,omitempty"`
	HiddenTransferPC                     *BPedersenCommit `protobuf:"bytes,4,opt,name=hiddenTransferPC,proto3" json:"hiddenTransferPC,omitempty"`
	NewDestinationPC                     *BPedersenCommit `protobuf:"bytes,5,opt,name=newDestinationPC,proto3" json:"newDestinationPC,omitempty"`
	EncNewDestinationWalletAmountVShare  []byte           `protobuf:"bytes,6,opt,name=encNewDestinationWalletAmountVShare,proto3" json:"encNewDestinationWalletAmountVShare,omitempty"`
	NewDestinationWalletAmountVShareBind *VShareBindData  `protobuf:"bytes,7,opt,name=newDestinationWalletAmountVShareBind,proto3" json:"newDestinationWalletAmountVShareBind,omitempty"`
	EncAnonReceiveFundsVShare            []byte           `protobuf:"bytes,8,opt,name=encAnonReceiveFundsVShare,proto3" json:"encAnonReceiveFundsVShare,omitempty"`
	AnonReceiveFundsVShareBind           *VShareBindData  `protobuf:"bytes,9,opt,name=anonReceiveFundsVShareBind,proto3" json:"anonReceiveFundsVShareBind,omitempty"`
	TransparentAmount                    *BInt            `protobuf:"bytes,10,opt,name=transparentAmount,proto3" json:"transparentAmount,omitempty"`
	TokenDenom                           string           `protobuf:"bytes,11,opt,name=tokenDenom,proto3" json:"tokenDenom,omitempty"`
	HiddenTransferPCProof                *BRangeProof     `protobuf:"bytes,12,opt,name=hiddenTransferPCProof,proto3" json:"hiddenTransferPCProof,omitempty"`
	NewDestinationPCProof                *BRangeProof     `protobuf:"bytes,13,opt,name=newDestinationPCProof,proto3" json:"newDestinationPCProof,omitempty"`
	EncReceiveFundsVShare                []byte           `protobuf:"bytes,14,opt,name=encReceiveFundsVShare,proto3" json:"encReceiveFundsVShare,omitempty"`
	ReceiveFundsVShareBind               *VShareBindData  `protobuf:"bytes,15,opt,name=receiveFundsVShareBind,proto3" json:"receiveFundsVShareBind,omitempty"`
}

func (m *MsgReceiveFunds) Reset()         { *m = MsgReceiveFunds{} }
func (m *MsgReceiveFunds) String() string { return proto.CompactTextString(m) }
func (*MsgReceiveFunds) ProtoMessage()    {}
func (*MsgReceiveFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{26}
}
func (m *MsgReceiveFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceiveFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceiveFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceiveFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceiveFunds.Merge(m, src)
}
func (m *MsgReceiveFunds) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceiveFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceiveFunds.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceiveFunds proto.InternalMessageInfo

func (m *MsgReceiveFunds) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgReceiveFunds) GetTransactionID() string {
	if m != nil {
		return m.TransactionID
	}
	return ""
}

func (m *MsgReceiveFunds) GetDestinationPC() *BPedersenCommit {
	if m != nil {
		return m.DestinationPC
	}
	return nil
}

func (m *MsgReceiveFunds) GetHiddenTransferPC() *BPedersenCommit {
	if m != nil {
		return m.HiddenTransferPC
	}
	return nil
}

func (m *MsgReceiveFunds) GetNewDestinationPC() *BPedersenCommit {
	if m != nil {
		return m.NewDestinationPC
	}
	return nil
}

func (m *MsgReceiveFunds) GetEncNewDestinationWalletAmountVShare() []byte {
	if m != nil {
		return m.EncNewDestinationWalletAmountVShare
	}
	return nil
}

func (m *MsgReceiveFunds) GetNewDestinationWalletAmountVShareBind() *VShareBindData {
	if m != nil {
		return m.NewDestinationWalletAmountVShareBind
	}
	return nil
}

func (m *MsgReceiveFunds) GetEncAnonReceiveFundsVShare() []byte {
	if m != nil {
		return m.EncAnonReceiveFundsVShare
	}
	return nil
}

func (m *MsgReceiveFunds) GetAnonReceiveFundsVShareBind() *VShareBindData {
	if m != nil {
		return m.AnonReceiveFundsVShareBind
	}
	return nil
}

func (m *MsgReceiveFunds) GetTransparentAmount() *BInt {
	if m != nil {
		return m.TransparentAmount
	}
	return nil
}

func (m *MsgReceiveFunds) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

func (m *MsgReceiveFunds) GetHiddenTransferPCProof() *BRangeProof {
	if m != nil {
		return m.HiddenTransferPCProof
	}
	return nil
}

func (m *MsgReceiveFunds) GetNewDestinationPCProof() *BRangeProof {
	if m != nil {
		return m.NewDestinationPCProof
	}
	return nil
}

func (m *MsgReceiveFunds) GetEncReceiveFundsVShare() []byte {
	if m != nil {
		return m.EncReceiveFundsVShare
	}
	return nil
}

func (m *MsgReceiveFunds) GetReceiveFundsVShareBind() *VShareBindData {
	if m != nil {
		return m.ReceiveFundsVShareBind
	}
	return nil
}

type MsgReceiveFundsResponse struct {
}

func (m *MsgReceiveFundsResponse) Reset()         { *m = MsgReceiveFundsResponse{} }
func (m *MsgReceiveFundsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReceiveFundsResponse) ProtoMessage()    {}
func (*MsgReceiveFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{27}
}
func (m *MsgReceiveFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceiveFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceiveFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceiveFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceiveFundsResponse.Merge(m, src)
}
func (m *MsgReceiveFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceiveFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceiveFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceiveFundsResponse proto.InternalMessageInfo

type MsgDeploySmartContract struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SrcWalletID      string `protobuf:"bytes,2,opt,name=srcWalletID,proto3" json:"srcWalletID,omitempty"`
	SmartContractHex string `protobuf:"bytes,3,opt,name=smartContractHex,proto3" json:"smartContractHex,omitempty"`
}

func (m *MsgDeploySmartContract) Reset()         { *m = MsgDeploySmartContract{} }
func (m *MsgDeploySmartContract) String() string { return proto.CompactTextString(m) }
func (*MsgDeploySmartContract) ProtoMessage()    {}
func (*MsgDeploySmartContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{28}
}
func (m *MsgDeploySmartContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeploySmartContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeploySmartContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeploySmartContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeploySmartContract.Merge(m, src)
}
func (m *MsgDeploySmartContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeploySmartContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeploySmartContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeploySmartContract proto.InternalMessageInfo

func (m *MsgDeploySmartContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeploySmartContract) GetSrcWalletID() string {
	if m != nil {
		return m.SrcWalletID
	}
	return ""
}

func (m *MsgDeploySmartContract) GetSmartContractHex() string {
	if m != nil {
		return m.SmartContractHex
	}
	return ""
}

type MsgDeploySmartContractResponse struct {
}

func (m *MsgDeploySmartContractResponse) Reset()         { *m = MsgDeploySmartContractResponse{} }
func (m *MsgDeploySmartContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeploySmartContractResponse) ProtoMessage()    {}
func (*MsgDeploySmartContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{29}
}
func (m *MsgDeploySmartContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeploySmartContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeploySmartContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeploySmartContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeploySmartContractResponse.Merge(m, src)
}
func (m *MsgDeploySmartContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeploySmartContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeploySmartContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeploySmartContractResponse proto.InternalMessageInfo

type MsgExecuteSmartContract struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SrcWalletID      string `protobuf:"bytes,2,opt,name=srcWalletID,proto3" json:"srcWalletID,omitempty"`
	SmartContractHex string `protobuf:"bytes,3,opt,name=smartContractHex,proto3" json:"smartContractHex,omitempty"`
}

func (m *MsgExecuteSmartContract) Reset()         { *m = MsgExecuteSmartContract{} }
func (m *MsgExecuteSmartContract) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteSmartContract) ProtoMessage()    {}
func (*MsgExecuteSmartContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{30}
}
func (m *MsgExecuteSmartContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteSmartContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteSmartContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteSmartContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteSmartContract.Merge(m, src)
}
func (m *MsgExecuteSmartContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteSmartContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteSmartContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteSmartContract proto.InternalMessageInfo

func (m *MsgExecuteSmartContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgExecuteSmartContract) GetSrcWalletID() string {
	if m != nil {
		return m.SrcWalletID
	}
	return ""
}

func (m *MsgExecuteSmartContract) GetSmartContractHex() string {
	if m != nil {
		return m.SmartContractHex
	}
	return ""
}

type MsgExecuteSmartContractResponse struct {
}

func (m *MsgExecuteSmartContractResponse) Reset()         { *m = MsgExecuteSmartContractResponse{} }
func (m *MsgExecuteSmartContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteSmartContractResponse) ProtoMessage()    {}
func (*MsgExecuteSmartContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{31}
}
func (m *MsgExecuteSmartContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteSmartContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteSmartContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteSmartContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteSmartContractResponse.Merge(m, src)
}
func (m *MsgExecuteSmartContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteSmartContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteSmartContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteSmartContractResponse proto.InternalMessageInfo

type MsgCreateCredential struct {
	Creator                      string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CredentialID                 string           `protobuf:"bytes,2,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
	CredentialType               string           `protobuf:"bytes,3,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
	CredentialPedersenCommit     *BPedersenCommit `protobuf:"bytes,4,opt,name=credentialPedersenCommit,proto3" json:"credentialPedersenCommit,omitempty"`
	EncCredentialInfoVShare      []byte           `protobuf:"bytes,5,opt,name=encCredentialInfoVShare,proto3" json:"encCredentialInfoVShare,omitempty"`
	CredentialInfoVShareBind     *VShareBindData  `protobuf:"bytes,6,opt,name=credentialInfoVShareBind,proto3" json:"credentialInfoVShareBind,omitempty"`
	EncCredentialHashVShare      []byte           `protobuf:"bytes,7,opt,name=encCredentialHashVShare,proto3" json:"encCredentialHashVShare,omitempty"`
	CredentialHashVShareBind     *VShareBindData  `protobuf:"bytes,8,opt,name=credentialHashVShareBind,proto3" json:"credentialHashVShareBind,omitempty"`
	FindCredentialPedersenCommit *BPedersenCommit `protobuf:"bytes,9,opt,name=findCredentialPedersenCommit,proto3" json:"findCredentialPedersenCommit,omitempty"`
	EKYCAppWalletID              string           `protobuf:"bytes,10,opt,name=eKYCAppWalletID,proto3" json:"eKYCAppWalletID,omitempty"`
	ReferenceCredentialID        string           `protobuf:"bytes,11,opt,name=referenceCredentialID,proto3" json:"referenceCredentialID,omitempty"`
}

func (m *MsgCreateCredential) Reset()         { *m = MsgCreateCredential{} }
func (m *MsgCreateCredential) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCredential) ProtoMessage()    {}
func (*MsgCreateCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{32}
}
func (m *MsgCreateCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCredential.Merge(m, src)
}
func (m *MsgCreateCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCredential proto.InternalMessageInfo

func (m *MsgCreateCredential) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateCredential) GetCredentialID() string {
	if m != nil {
		return m.CredentialID
	}
	return ""
}

func (m *MsgCreateCredential) GetCredentialType() string {
	if m != nil {
		return m.CredentialType
	}
	return ""
}

func (m *MsgCreateCredential) GetCredentialPedersenCommit() *BPedersenCommit {
	if m != nil {
		return m.CredentialPedersenCommit
	}
	return nil
}

func (m *MsgCreateCredential) GetEncCredentialInfoVShare() []byte {
	if m != nil {
		return m.EncCredentialInfoVShare
	}
	return nil
}

func (m *MsgCreateCredential) GetCredentialInfoVShareBind() *VShareBindData {
	if m != nil {
		return m.CredentialInfoVShareBind
	}
	return nil
}

func (m *MsgCreateCredential) GetEncCredentialHashVShare() []byte {
	if m != nil {
		return m.EncCredentialHashVShare
	}
	return nil
}

func (m *MsgCreateCredential) GetCredentialHashVShareBind() *VShareBindData {
	if m != nil {
		return m.CredentialHashVShareBind
	}
	return nil
}

func (m *MsgCreateCredential) GetFindCredentialPedersenCommit() *BPedersenCommit {
	if m != nil {
		return m.FindCredentialPedersenCommit
	}
	return nil
}

func (m *MsgCreateCredential) GetEKYCAppWalletID() string {
	if m != nil {
		return m.EKYCAppWalletID
	}
	return ""
}

func (m *MsgCreateCredential) GetReferenceCredentialID() string {
	if m != nil {
		return m.ReferenceCredentialID
	}
	return ""
}

type MsgCreateCredentialResponse struct {
}

func (m *MsgCreateCredentialResponse) Reset()         { *m = MsgCreateCredentialResponse{} }
func (m *MsgCreateCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCredentialResponse) ProtoMessage()    {}
func (*MsgCreateCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{33}
}
func (m *MsgCreateCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCredentialResponse.Merge(m, src)
}
func (m *MsgCreateCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCredentialResponse proto.InternalMessageInfo

type MsgRemoveCredential struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CredentialID   string `protobuf:"bytes,2,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
	CredentialType string `protobuf:"bytes,3,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
}

func (m *MsgRemoveCredential) Reset()         { *m = MsgRemoveCredential{} }
func (m *MsgRemoveCredential) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCredential) ProtoMessage()    {}
func (*MsgRemoveCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{34}
}
func (m *MsgRemoveCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCredential.Merge(m, src)
}
func (m *MsgRemoveCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCredential proto.InternalMessageInfo

func (m *MsgRemoveCredential) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveCredential) GetCredentialID() string {
	if m != nil {
		return m.CredentialID
	}
	return ""
}

func (m *MsgRemoveCredential) GetCredentialType() string {
	if m != nil {
		return m.CredentialType
	}
	return ""
}

type MsgRemoveCredentialResponse struct {
}

func (m *MsgRemoveCredentialResponse) Reset()         { *m = MsgRemoveCredentialResponse{} }
func (m *MsgRemoveCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCredentialResponse) ProtoMessage()    {}
func (*MsgRemoveCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{35}
}
func (m *MsgRemoveCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCredentialResponse.Merge(m, src)
}
func (m *MsgRemoveCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCredentialResponse proto.InternalMessageInfo

type MsgPioneerAddPublicKey struct {
	Creator      string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PubKID       string   `protobuf:"bytes,2,opt,name=pubKID,proto3" json:"pubKID,omitempty"`
	PubK         string   `protobuf:"bytes,3,opt,name=pubK,proto3" json:"pubK,omitempty"`
	PubKType     string   `protobuf:"bytes,4,opt,name=pubKType,proto3" json:"pubKType,omitempty"`
	Shares       []*Share `protobuf:"bytes,5,rep,name=shares,proto3" json:"shares,omitempty"`
	RemoteReport []byte   `protobuf:"bytes,6,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
}

func (m *MsgPioneerAddPublicKey) Reset()         { *m = MsgPioneerAddPublicKey{} }
func (m *MsgPioneerAddPublicKey) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerAddPublicKey) ProtoMessage()    {}
func (*MsgPioneerAddPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{36}
}
func (m *MsgPioneerAddPublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerAddPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerAddPublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerAddPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerAddPublicKey.Merge(m, src)
}
func (m *MsgPioneerAddPublicKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerAddPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerAddPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerAddPublicKey proto.InternalMessageInfo

func (m *MsgPioneerAddPublicKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPioneerAddPublicKey) GetPubKID() string {
	if m != nil {
		return m.PubKID
	}
	return ""
}

func (m *MsgPioneerAddPublicKey) GetPubK() string {
	if m != nil {
		return m.PubK
	}
	return ""
}

func (m *MsgPioneerAddPublicKey) GetPubKType() string {
	if m != nil {
		return m.PubKType
	}
	return ""
}

func (m *MsgPioneerAddPublicKey) GetShares() []*Share {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *MsgPioneerAddPublicKey) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

type MsgPioneerAddPublicKeyResponse struct {
}

func (m *MsgPioneerAddPublicKeyResponse) Reset()         { *m = MsgPioneerAddPublicKeyResponse{} }
func (m *MsgPioneerAddPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerAddPublicKeyResponse) ProtoMessage()    {}
func (*MsgPioneerAddPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{37}
}
func (m *MsgPioneerAddPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerAddPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerAddPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerAddPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerAddPublicKeyResponse.Merge(m, src)
}
func (m *MsgPioneerAddPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerAddPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerAddPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerAddPublicKeyResponse proto.InternalMessageInfo

type MsgPioneerUpdateIntervalPublicKeyID struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PubKID            string `protobuf:"bytes,2,opt,name=pubKID,proto3" json:"pubKID,omitempty"`
	NodeID            string `protobuf:"bytes,3,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NodeType          string `protobuf:"bytes,4,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
	ExternalIPAddress string `protobuf:"bytes,5,opt,name=externalIPAddress,proto3" json:"externalIPAddress,omitempty"`
	RemoteReport      []byte `protobuf:"bytes,6,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
}

func (m *MsgPioneerUpdateIntervalPublicKeyID) Reset()         { *m = MsgPioneerUpdateIntervalPublicKeyID{} }
func (m *MsgPioneerUpdateIntervalPublicKeyID) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerUpdateIntervalPublicKeyID) ProtoMessage()    {}
func (*MsgPioneerUpdateIntervalPublicKeyID) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{38}
}
func (m *MsgPioneerUpdateIntervalPublicKeyID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerUpdateIntervalPublicKeyID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerUpdateIntervalPublicKeyID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerUpdateIntervalPublicKeyID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerUpdateIntervalPublicKeyID.Merge(m, src)
}
func (m *MsgPioneerUpdateIntervalPublicKeyID) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerUpdateIntervalPublicKeyID) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerUpdateIntervalPublicKeyID.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerUpdateIntervalPublicKeyID proto.InternalMessageInfo

func (m *MsgPioneerUpdateIntervalPublicKeyID) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPioneerUpdateIntervalPublicKeyID) GetPubKID() string {
	if m != nil {
		return m.PubKID
	}
	return ""
}

func (m *MsgPioneerUpdateIntervalPublicKeyID) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *MsgPioneerUpdateIntervalPublicKeyID) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *MsgPioneerUpdateIntervalPublicKeyID) GetExternalIPAddress() string {
	if m != nil {
		return m.ExternalIPAddress
	}
	return ""
}

func (m *MsgPioneerUpdateIntervalPublicKeyID) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

type MsgPioneerUpdateIntervalPublicKeyIDResponse struct {
}

func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) Reset() {
	*m = MsgPioneerUpdateIntervalPublicKeyIDResponse{}
}
func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgPioneerUpdateIntervalPublicKeyIDResponse) ProtoMessage() {}
func (*MsgPioneerUpdateIntervalPublicKeyIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{39}
}
func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerUpdateIntervalPublicKeyIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerUpdateIntervalPublicKeyIDResponse.Merge(m, src)
}
func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerUpdateIntervalPublicKeyIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerUpdateIntervalPublicKeyIDResponse proto.InternalMessageInfo

type MsgPioneerEnclaveExchange struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MsgType string `protobuf:"bytes,2,opt,name=msgType,proto3" json:"msgType,omitempty"`
	Msg     string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *MsgPioneerEnclaveExchange) Reset()         { *m = MsgPioneerEnclaveExchange{} }
func (m *MsgPioneerEnclaveExchange) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerEnclaveExchange) ProtoMessage()    {}
func (*MsgPioneerEnclaveExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{40}
}
func (m *MsgPioneerEnclaveExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerEnclaveExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerEnclaveExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerEnclaveExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerEnclaveExchange.Merge(m, src)
}
func (m *MsgPioneerEnclaveExchange) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerEnclaveExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerEnclaveExchange.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerEnclaveExchange proto.InternalMessageInfo

func (m *MsgPioneerEnclaveExchange) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPioneerEnclaveExchange) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func (m *MsgPioneerEnclaveExchange) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type MsgPioneerEnclaveExchangeResponse struct {
}

func (m *MsgPioneerEnclaveExchangeResponse) Reset()         { *m = MsgPioneerEnclaveExchangeResponse{} }
func (m *MsgPioneerEnclaveExchangeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerEnclaveExchangeResponse) ProtoMessage()    {}
func (*MsgPioneerEnclaveExchangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{41}
}
func (m *MsgPioneerEnclaveExchangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerEnclaveExchangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerEnclaveExchangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerEnclaveExchangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerEnclaveExchangeResponse.Merge(m, src)
}
func (m *MsgPioneerEnclaveExchangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerEnclaveExchangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerEnclaveExchangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerEnclaveExchangeResponse proto.InternalMessageInfo

type MsgPioneerBroadcastSecretSharePrivateKey struct {
	Creator      string              `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PrivateKeys  []*SecretSharePrivK `protobuf:"bytes,2,rep,name=privateKeys,proto3" json:"privateKeys,omitempty"`
	RemoteReport []byte              `protobuf:"bytes,3,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
}

func (m *MsgPioneerBroadcastSecretSharePrivateKey) Reset() {
	*m = MsgPioneerBroadcastSecretSharePrivateKey{}
}
func (m *MsgPioneerBroadcastSecretSharePrivateKey) String() string { return proto.CompactTextString(m) }
func (*MsgPioneerBroadcastSecretSharePrivateKey) ProtoMessage()    {}
func (*MsgPioneerBroadcastSecretSharePrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{42}
}
func (m *MsgPioneerBroadcastSecretSharePrivateKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerBroadcastSecretSharePrivateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerBroadcastSecretSharePrivateKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerBroadcastSecretSharePrivateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerBroadcastSecretSharePrivateKey.Merge(m, src)
}
func (m *MsgPioneerBroadcastSecretSharePrivateKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerBroadcastSecretSharePrivateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerBroadcastSecretSharePrivateKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerBroadcastSecretSharePrivateKey proto.InternalMessageInfo

func (m *MsgPioneerBroadcastSecretSharePrivateKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPioneerBroadcastSecretSharePrivateKey) GetPrivateKeys() []*SecretSharePrivK {
	if m != nil {
		return m.PrivateKeys
	}
	return nil
}

func (m *MsgPioneerBroadcastSecretSharePrivateKey) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

type MsgPioneerBroadcastSecretSharePrivateKeyResponse struct {
}

func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) Reset() {
	*m = MsgPioneerBroadcastSecretSharePrivateKeyResponse{}
}
func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgPioneerBroadcastSecretSharePrivateKeyResponse) ProtoMessage() {}
func (*MsgPioneerBroadcastSecretSharePrivateKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{43}
}
func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPioneerBroadcastSecretSharePrivateKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPioneerBroadcastSecretSharePrivateKeyResponse.Merge(m, src)
}
func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPioneerBroadcastSecretSharePrivateKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPioneerBroadcastSecretSharePrivateKeyResponse proto.InternalMessageInfo

type MsgProtectPrivateKey struct {
	Creator      string          `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Threshold    int32           `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	RecoverShare []*RecoverShare `protobuf:"bytes,3,rep,name=recoverShare,proto3" json:"recoverShare,omitempty"`
}

func (m *MsgProtectPrivateKey) Reset()         { *m = MsgProtectPrivateKey{} }
func (m *MsgProtectPrivateKey) String() string { return proto.CompactTextString(m) }
func (*MsgProtectPrivateKey) ProtoMessage()    {}
func (*MsgProtectPrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{44}
}
func (m *MsgProtectPrivateKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProtectPrivateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProtectPrivateKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProtectPrivateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProtectPrivateKey.Merge(m, src)
}
func (m *MsgProtectPrivateKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgProtectPrivateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProtectPrivateKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProtectPrivateKey proto.InternalMessageInfo

func (m *MsgProtectPrivateKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgProtectPrivateKey) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *MsgProtectPrivateKey) GetRecoverShare() []*RecoverShare {
	if m != nil {
		return m.RecoverShare
	}
	return nil
}

type MsgProtectPrivateKeyResponse struct {
}

func (m *MsgProtectPrivateKeyResponse) Reset()         { *m = MsgProtectPrivateKeyResponse{} }
func (m *MsgProtectPrivateKeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProtectPrivateKeyResponse) ProtoMessage()    {}
func (*MsgProtectPrivateKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{45}
}
func (m *MsgProtectPrivateKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProtectPrivateKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProtectPrivateKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProtectPrivateKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProtectPrivateKeyResponse.Merge(m, src)
}
func (m *MsgProtectPrivateKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProtectPrivateKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProtectPrivateKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProtectPrivateKeyResponse proto.InternalMessageInfo

type MsgSignRecoverPrivateKey struct {
	Creator                        string          `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	EncDestinationEWalletIDVShare  []byte          `protobuf:"bytes,2,opt,name=encDestinationEWalletIDVShare,proto3" json:"encDestinationEWalletIDVShare,omitempty"`
	DestinationEWalletIDVShareBind *VShareBindData `protobuf:"bytes,3,opt,name=destinationEWalletIDVShareBind,proto3" json:"destinationEWalletIDVShareBind,omitempty"`
	RecoverShare                   *RecoverShare   `protobuf:"bytes,4,opt,name=recoverShare,proto3" json:"recoverShare,omitempty"`
}

func (m *MsgSignRecoverPrivateKey) Reset()         { *m = MsgSignRecoverPrivateKey{} }
func (m *MsgSignRecoverPrivateKey) String() string { return proto.CompactTextString(m) }
func (*MsgSignRecoverPrivateKey) ProtoMessage()    {}
func (*MsgSignRecoverPrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{46}
}
func (m *MsgSignRecoverPrivateKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignRecoverPrivateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignRecoverPrivateKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignRecoverPrivateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignRecoverPrivateKey.Merge(m, src)
}
func (m *MsgSignRecoverPrivateKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignRecoverPrivateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignRecoverPrivateKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignRecoverPrivateKey proto.InternalMessageInfo

func (m *MsgSignRecoverPrivateKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSignRecoverPrivateKey) GetEncDestinationEWalletIDVShare() []byte {
	if m != nil {
		return m.EncDestinationEWalletIDVShare
	}
	return nil
}

func (m *MsgSignRecoverPrivateKey) GetDestinationEWalletIDVShareBind() *VShareBindData {
	if m != nil {
		return m.DestinationEWalletIDVShareBind
	}
	return nil
}

func (m *MsgSignRecoverPrivateKey) GetRecoverShare() *RecoverShare {
	if m != nil {
		return m.RecoverShare
	}
	return nil
}

type MsgSignRecoverPrivateKeyResponse struct {
}

func (m *MsgSignRecoverPrivateKeyResponse) Reset()         { *m = MsgSignRecoverPrivateKeyResponse{} }
func (m *MsgSignRecoverPrivateKeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignRecoverPrivateKeyResponse) ProtoMessage()    {}
func (*MsgSignRecoverPrivateKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{47}
}
func (m *MsgSignRecoverPrivateKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignRecoverPrivateKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignRecoverPrivateKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignRecoverPrivateKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignRecoverPrivateKeyResponse.Merge(m, src)
}
func (m *MsgSignRecoverPrivateKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignRecoverPrivateKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignRecoverPrivateKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignRecoverPrivateKeyResponse proto.InternalMessageInfo

type MsgClaimCredential struct {
	Creator                             string          `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CredentialID                        string          `protobuf:"bytes,2,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
	CredentialType                      string          `protobuf:"bytes,3,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
	RecoverKey                          bool            `protobuf:"varint,4,opt,name=recoverKey,proto3" json:"recoverKey,omitempty"`
	EncClaimCredentialExtraParmsVShare  []byte          `protobuf:"bytes,5,opt,name=encClaimCredentialExtraParmsVShare,proto3" json:"encClaimCredentialExtraParmsVShare,omitempty"`
	ClaimCredentialExtraParmsVShareBind *VShareBindData `protobuf:"bytes,6,opt,name=claimCredentialExtraParmsVShareBind,proto3" json:"claimCredentialExtraParmsVShareBind,omitempty"`
}

func (m *MsgClaimCredential) Reset()         { *m = MsgClaimCredential{} }
func (m *MsgClaimCredential) String() string { return proto.CompactTextString(m) }
func (*MsgClaimCredential) ProtoMessage()    {}
func (*MsgClaimCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{48}
}
func (m *MsgClaimCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimCredential.Merge(m, src)
}
func (m *MsgClaimCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimCredential proto.InternalMessageInfo

func (m *MsgClaimCredential) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimCredential) GetCredentialID() string {
	if m != nil {
		return m.CredentialID
	}
	return ""
}

func (m *MsgClaimCredential) GetCredentialType() string {
	if m != nil {
		return m.CredentialType
	}
	return ""
}

func (m *MsgClaimCredential) GetRecoverKey() bool {
	if m != nil {
		return m.RecoverKey
	}
	return false
}

func (m *MsgClaimCredential) GetEncClaimCredentialExtraParmsVShare() []byte {
	if m != nil {
		return m.EncClaimCredentialExtraParmsVShare
	}
	return nil
}

func (m *MsgClaimCredential) GetClaimCredentialExtraParmsVShareBind() *VShareBindData {
	if m != nil {
		return m.ClaimCredentialExtraParmsVShareBind
	}
	return nil
}

type MsgClaimCredentialResponse struct {
}

func (m *MsgClaimCredentialResponse) Reset()         { *m = MsgClaimCredentialResponse{} }
func (m *MsgClaimCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimCredentialResponse) ProtoMessage()    {}
func (*MsgClaimCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{49}
}
func (m *MsgClaimCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimCredentialResponse.Merge(m, src)
}
func (m *MsgClaimCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimCredentialResponse proto.InternalMessageInfo

type MsgCreateBulkCredentials struct {
	Creator                  string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CredentialType           string            `protobuf:"bytes,2,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
	CredentialInfoVShareBind *VShareBindData   `protobuf:"bytes,3,opt,name=credentialInfoVShareBind,proto3" json:"credentialInfoVShareBind,omitempty"`
	CredentialHashVShareBind *VShareBindData   `protobuf:"bytes,4,opt,name=credentialHashVShareBind,proto3" json:"credentialHashVShareBind,omitempty"`
	EKYCAppWalletID          string            `protobuf:"bytes,5,opt,name=eKYCAppWalletID,proto3" json:"eKYCAppWalletID,omitempty"`
	BulkCredentials          []*BulkCredential `protobuf:"bytes,6,rep,name=bulkCredentials,proto3" json:"bulkCredentials,omitempty"`
}

func (m *MsgCreateBulkCredentials) Reset()         { *m = MsgCreateBulkCredentials{} }
func (m *MsgCreateBulkCredentials) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBulkCredentials) ProtoMessage()    {}
func (*MsgCreateBulkCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{50}
}
func (m *MsgCreateBulkCredentials) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBulkCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBulkCredentials.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBulkCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBulkCredentials.Merge(m, src)
}
func (m *MsgCreateBulkCredentials) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBulkCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBulkCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBulkCredentials proto.InternalMessageInfo

func (m *MsgCreateBulkCredentials) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateBulkCredentials) GetCredentialType() string {
	if m != nil {
		return m.CredentialType
	}
	return ""
}

func (m *MsgCreateBulkCredentials) GetCredentialInfoVShareBind() *VShareBindData {
	if m != nil {
		return m.CredentialInfoVShareBind
	}
	return nil
}

func (m *MsgCreateBulkCredentials) GetCredentialHashVShareBind() *VShareBindData {
	if m != nil {
		return m.CredentialHashVShareBind
	}
	return nil
}

func (m *MsgCreateBulkCredentials) GetEKYCAppWalletID() string {
	if m != nil {
		return m.EKYCAppWalletID
	}
	return ""
}

func (m *MsgCreateBulkCredentials) GetBulkCredentials() []*BulkCredential {
	if m != nil {
		return m.BulkCredentials
	}
	return nil
}

type MsgCreateBulkCredentialsResponse struct {
}

func (m *MsgCreateBulkCredentialsResponse) Reset()         { *m = MsgCreateBulkCredentialsResponse{} }
func (m *MsgCreateBulkCredentialsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBulkCredentialsResponse) ProtoMessage()    {}
func (*MsgCreateBulkCredentialsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c730eedddf2fae3b, []int{51}
}
func (m *MsgCreateBulkCredentialsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBulkCredentialsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBulkCredentialsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBulkCredentialsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBulkCredentialsResponse.Merge(m, src)
}
func (m *MsgCreateBulkCredentialsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBulkCredentialsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBulkCredentialsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBulkCredentialsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "qadena.qadena.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "qadena.qadena.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateSuspiciousTransaction)(nil), "qadena.qadena.MsgCreateSuspiciousTransaction")
	proto.RegisterType((*MsgCreateSuspiciousTransactionResponse)(nil), "qadena.qadena.MsgCreateSuspiciousTransactionResponse")
	proto.RegisterType((*MsgUpdateSuspiciousTransaction)(nil), "qadena.qadena.MsgUpdateSuspiciousTransaction")
	proto.RegisterType((*MsgUpdateSuspiciousTransactionResponse)(nil), "qadena.qadena.MsgUpdateSuspiciousTransactionResponse")
	proto.RegisterType((*MsgDeleteSuspiciousTransaction)(nil), "qadena.qadena.MsgDeleteSuspiciousTransaction")
	proto.RegisterType((*MsgDeleteSuspiciousTransactionResponse)(nil), "qadena.qadena.MsgDeleteSuspiciousTransactionResponse")
	proto.RegisterType((*MsgAddPublicKey)(nil), "qadena.qadena.MsgAddPublicKey")
	proto.RegisterType((*MsgAddPublicKeyResponse)(nil), "qadena.qadena.MsgAddPublicKeyResponse")
	proto.RegisterType((*MsgAddServiceProvider)(nil), "qadena.qadena.MsgAddServiceProvider")
	proto.RegisterType((*MsgAddServiceProviderResponse)(nil), "qadena.qadena.MsgAddServiceProviderResponse")
	proto.RegisterType((*MsgDeactivateServiceProvider)(nil), "qadena.qadena.MsgDeactivateServiceProvider")
	proto.RegisterType((*MsgDeactivateServiceProviderResponse)(nil), "qadena.qadena.MsgDeactivateServiceProviderResponse")
	proto.RegisterType((*MsgUpdateEnclaveIdentity)(nil), "qadena.qadena.MsgUpdateEnclaveIdentity")
	proto.RegisterType((*MsgUpdateEnclaveIdentityResponse)(nil), "qadena.qadena.MsgUpdateEnclaveIdentityResponse")
	proto.RegisterType((*MsgPioneerUpdatePioneerJar)(nil), "qadena.qadena.MsgPioneerUpdatePioneerJar")
	proto.RegisterType((*MsgPioneerUpdatePioneerJarResponse)(nil), "qadena.qadena.MsgPioneerUpdatePioneerJarResponse")
	proto.RegisterType((*MsgPioneerUpdateJarRegulator)(nil), "qadena.qadena.MsgPioneerUpdateJarRegulator")
	proto.RegisterType((*MsgPioneerUpdateJarRegulatorResponse)(nil), "qadena.qadena.MsgPioneerUpdateJarRegulatorResponse")
	proto.RegisterType((*MsgPioneerUpdateEnclaveIdentity)(nil), "qadena.qadena.MsgPioneerUpdateEnclaveIdentity")
	proto.RegisterType((*MsgPioneerUpdateEnclaveIdentityResponse)(nil), "qadena.qadena.MsgPioneerUpdateEnclaveIdentityResponse")
	proto.RegisterType((*MsgCreateWallet)(nil), "qadena.qadena.MsgCreateWallet")
	proto.RegisterType((*MsgCreateWalletResponse)(nil), "qadena.qadena.MsgCreateWalletResponse")
	proto.RegisterType((*MsgTransferFunds)(nil), "qadena.qadena.MsgTransferFunds")
	proto.RegisterType((*MsgTransferFundsResponse)(nil), "qadena.qadena.MsgTransferFundsResponse")
	proto.RegisterType((*MsgReceiveFunds)(nil), "qadena.qadena.MsgReceiveFunds")
	proto.RegisterType((*MsgReceiveFundsResponse)(nil), "qadena.qadena.MsgReceiveFundsResponse")
	proto.RegisterType((*MsgDeploySmartContract)(nil), "qadena.qadena.MsgDeploySmartContract")
	proto.RegisterType((*MsgDeploySmartContractResponse)(nil), "qadena.qadena.MsgDeploySmartContractResponse")
	proto.RegisterType((*MsgExecuteSmartContract)(nil), "qadena.qadena.MsgExecuteSmartContract")
	proto.RegisterType((*MsgExecuteSmartContractResponse)(nil), "qadena.qadena.MsgExecuteSmartContractResponse")
	proto.RegisterType((*MsgCreateCredential)(nil), "qadena.qadena.MsgCreateCredential")
	proto.RegisterType((*MsgCreateCredentialResponse)(nil), "qadena.qadena.MsgCreateCredentialResponse")
	proto.RegisterType((*MsgRemoveCredential)(nil), "qadena.qadena.MsgRemoveCredential")
	proto.RegisterType((*MsgRemoveCredentialResponse)(nil), "qadena.qadena.MsgRemoveCredentialResponse")
	proto.RegisterType((*MsgPioneerAddPublicKey)(nil), "qadena.qadena.MsgPioneerAddPublicKey")
	proto.RegisterType((*MsgPioneerAddPublicKeyResponse)(nil), "qadena.qadena.MsgPioneerAddPublicKeyResponse")
	proto.RegisterType((*MsgPioneerUpdateIntervalPublicKeyID)(nil), "qadena.qadena.MsgPioneerUpdateIntervalPublicKeyID")
	proto.RegisterType((*MsgPioneerUpdateIntervalPublicKeyIDResponse)(nil), "qadena.qadena.MsgPioneerUpdateIntervalPublicKeyIDResponse")
	proto.RegisterType((*MsgPioneerEnclaveExchange)(nil), "qadena.qadena.MsgPioneerEnclaveExchange")
	proto.RegisterType((*MsgPioneerEnclaveExchangeResponse)(nil), "qadena.qadena.MsgPioneerEnclaveExchangeResponse")
	proto.RegisterType((*MsgPioneerBroadcastSecretSharePrivateKey)(nil), "qadena.qadena.MsgPioneerBroadcastSecretSharePrivateKey")
	proto.RegisterType((*MsgPioneerBroadcastSecretSharePrivateKeyResponse)(nil), "qadena.qadena.MsgPioneerBroadcastSecretSharePrivateKeyResponse")
	proto.RegisterType((*MsgProtectPrivateKey)(nil), "qadena.qadena.MsgProtectPrivateKey")
	proto.RegisterType((*MsgProtectPrivateKeyResponse)(nil), "qadena.qadena.MsgProtectPrivateKeyResponse")
	proto.RegisterType((*MsgSignRecoverPrivateKey)(nil), "qadena.qadena.MsgSignRecoverPrivateKey")
	proto.RegisterType((*MsgSignRecoverPrivateKeyResponse)(nil), "qadena.qadena.MsgSignRecoverPrivateKeyResponse")
	proto.RegisterType((*MsgClaimCredential)(nil), "qadena.qadena.MsgClaimCredential")
	proto.RegisterType((*MsgClaimCredentialResponse)(nil), "qadena.qadena.MsgClaimCredentialResponse")
	proto.RegisterType((*MsgCreateBulkCredentials)(nil), "qadena.qadena.MsgCreateBulkCredentials")
	proto.RegisterType((*MsgCreateBulkCredentialsResponse)(nil), "qadena.qadena.MsgCreateBulkCredentialsResponse")
}

func init() { proto.RegisterFile("qadena/qadena/tx.proto", fileDescriptor_c730eedddf2fae3b) }

var fileDescriptor_c730eedddf2fae3b = []byte{
	// 2822 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x4f, 0x7b, 0xfc, 0xf9, 0x6c, 0xc7, 0x76, 0xc5, 0x76, 0xc6, 0x1d, 0x67, 0xec, 0x8c, 0xb3,
	0xb1, 0xd7, 0xc9, 0xda, 0xbb, 0x0e, 0x2c, 0x51, 0x84, 0xd8, 0xf5, 0xd7, 0xb2, 0xde, 0x28, 0xcb,
	0xa8, 0xbd, 0x49, 0x36, 0x2b, 0xa1, 0x51, 0x4f, 0x77, 0x79, 0xa6, 0xc9, 0x4c, 0xf5, 0xa4, 0xbb,
	0x67, 0x6c, 0x1f, 0x40, 0x2b, 0x0e, 0x48, 0x70, 0x80, 0x08, 0xae, 0x70, 0x80, 0x13, 0xc7, 0x48,
	0x20, 0x24, 0x2e, 0x48, 0xdc, 0xf6, 0x82, 0x88, 0xe0, 0x82, 0x40, 0x02, 0x94, 0x1c, 0x22, 0xc4,
	0x3f, 0x81, 0xba, 0xba, 0xa6, 0xa6, 0xbb, 0xba, 0xba, 0xa7, 0xed, 0x78, 0x23, 0x2e, 0xf6, 0x74,
	0xd5, 0xaf, 0x5e, 0xbd, 0x8f, 0x5f, 0xbd, 0x7e, 0x55, 0xd5, 0x30, 0xfb, 0x58, 0x37, 0x31, 0xd1,
	0xd7, 0xd9, 0x3f, 0xef, 0x68, 0xad, 0xe9, 0xd8, 0x9e, 0x8d, 0xc6, 0x83, 0x86, 0xb5, 0xe0, 0x9f,
	0x3a, 0xa5, 0x37, 0x2c, 0x62, 0xaf, 0xd3, 0xbf, 0x01, 0x42, 0xbd, 0x68, 0xd8, 0x6e, 0xc3, 0x76,
	0xd7, 0x1b, 0x6e, 0x75, 0xbd, 0xfd, 0x8e, 0xff, 0x8f, 0x75, 0xcc, 0x05, 0x1d, 0x65, 0xfa, 0xb4,
	0x1e, 0x3c, 0xb0, 0xae, 0xe9, 0xaa, 0x5d, 0xb5, 0x83, 0x76, 0xff, 0x17, 0x6b, 0x55, 0xa3, 0x3a,
	0x34, 0x75, 0x47, 0x6f, 0x74, 0x46, 0xac, 0x46, 0xfb, 0xdc, 0x96, 0xdb, 0xb4, 0x0c, 0xcb, 0x6e,
	0xb9, 0x65, 0xcf, 0xd1, 0x89, 0xab, 0x1b, 0x9e, 0x65, 0x13, 0x86, 0x5d, 0x12, 0xe4, 0x60, 0x13,
	0x3b, 0x2e, 0x26, 0x65, 0xc3, 0x6e, 0x34, 0x2c, 0x8f, 0x81, 0x2e, 0x47, 0x41, 0x15, 0x8b, 0x98,
	0x65, 0x53, 0xf7, 0x74, 0xd6, 0xbd, 0x10, 0xed, 0x76, 0x74, 0x52, 0xc5, 0xbe, 0x25, 0xf6, 0x01,
	0x03, 0xbc, 0x21, 0x8c, 0x2f, 0xcb, 0xa7, 0x11, 0x60, 0xed, 0xb2, 0x5b, 0xd3, 0x1d, 0x5c, 0x16,
	0xa7, 0x9b, 0x13, 0xcc, 0xf3, 0x41, 0xac, 0x6b, 0x59, 0xe8, 0xc2, 0x86, 0x83, 0x3d, 0x26, 0xa6,
	0xe9, 0x58, 0xed, 0xf2, 0x23, 0x06, 0xbc, 0x22, 0xa8, 0x8c, 0x0d, 0xbb, 0x8d, 0x9d, 0x72, 0x58,
	0x96, 0xe0, 0x99, 0x4a, 0xab, 0xfe, 0xa8, 0x6c, 0x38, 0xd8, 0xc4, 0xc4, 0xb3, 0xf4, 0xba, 0x3c,
	0x0c, 0x15, 0xab, 0x6a, 0x91, 0x8e, 0x39, 0x0b, 0x55, 0xdb, 0xae, 0xd6, 0xf1, 0x3a, 0x7d, 0xaa,
	0xb4, 0x0e, 0xd6, 0x3d, 0xab, 0x81, 0x5d, 0x4f, 0x6f, 0x34, 0x03, 0x40, 0xf1, 0x4f, 0x0a, 0x4c,
	0xdc, 0x75, 0xab, 0xf7, 0x9a, 0xa6, 0xee, 0xe1, 0x12, 0x8d, 0x20, 0x7a, 0x17, 0x46, 0xf4, 0x96,
	0x57, 0xb3, 0x1d, 0xcb, 0x3b, 0xce, 0x2b, 0x8b, 0xca, 0xca, 0xc8, 0x56, 0xfe, 0x2f, 0xbf, 0x7d,
	0x6b, 0x9a, 0x51, 0x62, 0xd3, 0x34, 0x1d, 0xec, 0xba, 0xfb, 0x9e, 0x63, 0x91, 0xaa, 0xd6, 0x85,
	0xa2, 0x5b, 0x30, 0x18, 0x70, 0x20, 0xdf, 0xb7, 0xa8, 0xac, 0x8c, 0x6e, 0xcc, 0xac, 0x45, 0xc8,
	0xb8, 0x16, 0x88, 0xdf, 0x1a, 0xf9, 0xe2, 0x9f, 0x0b, 0xe7, 0x7e, 0xfd, 0xf2, 0xe9, 0xaa, 0xa2,
	0x31, 0xfc, 0xed, 0x0f, 0xbf, 0xff, 0xf2, 0xe9, 0x6a, 0x57, 0xd2, 0x8f, 0x5e, 0x3e, 0x5d, 0xfd,
	0x6a, 0xd5, 0xf2, 0x6a, 0xad, 0xca, 0x9a, 0x61, 0x37, 0xd6, 0x8d, 0x9b, 0x8f, 0x3d, 0x6c, 0xd4,
	0x98, 0x85, 0xe5, 0xf6, 0xcd, 0xf5, 0xa3, 0x8e, 0xb5, 0x82, 0xee, 0xc5, 0x39, 0xb8, 0x28, 0x34,
	0x69, 0xd8, 0x6d, 0xda, 0xc4, 0xc5, 0xc5, 0xcf, 0xfb, 0xa1, 0x70, 0xd7, 0xad, 0x6e, 0x3b, 0x58,
	0xf7, 0xf0, 0x3e, 0x27, 0xe4, 0x27, 0x5d, 0x3e, 0xa2, 0x3c, 0x0c, 0x19, 0x7e, 0xb7, 0xed, 0x04,
	0x76, 0x6b, 0x9d, 0x47, 0x34, 0x0d, 0x03, 0xdf, 0xd1, 0x9d, 0xbd, 0x1d, 0x6a, 0xda, 0x88, 0x16,
	0x3c, 0xa0, 0x15, 0x98, 0x70, 0x70, 0xb5, 0x55, 0xf7, 0x21, 0xa5, 0x56, 0xe5, 0xce, 0xde, 0x4e,
	0x3e, 0x47, 0xfb, 0xc5, 0x66, 0x34, 0x0b, 0x83, 0x0e, 0xd6, 0x5d, 0x9b, 0xe4, 0xfb, 0x29, 0x80,
	0x3d, 0xa1, 0x5b, 0xd0, 0xef, 0x87, 0x24, 0x3f, 0x40, 0x3d, 0xa6, 0xae, 0x05, 0xf1, 0x5a, 0xeb,
	0xc4, 0x6b, 0xed, 0x93, 0x4e, 0xbc, 0xb6, 0x86, 0x7d, 0xb7, 0x3d, 0xf9, 0xd7, 0x82, 0xa2, 0xd1,
	0x11, 0xe8, 0x63, 0x28, 0x62, 0x62, 0xec, 0xdb, 0x2d, 0xc7, 0xc0, 0x25, 0xec, 0xb8, 0x36, 0xd1,
	0xeb, 0x7b, 0xe4, 0xc0, 0xd6, 0xc2, 0x33, 0xe7, 0x07, 0x17, 0x95, 0x95, 0x31, 0x2d, 0x03, 0x12,
	0x7d, 0x0a, 0xcb, 0x98, 0x18, 0x3b, 0xd8, 0xf5, 0x2c, 0xa2, 0xfb, 0xde, 0x48, 0x16, 0x3a, 0x44,
	0x85, 0x66, 0x85, 0xa3, 0x5b, 0x70, 0x11, 0x13, 0x63, 0x77, 0xb3, 0x61, 0xb7, 0x88, 0x17, 0x95,
	0x34, 0x4c, 0x25, 0x25, 0x75, 0xa3, 0xf7, 0xe1, 0x12, 0x26, 0xc6, 0xb7, 0x9a, 0xde, 0x1e, 0xd1,
	0xa8, 0xbf, 0xa2, 0xa3, 0x47, 0xe8, 0xe8, 0x34, 0xc8, 0xed, 0x31, 0x9f, 0x59, 0x9d, 0x28, 0x16,
	0x6f, 0xc1, 0xb5, 0x74, 0x06, 0x74, 0xc8, 0x82, 0xce, 0x43, 0x9f, 0x65, 0x52, 0x12, 0xf4, 0x6b,
	0x7d, 0x96, 0x59, 0x7c, 0x12, 0x90, 0x27, 0x20, 0xd6, 0x49, 0xc9, 0x13, 0x08, 0xeb, 0xeb, 0x08,
	0xeb, 0x92, 0x29, 0xd7, 0x83, 0x4c, 0xfd, 0xbd, 0xc8, 0x34, 0x20, 0x25, 0xd3, 0xe0, 0x97, 0x44,
	0xa6, 0xa1, 0x2f, 0x83, 0x4c, 0xc3, 0x67, 0x46, 0xa6, 0x91, 0x57, 0x22, 0x13, 0x9c, 0x94, 0x4c,
	0x2b, 0x94, 0x4c, 0x29, 0x8c, 0xe0, 0x99, 0xe7, 0x53, 0xca, 0x9d, 0x1d, 0x5c, 0xc7, 0xaf, 0xcc,
	0x1d, 0xa9, 0x0e, 0x29, 0x92, 0xb9, 0x0e, 0x16, 0xcd, 0xf3, 0x9b, 0xa6, 0x59, 0x6a, 0x55, 0xea,
	0x96, 0x71, 0x07, 0x1f, 0xa7, 0x4c, 0x8a, 0xa0, 0xbf, 0xe9, 0xfb, 0x24, 0x48, 0x76, 0xf4, 0x37,
	0x52, 0x61, 0xd8, 0xff, 0xff, 0xc9, 0x71, 0x13, 0x33, 0xde, 0xf2, 0x67, 0x41, 0xa9, 0x20, 0x07,
	0x87, 0xa7, 0xe2, 0x5a, 0xfc, 0x51, 0x81, 0x99, 0xa0, 0x6f, 0x1f, 0x3b, 0x6d, 0xcb, 0xc0, 0x25,
	0xc7, 0x6e, 0x5b, 0x26, 0x76, 0x4e, 0xfd, 0xd2, 0x99, 0x85, 0xc1, 0x66, 0xb0, 0x58, 0x02, 0x65,
	0xd9, 0x93, 0xdf, 0x4e, 0x6c, 0x13, 0xf3, 0x45, 0xc6, 0x9e, 0xd0, 0xdb, 0x70, 0xc1, 0x8d, 0x4e,
	0x4d, 0x2d, 0x0a, 0x56, 0x9a, 0xac, 0xeb, 0xf6, 0xf9, 0xe8, 0xcb, 0xa9, 0xb8, 0x00, 0x97, 0xa5,
	0x26, 0x70, 0x23, 0xbf, 0x07, 0xf3, 0x34, 0x28, 0x7e, 0x04, 0xda, 0x3e, 0x39, 0xce, 0xce, 0x54,
	0x66, 0x52, 0x5f, 0xd8, 0xa4, 0x98, 0x82, 0xd7, 0xe0, 0x6a, 0xda, 0xfc, 0x5c, 0xcf, 0x67, 0x0a,
	0xe4, 0x39, 0x83, 0x77, 0x89, 0x51, 0xd7, 0xdb, 0x78, 0x8f, 0xd6, 0x16, 0xde, 0xf1, 0xa9, 0x95,
	0x54, 0x61, 0xb8, 0x45, 0xac, 0xc7, 0xad, 0xae, 0x9a, 0xfc, 0xd9, 0xef, 0x73, 0xad, 0x2a, 0xc1,
	0xdd, 0xd4, 0xc7, 0x9f, 0xd1, 0x3c, 0x8c, 0x34, 0x1d, 0xdb, 0x6c, 0x19, 0x1e, 0xcf, 0x7b, 0xdd,
	0x06, 0xdf, 0x74, 0xd7, 0xd3, 0xbd, 0x96, 0xdb, 0xc9, 0x78, 0xc1, 0x53, 0xcc, 0xf4, 0x22, 0x2c,
	0x26, 0x59, 0xc4, 0xcd, 0xfe, 0xb9, 0x02, 0xea, 0x5d, 0xb7, 0x5a, 0xb2, 0x6c, 0x82, 0xb1, 0xc3,
	0x4a, 0x85, 0xe0, 0xe1, 0x23, 0xdd, 0x49, 0x59, 0x15, 0xbe, 0x8a, 0x01, 0x8e, 0xdb, 0xd6, 0x6d,
	0x48, 0x48, 0xea, 0x45, 0x18, 0x73, 0x70, 0xc3, 0xf6, 0xb0, 0x86, 0x9b, 0xb6, 0xe3, 0x51, 0xcb,
	0xc6, 0xb4, 0x48, 0x9b, 0xb0, 0x7a, 0xae, 0x42, 0x31, 0x59, 0x3b, 0x6e, 0xc4, 0xaf, 0x14, 0x4a,
	0xb2, 0x08, 0x8c, 0xf6, 0xb3, 0x7c, 0x75, 0xe2, 0x52, 0x66, 0x11, 0x46, 0xf9, 0x6b, 0x86, 0x1b,
	0x11, 0x6e, 0x3a, 0x85, 0x29, 0x01, 0x11, 0x13, 0x75, 0xe4, 0xc6, 0xfc, 0x43, 0x81, 0x05, 0x11,
	0x28, 0xf2, 0x31, 0xd9, 0x9e, 0xd7, 0xca, 0xb8, 0x98, 0x17, 0x06, 0x7b, 0x7a, 0xe1, 0x4d, 0x58,
	0xee, 0x61, 0x1c, 0x77, 0xc4, 0x1f, 0x86, 0x68, 0x96, 0x0e, 0x0a, 0x94, 0x07, 0x7a, 0xbd, 0x8e,
	0xbd, 0x14, 0xc3, 0xaf, 0xc2, 0x78, 0xcd, 0x6e, 0x74, 0xd8, 0xc1, 0xad, 0x8f, 0x36, 0xa2, 0x1b,
	0x30, 0x25, 0x64, 0x35, 0xea, 0x8b, 0xdc, 0xca, 0x88, 0x16, 0xef, 0x40, 0x5f, 0x81, 0x19, 0x4c,
	0x8c, 0xb0, 0x02, 0xf7, 0xf7, 0xfd, 0x0d, 0x09, 0x8b, 0xb6, 0xbc, 0x13, 0xdd, 0x83, 0x59, 0x23,
	0xd6, 0xba, 0x65, 0x11, 0x93, 0xd5, 0xb5, 0x97, 0x85, 0x9d, 0x40, 0x17, 0xb0, 0xa3, 0x7b, 0xba,
	0x96, 0x30, 0x18, 0x7d, 0x04, 0x93, 0xba, 0x61, 0xe0, 0xa6, 0x57, 0xd2, 0x5d, 0xf7, 0xd0, 0x76,
	0xcc, 0xd2, 0x36, 0xab, 0x6d, 0x0a, 0x82, 0xc0, 0xad, 0x12, 0xdb, 0xcd, 0x6d, 0xd3, 0xcd, 0x9c,
	0x16, 0x1b, 0x87, 0x4a, 0xb0, 0x84, 0x89, 0xb1, 0x49, 0x9b, 0xef, 0xeb, 0x75, 0xcb, 0x0f, 0x83,
	0xb9, 0xcd, 0xf7, 0x52, 0x2e, 0x33, 0x33, 0x28, 0x71, 0xb2, 0x40, 0xd1, 0x63, 0xb8, 0xaa, 0xf7,
	0xc0, 0x50, 0x17, 0x0c, 0x67, 0x71, 0x41, 0x26, 0x51, 0xa8, 0x06, 0xea, 0x21, 0x75, 0x52, 0x50,
	0xdf, 0x44, 0x8d, 0xa6, 0xf5, 0xcf, 0xe8, 0xc6, 0x8a, 0x30, 0xd1, 0x2e, 0x31, 0x9c, 0xe3, 0xa6,
	0xa7, 0x57, 0xea, 0x58, 0x70, 0x52, 0x8a, 0x2c, 0xc6, 0x83, 0x07, 0x21, 0x00, 0x73, 0x10, 0x70,
	0x1e, 0xc4, 0x3b, 0x7d, 0x1e, 0x1c, 0xc6, 0x5a, 0xa9, 0x13, 0x46, 0x33, 0xf1, 0x40, 0x3e, 0x18,
	0x1d, 0xc0, 0x1c, 0x3d, 0x35, 0x68, 0xea, 0x0e, 0x26, 0x5e, 0x78, 0xde, 0xd2, 0x76, 0x7e, 0xec,
	0x84, 0x56, 0x27, 0x8b, 0x42, 0x1b, 0x30, 0x1d, 0x84, 0xa1, 0xeb, 0x7d, 0x5a, 0x1c, 0x8c, 0xd3,
	0x75, 0x25, 0xed, 0x93, 0x96, 0x3e, 0xe1, 0x15, 0xc2, 0xd7, 0xf6, 0x9f, 0x47, 0x60, 0xf2, 0xae,
	0x5b, 0xa5, 0xb5, 0xd9, 0x01, 0x76, 0x3e, 0x68, 0x11, 0xd3, 0x4d, 0x5f, 0xdc, 0xa1, 0x93, 0x92,
	0xee, 0xe2, 0x8e, 0x34, 0xa2, 0xdb, 0x30, 0xec, 0x06, 0xa5, 0xf8, 0x36, 0xcd, 0x6f, 0xbd, 0x57,
	0x06, 0xc7, 0xfb, 0xab, 0xab, 0x66, 0x99, 0x26, 0x26, 0x1d, 0x95, 0x4a, 0xdb, 0x74, 0x95, 0x67,
	0x58, 0x5d, 0xe2, 0x38, 0xf4, 0x3e, 0x8c, 0x12, 0x7c, 0xb8, 0xdf, 0x51, 0x65, 0x20, 0x93, 0x98,
	0xf0, 0x10, 0xf4, 0x01, 0x14, 0x30, 0x31, 0x3e, 0xee, 0xb4, 0x48, 0x98, 0x17, 0x64, 0xda, 0x1e,
	0x28, 0x54, 0x85, 0x05, 0x92, 0xdc, 0x4d, 0xb9, 0x38, 0x94, 0x85, 0x8b, 0xbd, 0xa4, 0xb0, 0x84,
	0xf2, 0x31, 0x3e, 0x0c, 0x6d, 0x5b, 0x24, 0x5a, 0x0f, 0xf3, 0x84, 0xd2, 0x0b, 0xea, 0x27, 0x14,
	0xd2, 0x03, 0x43, 0xf5, 0x1f, 0xc9, 0x94, 0x50, 0xb2, 0x88, 0x42, 0xdf, 0x00, 0xd5, 0x4f, 0x75,
	0xc4, 0x26, 0x11, 0x5e, 0x46, 0xd6, 0x7a, 0x0a, 0x02, 0x95, 0xe1, 0x92, 0x2e, 0xef, 0xca, 0xbe,
	0xea, 0xd3, 0x24, 0xa0, 0x4d, 0x98, 0x0a, 0xad, 0xd7, 0x40, 0x7f, 0xb6, 0xe4, 0x2f, 0x88, 0xf4,
	0xda, 0x23, 0x9e, 0x16, 0x47, 0xa3, 0x02, 0x80, 0x67, 0x3f, 0xc2, 0x64, 0x07, 0x13, 0xbb, 0xc1,
	0xd6, 0x72, 0xa8, 0x05, 0x95, 0x60, 0x46, 0xe4, 0x73, 0xc9, 0xb1, 0xed, 0x83, 0xfc, 0x79, 0xb6,
	0x8d, 0x16, 0xa6, 0xd1, 0x74, 0x52, 0xc5, 0x14, 0xa1, 0xc9, 0x07, 0xa2, 0x0f, 0x60, 0x32, 0x44,
	0xed, 0x40, 0xd8, 0x44, 0x4f, 0x61, 0xb1, 0x31, 0xe8, 0x5d, 0x98, 0xc5, 0xc4, 0x90, 0x45, 0x66,
	0x92, 0x46, 0x26, 0xa1, 0x17, 0x3d, 0x80, 0x8b, 0x5e, 0x42, 0x44, 0xa6, 0xb2, 0x44, 0x24, 0x69,
	0xb4, 0x90, 0xec, 0x54, 0xba, 0x7d, 0x88, 0x28, 0xc0, 0xb3, 0xdd, 0x6f, 0x86, 0x69, 0x25, 0xa3,
	0x61, 0x03, 0x5b, 0x6d, 0x7c, 0x36, 0xc9, 0x6e, 0x07, 0xc6, 0xcd, 0xd0, 0x11, 0x41, 0xd6, 0x8c,
	0x17, 0x1d, 0x74, 0xa6, 0x69, 0xef, 0x23, 0x1a, 0xe8, 0x9d, 0x88, 0x52, 0xd9, 0x72, 0x5f, 0x6c,
	0x5c, 0xd6, 0x7c, 0x32, 0x78, 0xf6, 0xf9, 0x64, 0xe8, 0xec, 0xf2, 0xc9, 0xd7, 0x61, 0x8e, 0x65,
	0x8b, 0x70, 0xe4, 0x23, 0xa9, 0x30, 0x19, 0x80, 0xbe, 0x0d, 0xaa, 0x2e, 0xed, 0xc9, 0x9e, 0xf6,
	0x52, 0x04, 0xc8, 0x73, 0x09, 0xbc, 0x42, 0x2e, 0x19, 0xcd, 0x9e, 0x4b, 0xc6, 0x4e, 0x9b, 0x4b,
	0x4a, 0x30, 0x23, 0x52, 0x25, 0x90, 0x38, 0xde, 0x5b, 0xa2, 0x74, 0x20, 0x2b, 0xed, 0x24, 0xf1,
	0x39, 0xcf, 0x4b, 0x3b, 0x49, 0x6c, 0xee, 0xc1, 0xac, 0x23, 0x8f, 0xcb, 0x44, 0xa6, 0xd2, 0x4e,
	0x3e, 0x58, 0x5a, 0x3e, 0x85, 0x67, 0xe7, 0x09, 0xe5, 0xc7, 0x0a, 0xcc, 0xd2, 0x53, 0x8d, 0x66,
	0xdd, 0x3e, 0xde, 0x6f, 0xe8, 0x8e, 0xb7, 0x6d, 0x13, 0xcf, 0xd1, 0x8d, 0xb4, 0x1d, 0xd2, 0x22,
	0x8c, 0xba, 0x0e, 0x2b, 0x54, 0x79, 0x56, 0x09, 0x37, 0xa1, 0x55, 0x98, 0x74, 0xc3, 0xc2, 0x3e,
	0xc4, 0x47, 0x6c, 0xa3, 0x18, 0x6b, 0x17, 0x74, 0x5d, 0x64, 0x87, 0x7a, 0x31, 0x7d, 0xb8, 0xca,
	0x3f, 0x51, 0xa8, 0x39, 0xbb, 0x47, 0xd8, 0x68, 0x79, 0xf8, 0xff, 0x41, 0xe7, 0x2b, 0x74, 0x9f,
	0x2d, 0x53, 0x88, 0x2b, 0xfd, 0xd7, 0x01, 0xb8, 0xc0, 0x4b, 0xd8, 0x6e, 0xad, 0x9b, 0xa2, 0x70,
	0x11, 0xc6, 0xba, 0x77, 0x52, 0x5c, 0xe3, 0x48, 0x1b, 0xba, 0x06, 0xe7, 0x8d, 0x68, 0x4d, 0x1d,
	0x28, 0x2c, 0xb4, 0xa2, 0xcf, 0x20, 0xdf, 0x6d, 0x11, 0xb6, 0x37, 0xd9, 0x92, 0x74, 0xe2, 0x78,
	0x76, 0x72, 0xdc, 0x35, 0x69, 0x8f, 0x1c, 0xd8, 0x8c, 0xf9, 0x03, 0xfc, 0xe4, 0x58, 0xd6, 0x8d,
	0x1e, 0x86, 0xb5, 0xea, 0xb6, 0x53, 0xf6, 0x0f, 0x66, 0x61, 0x7f, 0xe2, 0xf0, 0x98, 0x52, 0x1f,
	0xea, 0x6e, 0x2d, 0xb2, 0x15, 0x4d, 0xea, 0x8e, 0x2a, 0xd5, 0x6d, 0xcf, 0xbe, 0xe5, 0x4c, 0x1c,
	0x8e, 0x2a, 0x30, 0x7f, 0x60, 0x91, 0xd0, 0x1e, 0x54, 0xba, 0xd1, 0xec, 0x15, 0x89, 0x54, 0x19,
	0x68, 0x05, 0x26, 0xf0, 0x9d, 0x87, 0xdb, 0x9b, 0xcd, 0x26, 0xa7, 0x3a, 0x04, 0xb7, 0x1d, 0x42,
	0xb3, 0x9f, 0xaf, 0x1c, 0x7c, 0x80, 0x1d, 0x4c, 0x8c, 0x10, 0x21, 0xf7, 0x76, 0x58, 0xfa, 0x95,
	0x77, 0x0a, 0xc4, 0xbf, 0x0c, 0x97, 0x24, 0xa4, 0xe6, 0xa4, 0xff, 0xa1, 0x42, 0x49, 0xaf, 0xe1,
	0x86, 0xdd, 0x7e, 0xed, 0xa4, 0x97, 0xaa, 0x2a, 0xaa, 0xc2, 0x55, 0xfd, 0x7b, 0x90, 0x07, 0xd9,
	0xf9, 0x4e, 0xc6, 0xf3, 0xfc, 0xa4, 0x43, 0xf2, 0xce, 0x39, 0x7f, 0x2e, 0xe1, 0x9c, 0xbf, 0x3f,
	0x7a, 0xce, 0x8f, 0x6e, 0xc0, 0x20, 0xbd, 0x9e, 0x76, 0xf3, 0x03, 0x8b, 0xb9, 0x95, 0xd1, 0x8d,
	0x69, 0x81, 0x02, 0x94, 0x42, 0x1a, 0xc3, 0x9c, 0xe2, 0xa8, 0x2c, 0xc8, 0xa9, 0x12, 0xdb, 0xb8,
	0xf9, 0xff, 0x55, 0x60, 0x49, 0x3c, 0x4d, 0xdb, 0x23, 0x1e, 0x76, 0xda, 0x7a, 0x9d, 0xa3, 0xf7,
	0x76, 0x4e, 0xe1, 0x8b, 0xa4, 0x0b, 0x03, 0x15, 0x86, 0xfd, 0x5f, 0x61, 0x7f, 0x74, 0x9e, 0xd1,
	0x0d, 0x98, 0xc2, 0x47, 0x1e, 0x76, 0x88, 0x5e, 0xdf, 0x2b, 0xb1, 0x23, 0x71, 0x76, 0x5e, 0x18,
	0xef, 0x38, 0x85, 0x3f, 0xde, 0x82, 0xeb, 0x19, 0x8c, 0xe5, 0xce, 0xb1, 0x61, 0xae, 0x0b, 0x67,
	0x67, 0x8c, 0xbb, 0x47, 0x46, 0xcd, 0x2f, 0x09, 0x52, 0x3c, 0x92, 0x87, 0xa1, 0x86, 0x5b, 0xa5,
	0x06, 0x06, 0x2e, 0xe9, 0x3c, 0xa2, 0x49, 0xc8, 0x35, 0xdc, 0x2a, 0x73, 0x88, 0xff, 0x53, 0xd0,
	0x6f, 0x09, 0xae, 0x24, 0x4e, 0xc8, 0xb5, 0xfa, 0xbd, 0x02, 0x2b, 0x5d, 0xd4, 0x96, 0x63, 0xeb,
	0xa6, 0xa1, 0xbb, 0xde, 0x3e, 0xfd, 0x30, 0x82, 0x32, 0xa6, 0xe4, 0xd0, 0x7b, 0x8a, 0x74, 0x0e,
	0x6f, 0xc2, 0x68, 0x93, 0xe3, 0xdc, 0x7c, 0x1f, 0x25, 0xe0, 0x82, 0x48, 0xc0, 0xa8, 0xd0, 0x3b,
	0x5a, 0x78, 0x4c, 0x2c, 0x00, 0xb9, 0x9e, 0x01, 0xd8, 0x80, 0xb7, 0xb3, 0xaa, 0xce, 0xed, 0xfd,
	0x85, 0x02, 0xd3, 0xfe, 0x20, 0xc7, 0xf6, 0xb0, 0xe1, 0x65, 0xb2, 0x6d, 0x1e, 0x46, 0xbc, 0x9a,
	0x83, 0xdd, 0x9a, 0x5d, 0x0f, 0xee, 0xfa, 0x06, 0xb4, 0x6e, 0x03, 0x7a, 0xcf, 0x57, 0x9b, 0x7e,
	0x1c, 0x12, 0xbc, 0x18, 0x72, 0xd4, 0xf4, 0x4b, 0x82, 0xe9, 0x5a, 0x08, 0xa2, 0x45, 0x06, 0x08,
	0x36, 0x15, 0x82, 0x9b, 0x03, 0x51, 0x3d, 0xae, 0xff, 0xd3, 0x3e, 0xba, 0xaf, 0xdb, 0xb7, 0xaa,
	0x84, 0xc9, 0xcc, 0x64, 0xc3, 0x0e, 0x5c, 0x8e, 0xde, 0xe1, 0xee, 0x76, 0x32, 0x38, 0x7b, 0x9f,
	0xf5, 0x51, 0x6f, 0xa7, 0x83, 0x10, 0x86, 0x82, 0x99, 0xd8, 0x4b, 0xdf, 0x6d, 0xb9, 0x2c, 0xef,
	0xb6, 0x1e, 0x42, 0x62, 0x2e, 0x0d, 0x6a, 0x8b, 0x53, 0xbb, 0x34, 0xb8, 0x76, 0x92, 0x7a, 0x8c,
	0xbb, 0xf5, 0x3f, 0x7d, 0x80, 0xfc, 0x77, 0x50, 0x5d, 0xb7, 0x1a, 0xaf, 0xbd, 0xae, 0x2a, 0x00,
	0x30, 0xf5, 0xef, 0xe0, 0x63, 0x6a, 0xed, 0xb0, 0x16, 0x6a, 0x61, 0xf7, 0xff, 0x82, 0x6e, 0xbb,
	0x47, 0x9e, 0xa3, 0x97, 0x74, 0xa7, 0xe1, 0x46, 0xca, 0xa4, 0x0c, 0x48, 0x64, 0xc3, 0x92, 0x91,
	0x0e, 0xc9, 0x5e, 0x3c, 0x65, 0x91, 0x24, 0xc4, 0x63, 0x9e, 0xde, 0xf0, 0x09, 0x4a, 0xf2, 0x48,
	0xfc, 0x2c, 0x47, 0x09, 0x1e, 0x54, 0x03, 0x5b, 0xad, 0xfa, 0xa3, 0xd0, 0x61, 0x7b, 0x4a, 0x3c,
	0xe2, 0xbe, 0xee, 0x93, 0xfa, 0x3a, 0xad, 0x5a, 0xcc, 0xbd, 0x5a, 0xb5, 0x98, 0x56, 0xf3, 0xf5,
	0xbf, 0x5a, 0xcd, 0x27, 0xa9, 0xc7, 0x06, 0xe4, 0xf5, 0xd8, 0x37, 0x61, 0xa2, 0x12, 0x75, 0x5a,
	0x7e, 0x90, 0x66, 0x24, 0x71, 0xee, 0xa8, 0x6b, 0x35, 0x71, 0x94, 0x74, 0x0d, 0x49, 0x83, 0xd2,
	0x89, 0xdc, 0xc6, 0xef, 0x10, 0xe4, 0xee, 0xba, 0x55, 0x74, 0x1f, 0xc6, 0x22, 0x5f, 0xac, 0x89,
	0xa5, 0xa8, 0xf0, 0x09, 0x98, 0x7a, 0x2d, 0xbd, 0x9f, 0x7f, 0xf5, 0x73, 0x1f, 0xc6, 0x22, 0x15,
	0x95, 0x44, 0x6e, 0xb8, 0x5f, 0x26, 0x57, 0x56, 0xb5, 0xf8, 0x72, 0x23, 0x77, 0x7a, 0x12, 0xb9,
	0xe1, 0x7e, 0x99, 0x5c, 0xd9, 0x9d, 0x02, 0x7a, 0x08, 0xe3, 0xd1, 0xfb, 0x84, 0x85, 0xf8, 0xc0,
	0x08, 0x40, 0x5d, 0xee, 0x01, 0x08, 0xab, 0x1c, 0x39, 0xbc, 0x93, 0xa8, 0x1c, 0xee, 0x97, 0xa9,
	0x2c, 0xdb, 0xc7, 0x23, 0x0c, 0x53, 0xf1, 0x37, 0xe3, 0x52, 0x7c, 0x70, 0x0c, 0xa4, 0x5e, 0xcf,
	0x00, 0xe2, 0xd3, 0x3c, 0x86, 0x19, 0xf9, 0x0b, 0x4c, 0xe2, 0x00, 0x29, 0x50, 0x5d, 0xcf, 0x08,
	0xe4, 0x53, 0x96, 0x61, 0x42, 0x4c, 0xee, 0x57, 0x24, 0x71, 0x8c, 0x42, 0xd4, 0x37, 0x7b, 0x42,
	0xf8, 0x04, 0x35, 0x40, 0x92, 0x0f, 0x67, 0xae, 0x4a, 0x39, 0x28, 0xa0, 0xd4, 0x1b, 0x59, 0x50,
	0x7c, 0xa6, 0xef, 0xc2, 0x5c, 0xf2, 0xe7, 0x2b, 0x92, 0x38, 0x24, 0x82, 0xd5, 0x9b, 0x27, 0x00,
	0x87, 0x83, 0x27, 0xff, 0x08, 0x60, 0x39, 0x69, 0x1d, 0x0b, 0x40, 0x59, 0xf0, 0x52, 0x6f, 0xde,
	0xd1, 0x23, 0xb8, 0x20, 0xdb, 0x52, 0xbd, 0x21, 0xe1, 0x5c, 0x1c, 0xa6, 0xbe, 0x95, 0x09, 0xc6,
	0x27, 0xfb, 0xa9, 0x02, 0x8b, 0x3d, 0x77, 0x30, 0x1b, 0x89, 0x32, 0x13, 0xc7, 0xa8, 0xb7, 0x4f,
	0x3e, 0x86, 0x2b, 0xe5, 0xc1, 0x6c, 0xc2, 0xce, 0x61, 0x25, 0x51, 0xaa, 0x80, 0x54, 0xdf, 0xce,
	0x8a, 0xe4, 0xb3, 0xfe, 0x52, 0x81, 0x37, 0xb2, 0xed, 0x0c, 0xbe, 0x96, 0x28, 0x3b, 0x7d, 0xa0,
	0xfa, 0xde, 0x29, 0x07, 0x72, 0x1d, 0x0f, 0xe1, 0x62, 0xd2, 0xc7, 0x42, 0x6f, 0xf6, 0x70, 0x78,
	0x17, 0xaa, 0xbe, 0x93, 0x19, 0x1a, 0x5e, 0x86, 0xc9, 0x1f, 0xf8, 0x5c, 0xef, 0x21, 0x2f, 0x0c,
	0x96, 0x2d, 0xc3, 0x9e, 0x9f, 0xe5, 0xa0, 0x1f, 0x28, 0x30, 0x9f, 0xfa, 0x4d, 0xce, 0x5a, 0x0f,
	0xa9, 0xe2, 0xaa, 0x7c, 0xf7, 0x64, 0x78, 0xae, 0x48, 0x05, 0x26, 0x63, 0xe7, 0x91, 0xc5, 0xa4,
	0x57, 0x64, 0x28, 0xb7, 0xae, 0xf6, 0xc6, 0x84, 0xe7, 0x88, 0x1d, 0xff, 0x14, 0x65, 0xef, 0xb4,
	0x28, 0x46, 0x36, 0x47, 0xd2, 0xd9, 0x8d, 0x9f, 0xd7, 0xe4, 0x45, 0xe7, 0x72, 0x92, 0xa2, 0x02,
	0x50, 0x96, 0xd7, 0x52, 0x2b, 0x26, 0x75, 0xe0, 0xf3, 0x97, 0x4f, 0x57, 0x95, 0xad, 0xdd, 0x2f,
	0x9e, 0x17, 0x94, 0x67, 0xcf, 0x0b, 0xca, 0xbf, 0x9f, 0x17, 0x94, 0x27, 0x2f, 0x0a, 0xe7, 0x9e,
	0xbd, 0x28, 0x9c, 0xfb, 0xdb, 0x8b, 0xc2, 0xb9, 0xcf, 0xae, 0x67, 0xfb, 0xce, 0xde, 0x3b, 0x6e,
	0x62, 0xb7, 0x32, 0x48, 0x3f, 0x25, 0xbe, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xc1,
	0xf2, 0x07, 0x7e, 0x32, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// AUTHORIZATION:
	AddPublicKey(ctx context.Context, in *MsgAddPublicKey, opts ...grpc.CallOption) (*MsgAddPublicKeyResponse, error)
	// AUTHORIZATION:
	CreateWallet(ctx context.Context, in *MsgCreateWallet, opts ...grpc.CallOption) (*MsgCreateWalletResponse, error)
	TransferFunds(ctx context.Context, in *MsgTransferFunds, opts ...grpc.CallOption) (*MsgTransferFundsResponse, error)
	ReceiveFunds(ctx context.Context, in *MsgReceiveFunds, opts ...grpc.CallOption) (*MsgReceiveFundsResponse, error)
	ProtectPrivateKey(ctx context.Context, in *MsgProtectPrivateKey, opts ...grpc.CallOption) (*MsgProtectPrivateKeyResponse, error)
	SignRecoverPrivateKey(ctx context.Context, in *MsgSignRecoverPrivateKey, opts ...grpc.CallOption) (*MsgSignRecoverPrivateKeyResponse, error)
	ClaimCredential(ctx context.Context, in *MsgClaimCredential, opts ...grpc.CallOption) (*MsgClaimCredentialResponse, error)
	// AUTHORIZATION: gov module
	AddServiceProvider(ctx context.Context, in *MsgAddServiceProvider, opts ...grpc.CallOption) (*MsgAddServiceProviderResponse, error)
	DeactivateServiceProvider(ctx context.Context, in *MsgDeactivateServiceProvider, opts ...grpc.CallOption) (*MsgDeactivateServiceProviderResponse, error)
	UpdateEnclaveIdentity(ctx context.Context, in *MsgUpdateEnclaveIdentity, opts ...grpc.CallOption) (*MsgUpdateEnclaveIdentityResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *IS* a Pioneer via enclave
	PioneerAddPublicKey(ctx context.Context, in *MsgPioneerAddPublicKey, opts ...grpc.CallOption) (*MsgPioneerAddPublicKeyResponse, error)
	PioneerUpdateIntervalPublicKeyID(ctx context.Context, in *MsgPioneerUpdateIntervalPublicKeyID, opts ...grpc.CallOption) (*MsgPioneerUpdateIntervalPublicKeyIDResponse, error)
	PioneerEnclaveExchange(ctx context.Context, in *MsgPioneerEnclaveExchange, opts ...grpc.CallOption) (*MsgPioneerEnclaveExchangeResponse, error)
	PioneerBroadcastSecretSharePrivateKey(ctx context.Context, in *MsgPioneerBroadcastSecretSharePrivateKey, opts ...grpc.CallOption) (*MsgPioneerBroadcastSecretSharePrivateKeyResponse, error)
	// rpc PioneerUpdateIntervalPublicKeyID             (MsgPioneerUpdateIntervalPublicKeyID            ) returns (MsgPioneerUpdateIntervalPublicKeyIDResponse            );
	PioneerUpdatePioneerJar(ctx context.Context, in *MsgPioneerUpdatePioneerJar, opts ...grpc.CallOption) (*MsgPioneerUpdatePioneerJarResponse, error)
	PioneerUpdateJarRegulator(ctx context.Context, in *MsgPioneerUpdateJarRegulator, opts ...grpc.CallOption) (*MsgPioneerUpdateJarRegulatorResponse, error)
	PioneerUpdateEnclaveIdentity(ctx context.Context, in *MsgPioneerUpdateEnclaveIdentity, opts ...grpc.CallOption) (*MsgPioneerUpdateEnclaveIdentityResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *IS* an identity service provider
	// make sure that all the required signatory vshares ccPubK has ss interval public key
	CreateCredential(ctx context.Context, in *MsgCreateCredential, opts ...grpc.CallOption) (*MsgCreateCredentialResponse, error)
	RemoveCredential(ctx context.Context, in *MsgRemoveCredential, opts ...grpc.CallOption) (*MsgRemoveCredentialResponse, error)
	CreateBulkCredentials(ctx context.Context, in *MsgCreateBulkCredentials, opts ...grpc.CallOption) (*MsgCreateBulkCredentialsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddPublicKey(ctx context.Context, in *MsgAddPublicKey, opts ...grpc.CallOption) (*MsgAddPublicKeyResponse, error) {
	out := new(MsgAddPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/AddPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateWallet(ctx context.Context, in *MsgCreateWallet, opts ...grpc.CallOption) (*MsgCreateWalletResponse, error) {
	out := new(MsgCreateWalletResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferFunds(ctx context.Context, in *MsgTransferFunds, opts ...grpc.CallOption) (*MsgTransferFundsResponse, error) {
	out := new(MsgTransferFundsResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/TransferFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReceiveFunds(ctx context.Context, in *MsgReceiveFunds, opts ...grpc.CallOption) (*MsgReceiveFundsResponse, error) {
	out := new(MsgReceiveFundsResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/ReceiveFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProtectPrivateKey(ctx context.Context, in *MsgProtectPrivateKey, opts ...grpc.CallOption) (*MsgProtectPrivateKeyResponse, error) {
	out := new(MsgProtectPrivateKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/ProtectPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignRecoverPrivateKey(ctx context.Context, in *MsgSignRecoverPrivateKey, opts ...grpc.CallOption) (*MsgSignRecoverPrivateKeyResponse, error) {
	out := new(MsgSignRecoverPrivateKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/SignRecoverPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimCredential(ctx context.Context, in *MsgClaimCredential, opts ...grpc.CallOption) (*MsgClaimCredentialResponse, error) {
	out := new(MsgClaimCredentialResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/ClaimCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddServiceProvider(ctx context.Context, in *MsgAddServiceProvider, opts ...grpc.CallOption) (*MsgAddServiceProviderResponse, error) {
	out := new(MsgAddServiceProviderResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/AddServiceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeactivateServiceProvider(ctx context.Context, in *MsgDeactivateServiceProvider, opts ...grpc.CallOption) (*MsgDeactivateServiceProviderResponse, error) {
	out := new(MsgDeactivateServiceProviderResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/DeactivateServiceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEnclaveIdentity(ctx context.Context, in *MsgUpdateEnclaveIdentity, opts ...grpc.CallOption) (*MsgUpdateEnclaveIdentityResponse, error) {
	out := new(MsgUpdateEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/UpdateEnclaveIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerAddPublicKey(ctx context.Context, in *MsgPioneerAddPublicKey, opts ...grpc.CallOption) (*MsgPioneerAddPublicKeyResponse, error) {
	out := new(MsgPioneerAddPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/PioneerAddPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerUpdateIntervalPublicKeyID(ctx context.Context, in *MsgPioneerUpdateIntervalPublicKeyID, opts ...grpc.CallOption) (*MsgPioneerUpdateIntervalPublicKeyIDResponse, error) {
	out := new(MsgPioneerUpdateIntervalPublicKeyIDResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/PioneerUpdateIntervalPublicKeyID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerEnclaveExchange(ctx context.Context, in *MsgPioneerEnclaveExchange, opts ...grpc.CallOption) (*MsgPioneerEnclaveExchangeResponse, error) {
	out := new(MsgPioneerEnclaveExchangeResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/PioneerEnclaveExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerBroadcastSecretSharePrivateKey(ctx context.Context, in *MsgPioneerBroadcastSecretSharePrivateKey, opts ...grpc.CallOption) (*MsgPioneerBroadcastSecretSharePrivateKeyResponse, error) {
	out := new(MsgPioneerBroadcastSecretSharePrivateKeyResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/PioneerBroadcastSecretSharePrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerUpdatePioneerJar(ctx context.Context, in *MsgPioneerUpdatePioneerJar, opts ...grpc.CallOption) (*MsgPioneerUpdatePioneerJarResponse, error) {
	out := new(MsgPioneerUpdatePioneerJarResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/PioneerUpdatePioneerJar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerUpdateJarRegulator(ctx context.Context, in *MsgPioneerUpdateJarRegulator, opts ...grpc.CallOption) (*MsgPioneerUpdateJarRegulatorResponse, error) {
	out := new(MsgPioneerUpdateJarRegulatorResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/PioneerUpdateJarRegulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerUpdateEnclaveIdentity(ctx context.Context, in *MsgPioneerUpdateEnclaveIdentity, opts ...grpc.CallOption) (*MsgPioneerUpdateEnclaveIdentityResponse, error) {
	out := new(MsgPioneerUpdateEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/PioneerUpdateEnclaveIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateCredential(ctx context.Context, in *MsgCreateCredential, opts ...grpc.CallOption) (*MsgCreateCredentialResponse, error) {
	out := new(MsgCreateCredentialResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveCredential(ctx context.Context, in *MsgRemoveCredential, opts ...grpc.CallOption) (*MsgRemoveCredentialResponse, error) {
	out := new(MsgRemoveCredentialResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/RemoveCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBulkCredentials(ctx context.Context, in *MsgCreateBulkCredentials, opts ...grpc.CallOption) (*MsgCreateBulkCredentialsResponse, error) {
	out := new(MsgCreateBulkCredentialsResponse)
	err := c.cc.Invoke(ctx, "/qadena.qadena.Msg/CreateBulkCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// AUTHORIZATION:
	AddPublicKey(context.Context, *MsgAddPublicKey) (*MsgAddPublicKeyResponse, error)
	// AUTHORIZATION:
	CreateWallet(context.Context, *MsgCreateWallet) (*MsgCreateWalletResponse, error)
	TransferFunds(context.Context, *MsgTransferFunds) (*MsgTransferFundsResponse, error)
	ReceiveFunds(context.Context, *MsgReceiveFunds) (*MsgReceiveFundsResponse, error)
	ProtectPrivateKey(context.Context, *MsgProtectPrivateKey) (*MsgProtectPrivateKeyResponse, error)
	SignRecoverPrivateKey(context.Context, *MsgSignRecoverPrivateKey) (*MsgSignRecoverPrivateKeyResponse, error)
	ClaimCredential(context.Context, *MsgClaimCredential) (*MsgClaimCredentialResponse, error)
	// AUTHORIZATION: gov module
	AddServiceProvider(context.Context, *MsgAddServiceProvider) (*MsgAddServiceProviderResponse, error)
	DeactivateServiceProvider(context.Context, *MsgDeactivateServiceProvider) (*MsgDeactivateServiceProviderResponse, error)
	UpdateEnclaveIdentity(context.Context, *MsgUpdateEnclaveIdentity) (*MsgUpdateEnclaveIdentityResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *IS* a Pioneer via enclave
	PioneerAddPublicKey(context.Context, *MsgPioneerAddPublicKey) (*MsgPioneerAddPublicKeyResponse, error)
	PioneerUpdateIntervalPublicKeyID(context.Context, *MsgPioneerUpdateIntervalPublicKeyID) (*MsgPioneerUpdateIntervalPublicKeyIDResponse, error)
	PioneerEnclaveExchange(context.Context, *MsgPioneerEnclaveExchange) (*MsgPioneerEnclaveExchangeResponse, error)
	PioneerBroadcastSecretSharePrivateKey(context.Context, *MsgPioneerBroadcastSecretSharePrivateKey) (*MsgPioneerBroadcastSecretSharePrivateKeyResponse, error)
	// rpc PioneerUpdateIntervalPublicKeyID             (MsgPioneerUpdateIntervalPublicKeyID            ) returns (MsgPioneerUpdateIntervalPublicKeyIDResponse            );
	PioneerUpdatePioneerJar(context.Context, *MsgPioneerUpdatePioneerJar) (*MsgPioneerUpdatePioneerJarResponse, error)
	PioneerUpdateJarRegulator(context.Context, *MsgPioneerUpdateJarRegulator) (*MsgPioneerUpdateJarRegulatorResponse, error)
	PioneerUpdateEnclaveIdentity(context.Context, *MsgPioneerUpdateEnclaveIdentity) (*MsgPioneerUpdateEnclaveIdentityResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *IS* an identity service provider
	// make sure that all the required signatory vshares ccPubK has ss interval public key
	CreateCredential(context.Context, *MsgCreateCredential) (*MsgCreateCredentialResponse, error)
	RemoveCredential(context.Context, *MsgRemoveCredential) (*MsgRemoveCredentialResponse, error)
	CreateBulkCredentials(context.Context, *MsgCreateBulkCredentials) (*MsgCreateBulkCredentialsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) AddPublicKey(ctx context.Context, req *MsgAddPublicKey) (*MsgAddPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPublicKey not implemented")
}
func (*UnimplementedMsgServer) CreateWallet(ctx context.Context, req *MsgCreateWallet) (*MsgCreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (*UnimplementedMsgServer) TransferFunds(ctx context.Context, req *MsgTransferFunds) (*MsgTransferFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFunds not implemented")
}
func (*UnimplementedMsgServer) ReceiveFunds(ctx context.Context, req *MsgReceiveFunds) (*MsgReceiveFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFunds not implemented")
}
func (*UnimplementedMsgServer) ProtectPrivateKey(ctx context.Context, req *MsgProtectPrivateKey) (*MsgProtectPrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtectPrivateKey not implemented")
}
func (*UnimplementedMsgServer) SignRecoverPrivateKey(ctx context.Context, req *MsgSignRecoverPrivateKey) (*MsgSignRecoverPrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignRecoverPrivateKey not implemented")
}
func (*UnimplementedMsgServer) ClaimCredential(ctx context.Context, req *MsgClaimCredential) (*MsgClaimCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimCredential not implemented")
}
func (*UnimplementedMsgServer) AddServiceProvider(ctx context.Context, req *MsgAddServiceProvider) (*MsgAddServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServiceProvider not implemented")
}
func (*UnimplementedMsgServer) DeactivateServiceProvider(ctx context.Context, req *MsgDeactivateServiceProvider) (*MsgDeactivateServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateServiceProvider not implemented")
}
func (*UnimplementedMsgServer) UpdateEnclaveIdentity(ctx context.Context, req *MsgUpdateEnclaveIdentity) (*MsgUpdateEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnclaveIdentity not implemented")
}
func (*UnimplementedMsgServer) PioneerAddPublicKey(ctx context.Context, req *MsgPioneerAddPublicKey) (*MsgPioneerAddPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerAddPublicKey not implemented")
}
func (*UnimplementedMsgServer) PioneerUpdateIntervalPublicKeyID(ctx context.Context, req *MsgPioneerUpdateIntervalPublicKeyID) (*MsgPioneerUpdateIntervalPublicKeyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerUpdateIntervalPublicKeyID not implemented")
}
func (*UnimplementedMsgServer) PioneerEnclaveExchange(ctx context.Context, req *MsgPioneerEnclaveExchange) (*MsgPioneerEnclaveExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerEnclaveExchange not implemented")
}
func (*UnimplementedMsgServer) PioneerBroadcastSecretSharePrivateKey(ctx context.Context, req *MsgPioneerBroadcastSecretSharePrivateKey) (*MsgPioneerBroadcastSecretSharePrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerBroadcastSecretSharePrivateKey not implemented")
}
func (*UnimplementedMsgServer) PioneerUpdatePioneerJar(ctx context.Context, req *MsgPioneerUpdatePioneerJar) (*MsgPioneerUpdatePioneerJarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerUpdatePioneerJar not implemented")
}
func (*UnimplementedMsgServer) PioneerUpdateJarRegulator(ctx context.Context, req *MsgPioneerUpdateJarRegulator) (*MsgPioneerUpdateJarRegulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerUpdateJarRegulator not implemented")
}
func (*UnimplementedMsgServer) PioneerUpdateEnclaveIdentity(ctx context.Context, req *MsgPioneerUpdateEnclaveIdentity) (*MsgPioneerUpdateEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerUpdateEnclaveIdentity not implemented")
}
func (*UnimplementedMsgServer) CreateCredential(ctx context.Context, req *MsgCreateCredential) (*MsgCreateCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (*UnimplementedMsgServer) RemoveCredential(ctx context.Context, req *MsgRemoveCredential) (*MsgRemoveCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCredential not implemented")
}
func (*UnimplementedMsgServer) CreateBulkCredentials(ctx context.Context, req *MsgCreateBulkCredentials) (*MsgCreateBulkCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulkCredentials not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddPublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/AddPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddPublicKey(ctx, req.(*MsgAddPublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateWallet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateWallet(ctx, req.(*MsgCreateWallet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/TransferFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferFunds(ctx, req.(*MsgTransferFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReceiveFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReceiveFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReceiveFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/ReceiveFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReceiveFunds(ctx, req.(*MsgReceiveFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProtectPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProtectPrivateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProtectPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/ProtectPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProtectPrivateKey(ctx, req.(*MsgProtectPrivateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignRecoverPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignRecoverPrivateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignRecoverPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/SignRecoverPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignRecoverPrivateKey(ctx, req.(*MsgSignRecoverPrivateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/ClaimCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimCredential(ctx, req.(*MsgClaimCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddServiceProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/AddServiceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddServiceProvider(ctx, req.(*MsgAddServiceProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeactivateServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeactivateServiceProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeactivateServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/DeactivateServiceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeactivateServiceProvider(ctx, req.(*MsgDeactivateServiceProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEnclaveIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/UpdateEnclaveIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEnclaveIdentity(ctx, req.(*MsgUpdateEnclaveIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerAddPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerAddPublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerAddPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/PioneerAddPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerAddPublicKey(ctx, req.(*MsgPioneerAddPublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerUpdateIntervalPublicKeyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerUpdateIntervalPublicKeyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerUpdateIntervalPublicKeyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/PioneerUpdateIntervalPublicKeyID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerUpdateIntervalPublicKeyID(ctx, req.(*MsgPioneerUpdateIntervalPublicKeyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerEnclaveExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerEnclaveExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerEnclaveExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/PioneerEnclaveExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerEnclaveExchange(ctx, req.(*MsgPioneerEnclaveExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerBroadcastSecretSharePrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerBroadcastSecretSharePrivateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerBroadcastSecretSharePrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/PioneerBroadcastSecretSharePrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerBroadcastSecretSharePrivateKey(ctx, req.(*MsgPioneerBroadcastSecretSharePrivateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerUpdatePioneerJar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerUpdatePioneerJar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerUpdatePioneerJar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/PioneerUpdatePioneerJar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerUpdatePioneerJar(ctx, req.(*MsgPioneerUpdatePioneerJar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerUpdateJarRegulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerUpdateJarRegulator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerUpdateJarRegulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/PioneerUpdateJarRegulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerUpdateJarRegulator(ctx, req.(*MsgPioneerUpdateJarRegulator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerUpdateEnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerUpdateEnclaveIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerUpdateEnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/PioneerUpdateEnclaveIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerUpdateEnclaveIdentity(ctx, req.(*MsgPioneerUpdateEnclaveIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCredential(ctx, req.(*MsgCreateCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/RemoveCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveCredential(ctx, req.(*MsgRemoveCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBulkCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBulkCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBulkCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qadena.qadena.Msg/CreateBulkCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBulkCredentials(ctx, req.(*MsgCreateBulkCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qadena.qadena.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "AddPublicKey",
			Handler:    _Msg_AddPublicKey_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _Msg_CreateWallet_Handler,
		},
		{
			MethodName: "TransferFunds",
			Handler:    _Msg_TransferFunds_Handler,
		},
		{
			MethodName: "ReceiveFunds",
			Handler:    _Msg_ReceiveFunds_Handler,
		},
		{
			MethodName: "ProtectPrivateKey",
			Handler:    _Msg_ProtectPrivateKey_Handler,
		},
		{
			MethodName: "SignRecoverPrivateKey",
			Handler:    _Msg_SignRecoverPrivateKey_Handler,
		},
		{
			MethodName: "ClaimCredential",
			Handler:    _Msg_ClaimCredential_Handler,
		},
		{
			MethodName: "AddServiceProvider",
			Handler:    _Msg_AddServiceProvider_Handler,
		},
		{
			MethodName: "DeactivateServiceProvider",
			Handler:    _Msg_DeactivateServiceProvider_Handler,
		},
		{
			MethodName: "UpdateEnclaveIdentity",
			Handler:    _Msg_UpdateEnclaveIdentity_Handler,
		},
		{
			MethodName: "PioneerAddPublicKey",
			Handler:    _Msg_PioneerAddPublicKey_Handler,
		},
		{
			MethodName: "PioneerUpdateIntervalPublicKeyID",
			Handler:    _Msg_PioneerUpdateIntervalPublicKeyID_Handler,
		},
		{
			MethodName: "PioneerEnclaveExchange",
			Handler:    _Msg_PioneerEnclaveExchange_Handler,
		},
		{
			MethodName: "PioneerBroadcastSecretSharePrivateKey",
			Handler:    _Msg_PioneerBroadcastSecretSharePrivateKey_Handler,
		},
		{
			MethodName: "PioneerUpdatePioneerJar",
			Handler:    _Msg_PioneerUpdatePioneerJar_Handler,
		},
		{
			MethodName: "PioneerUpdateJarRegulator",
			Handler:    _Msg_PioneerUpdateJarRegulator_Handler,
		},
		{
			MethodName: "PioneerUpdateEnclaveIdentity",
			Handler:    _Msg_PioneerUpdateEnclaveIdentity_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _Msg_CreateCredential_Handler,
		},
		{
			MethodName: "RemoveCredential",
			Handler:    _Msg_RemoveCredential_Handler,
		},
		{
			MethodName: "CreateBulkCredentials",
			Handler:    _Msg_CreateBulkCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qadena/qadena/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSuspiciousTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSuspiciousTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSuspiciousTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncOptInReasonRegulatorPubK) > 0 {
		i -= len(m.EncOptInReasonRegulatorPubK)
		copy(dAtA[i:], m.EncOptInReasonRegulatorPubK)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncOptInReasonRegulatorPubK)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EncEAmountRegulatorPubK) > 0 {
		i -= len(m.EncEAmountRegulatorPubK)
		copy(dAtA[i:], m.EncEAmountRegulatorPubK)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncEAmountRegulatorPubK)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EncDestinationPersonalInfoRegulatorPubK) > 0 {
		i -= len(m.EncDestinationPersonalInfoRegulatorPubK)
		copy(dAtA[i:], m.EncDestinationPersonalInfoRegulatorPubK)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncDestinationPersonalInfoRegulatorPubK)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EncSourcePersonalInfoRegulatorPubK) > 0 {
		i -= len(m.EncSourcePersonalInfoRegulatorPubK)
		copy(dAtA[i:], m.EncSourcePersonalInfoRegulatorPubK)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncSourcePersonalInfoRegulatorPubK)))
		i--
		dAtA[i] = 0x32
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTx(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RegulatorPubKID) > 0 {
		i -= len(m.RegulatorPubKID)
		copy(dAtA[i:], m.RegulatorPubKID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RegulatorPubKID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JarID) > 0 {
		i -= len(m.JarID)
		copy(dAtA[i:], m.JarID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JarID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSuspiciousTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSuspiciousTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSuspiciousTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSuspiciousTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSuspiciousTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSuspiciousTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncOptInReasonRegulatorPubK) > 0 {
		i -= len(m.EncOptInReasonRegulatorPubK)
		copy(dAtA[i:], m.EncOptInReasonRegulatorPubK)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncOptInReasonRegulatorPubK)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.EncEAmountRegulatorPubK) > 0 {
		i -= len(m.EncEAmountRegulatorPubK)
		copy(dAtA[i:], m.EncEAmountRegulatorPubK)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncEAmountRegulatorPubK)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EncDestinationPersonalInfoRegulatorPubK) > 0 {
		i -= len(m.EncDestinationPersonalInfoRegulatorPubK)
		copy(dAtA[i:], m.EncDestinationPersonalInfoRegulatorPubK)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncDestinationPersonalInfoRegulatorPubK)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EncSourcePersonalInfoRegulatorPubK) > 0 {
		i -= len(m.EncSourcePersonalInfoRegulatorPubK)
		copy(dAtA[i:], m.EncSourcePersonalInfoRegulatorPubK)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncSourcePersonalInfoRegulatorPubK)))
		i--
		dAtA[i] = 0x3a
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTx(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RegulatorPubKID) > 0 {
		i -= len(m.RegulatorPubKID)
		copy(dAtA[i:], m.RegulatorPubKID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RegulatorPubKID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.JarID) > 0 {
		i -= len(m.JarID)
		copy(dAtA[i:], m.JarID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JarID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSuspiciousTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSuspiciousTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSuspiciousTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSuspiciousTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSuspiciousTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSuspiciousTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSuspiciousTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSuspiciousTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSuspiciousTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddPublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddPublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKType) > 0 {
		i -= len(m.PubKType)
		copy(dAtA[i:], m.PubKType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubK) > 0 {
		i -= len(m.PubK)
		copy(dAtA[i:], m.PubK)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddServiceProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddServiceProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddServiceProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceProviderType) > 0 {
		i -= len(m.ServiceProviderType)
		copy(dAtA[i:], m.ServiceProviderType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ServiceProviderType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKID) > 0 {
		i -= len(m.PubKID)
		copy(dAtA[i:], m.PubKID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddServiceProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddServiceProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddServiceProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateServiceProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateServiceProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateServiceProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateServiceProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateServiceProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateServiceProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEnclaveIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEnclaveIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEnclaveIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProductID) > 0 {
		i -= len(m.ProductID)
		copy(dAtA[i:], m.ProductID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProductID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SignerID) > 0 {
		i -= len(m.SignerID)
		copy(dAtA[i:], m.SignerID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniqueID) > 0 {
		i -= len(m.UniqueID)
		copy(dAtA[i:], m.UniqueID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UniqueID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEnclaveIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEnclaveIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEnclaveIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPioneerUpdatePioneerJar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerUpdatePioneerJar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerUpdatePioneerJar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.JarID) > 0 {
		i -= len(m.JarID)
		copy(dAtA[i:], m.JarID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JarID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PioneerID) > 0 {
		i -= len(m.PioneerID)
		copy(dAtA[i:], m.PioneerID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PioneerID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPioneerUpdatePioneerJarResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerUpdatePioneerJarResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerUpdatePioneerJarResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPioneerUpdateJarRegulator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerUpdateJarRegulator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerUpdateJarRegulator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RegulatorID) > 0 {
		i -= len(m.RegulatorID)
		copy(dAtA[i:], m.RegulatorID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RegulatorID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JarID) > 0 {
		i -= len(m.JarID)
		copy(dAtA[i:], m.JarID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JarID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPioneerUpdateJarRegulatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerUpdateJarRegulatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerUpdateJarRegulatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPioneerUpdateEnclaveIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerUpdateEnclaveIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerUpdateEnclaveIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProductID) > 0 {
		i -= len(m.ProductID)
		copy(dAtA[i:], m.ProductID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProductID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SignerID) > 0 {
		i -= len(m.SignerID)
		copy(dAtA[i:], m.SignerID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniqueID) > 0 {
		i -= len(m.UniqueID)
		copy(dAtA[i:], m.UniqueID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UniqueID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPioneerUpdateEnclaveIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerUpdateEnclaveIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerUpdateEnclaveIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateWallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateWallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AcceptCredentialType) > 0 {
		i -= len(m.AcceptCredentialType)
		copy(dAtA[i:], m.AcceptCredentialType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AcceptCredentialType)))
		i--
		dAtA[i] = 0x6a
	}
	if m.TransparentWalletAmountPC != nil {
		{
			size, err := m.TransparentWalletAmountPC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.WalletAmountVShareBind != nil {
		{
			size, err := m.WalletAmountVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EncWalletAmountVShare) > 0 {
		i -= len(m.EncWalletAmountVShare)
		copy(dAtA[i:], m.EncWalletAmountVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncWalletAmountVShare)))
		i--
		dAtA[i] = 0x52
	}
	if m.WalletAmountPedersenCommit != nil {
		{
			size, err := m.WalletAmountPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.AcceptValidatedCredentialsVShareBind != nil {
		{
			size, err := m.AcceptValidatedCredentialsVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.EncAcceptValidatedCredentialsVShare) > 0 {
		i -= len(m.EncAcceptValidatedCredentialsVShare)
		copy(dAtA[i:], m.EncAcceptValidatedCredentialsVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncAcceptValidatedCredentialsVShare)))
		i--
		dAtA[i] = 0x3a
	}
	if m.AcceptPasswordPC != nil {
		{
			size, err := m.AcceptPasswordPC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreateWalletVShareBind != nil {
		{
			size, err := m.CreateWalletVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EncCreateWalletVShare) > 0 {
		i -= len(m.EncCreateWalletVShare)
		copy(dAtA[i:], m.EncCreateWalletVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncCreateWalletVShare)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServiceProviderID) > 0 {
		for iNdEx := len(m.ServiceProviderID) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceProviderID[iNdEx])
			copy(dAtA[i:], m.ServiceProviderID[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ServiceProviderID[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HomePioneerID) > 0 {
		i -= len(m.HomePioneerID)
		copy(dAtA[i:], m.HomePioneerID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HomePioneerID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransferFundsVShareBind != nil {
		{
			size, err := m.TransferFundsVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.EncTransferFundsVShare) > 0 {
		i -= len(m.EncTransferFundsVShare)
		copy(dAtA[i:], m.EncTransferFundsVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncTransferFundsVShare)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.NewSourcePCProof != nil {
		{
			size, err := m.NewSourcePCProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.HiddenTransferPCProof != nil {
		{
			size, err := m.HiddenTransferPCProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0x6a
	}
	if m.TransparentAmount != nil {
		{
			size, err := m.TransparentAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.AnonTransferFundsVShareBind != nil {
		{
			size, err := m.AnonTransferFundsVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EncAnonTransferFundsVShare) > 0 {
		i -= len(m.EncAnonTransferFundsVShare)
		copy(dAtA[i:], m.EncAnonTransferFundsVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncAnonTransferFundsVShare)))
		i--
		dAtA[i] = 0x52
	}
	if m.NewDestinationWalletAmountVShareBind != nil {
		{
			size, err := m.NewDestinationWalletAmountVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EncNewDestinationWalletAmountVShare) > 0 {
		i -= len(m.EncNewDestinationWalletAmountVShare)
		copy(dAtA[i:], m.EncNewDestinationWalletAmountVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncNewDestinationWalletAmountVShare)))
		i--
		dAtA[i] = 0x42
	}
	if m.NewSourceWalletAmountVShareBind != nil {
		{
			size, err := m.NewSourceWalletAmountVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EncNewSourceWalletAmountVShare) > 0 {
		i -= len(m.EncNewSourceWalletAmountVShare)
		copy(dAtA[i:], m.EncNewSourceWalletAmountVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncNewSourceWalletAmountVShare)))
		i--
		dAtA[i] = 0x32
	}
	if m.NewSourcePC != nil {
		{
			size, err := m.NewSourcePC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.HiddenTransferPC != nil {
		{
			size, err := m.HiddenTransferPC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SourcePC != nil {
		{
			size, err := m.SourcePC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TransactionID) > 0 {
		i -= len(m.TransactionID)
		copy(dAtA[i:], m.TransactionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReceiveFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceiveFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceiveFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReceiveFundsVShareBind != nil {
		{
			size, err := m.ReceiveFundsVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.EncReceiveFundsVShare) > 0 {
		i -= len(m.EncReceiveFundsVShare)
		copy(dAtA[i:], m.EncReceiveFundsVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncReceiveFundsVShare)))
		i--
		dAtA[i] = 0x72
	}
	if m.NewDestinationPCProof != nil {
		{
			size, err := m.NewDestinationPCProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.HiddenTransferPCProof != nil {
		{
			size, err := m.HiddenTransferPCProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0x5a
	}
	if m.TransparentAmount != nil {
		{
			size, err := m.TransparentAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.AnonReceiveFundsVShareBind != nil {
		{
			size, err := m.AnonReceiveFundsVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EncAnonReceiveFundsVShare) > 0 {
		i -= len(m.EncAnonReceiveFundsVShare)
		copy(dAtA[i:], m.EncAnonReceiveFundsVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncAnonReceiveFundsVShare)))
		i--
		dAtA[i] = 0x42
	}
	if m.NewDestinationWalletAmountVShareBind != nil {
		{
			size, err := m.NewDestinationWalletAmountVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EncNewDestinationWalletAmountVShare) > 0 {
		i -= len(m.EncNewDestinationWalletAmountVShare)
		copy(dAtA[i:], m.EncNewDestinationWalletAmountVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncNewDestinationWalletAmountVShare)))
		i--
		dAtA[i] = 0x32
	}
	if m.NewDestinationPC != nil {
		{
			size, err := m.NewDestinationPC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.HiddenTransferPC != nil {
		{
			size, err := m.HiddenTransferPC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DestinationPC != nil {
		{
			size, err := m.DestinationPC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TransactionID) > 0 {
		i -= len(m.TransactionID)
		copy(dAtA[i:], m.TransactionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReceiveFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceiveFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceiveFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeploySmartContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeploySmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeploySmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SmartContractHex) > 0 {
		i -= len(m.SmartContractHex)
		copy(dAtA[i:], m.SmartContractHex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SmartContractHex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcWalletID) > 0 {
		i -= len(m.SrcWalletID)
		copy(dAtA[i:], m.SrcWalletID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcWalletID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeploySmartContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeploySmartContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeploySmartContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecuteSmartContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteSmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteSmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SmartContractHex) > 0 {
		i -= len(m.SmartContractHex)
		copy(dAtA[i:], m.SmartContractHex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SmartContractHex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcWalletID) > 0 {
		i -= len(m.SrcWalletID)
		copy(dAtA[i:], m.SrcWalletID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcWalletID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteSmartContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteSmartContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteSmartContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReferenceCredentialID) > 0 {
		i -= len(m.ReferenceCredentialID)
		copy(dAtA[i:], m.ReferenceCredentialID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReferenceCredentialID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EKYCAppWalletID) > 0 {
		i -= len(m.EKYCAppWalletID)
		copy(dAtA[i:], m.EKYCAppWalletID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EKYCAppWalletID)))
		i--
		dAtA[i] = 0x52
	}
	if m.FindCredentialPedersenCommit != nil {
		{
			size, err := m.FindCredentialPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CredentialHashVShareBind != nil {
		{
			size, err := m.CredentialHashVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.EncCredentialHashVShare) > 0 {
		i -= len(m.EncCredentialHashVShare)
		copy(dAtA[i:], m.EncCredentialHashVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncCredentialHashVShare)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CredentialInfoVShareBind != nil {
		{
			size, err := m.CredentialInfoVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.EncCredentialInfoVShare) > 0 {
		i -= len(m.EncCredentialInfoVShare)
		copy(dAtA[i:], m.EncCredentialInfoVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncCredentialInfoVShare)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CredentialPedersenCommit != nil {
		{
			size, err := m.CredentialPedersenCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CredentialType) > 0 {
		i -= len(m.CredentialType)
		copy(dAtA[i:], m.CredentialType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CredentialID) > 0 {
		i -= len(m.CredentialID)
		copy(dAtA[i:], m.CredentialID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialType) > 0 {
		i -= len(m.CredentialType)
		copy(dAtA[i:], m.CredentialType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CredentialID) > 0 {
		i -= len(m.CredentialID)
		copy(dAtA[i:], m.CredentialID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPioneerAddPublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerAddPublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerAddPublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PubKType) > 0 {
		i -= len(m.PubKType)
		copy(dAtA[i:], m.PubKType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PubK) > 0 {
		i -= len(m.PubK)
		copy(dAtA[i:], m.PubK)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubK)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKID) > 0 {
		i -= len(m.PubKID)
		copy(dAtA[i:], m.PubKID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPioneerAddPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerAddPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerAddPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPioneerUpdateIntervalPublicKeyID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerUpdateIntervalPublicKeyID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerUpdateIntervalPublicKeyID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ExternalIPAddress) > 0 {
		i -= len(m.ExternalIPAddress)
		copy(dAtA[i:], m.ExternalIPAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExternalIPAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKID) > 0 {
		i -= len(m.PubKID)
		copy(dAtA[i:], m.PubKID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPioneerEnclaveExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerEnclaveExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerEnclaveExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MsgType) > 0 {
		i -= len(m.MsgType)
		copy(dAtA[i:], m.MsgType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MsgType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPioneerEnclaveExchangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerEnclaveExchangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerEnclaveExchangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPioneerBroadcastSecretSharePrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerBroadcastSecretSharePrivateKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerBroadcastSecretSharePrivateKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrivateKeys) > 0 {
		for iNdEx := len(m.PrivateKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProtectPrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProtectPrivateKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProtectPrivateKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecoverShare) > 0 {
		for iNdEx := len(m.RecoverShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecoverShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Threshold != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProtectPrivateKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProtectPrivateKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProtectPrivateKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignRecoverPrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignRecoverPrivateKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignRecoverPrivateKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecoverShare != nil {
		{
			size, err := m.RecoverShare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DestinationEWalletIDVShareBind != nil {
		{
			size, err := m.DestinationEWalletIDVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EncDestinationEWalletIDVShare) > 0 {
		i -= len(m.EncDestinationEWalletIDVShare)
		copy(dAtA[i:], m.EncDestinationEWalletIDVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncDestinationEWalletIDVShare)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignRecoverPrivateKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignRecoverPrivateKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignRecoverPrivateKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimCredentialExtraParmsVShareBind != nil {
		{
			size, err := m.ClaimCredentialExtraParmsVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.EncClaimCredentialExtraParmsVShare) > 0 {
		i -= len(m.EncClaimCredentialExtraParmsVShare)
		copy(dAtA[i:], m.EncClaimCredentialExtraParmsVShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncClaimCredentialExtraParmsVShare)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RecoverKey {
		i--
		if m.RecoverKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.CredentialType) > 0 {
		i -= len(m.CredentialType)
		copy(dAtA[i:], m.CredentialType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CredentialID) > 0 {
		i -= len(m.CredentialID)
		copy(dAtA[i:], m.CredentialID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateBulkCredentials) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBulkCredentials) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBulkCredentials) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BulkCredentials) > 0 {
		for iNdEx := len(m.BulkCredentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BulkCredentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.EKYCAppWalletID) > 0 {
		i -= len(m.EKYCAppWalletID)
		copy(dAtA[i:], m.EKYCAppWalletID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EKYCAppWalletID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CredentialHashVShareBind != nil {
		{
			size, err := m.CredentialHashVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CredentialInfoVShareBind != nil {
		{
			size, err := m.CredentialInfoVShareBind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CredentialType) > 0 {
		i -= len(m.CredentialType)
		copy(dAtA[i:], m.CredentialType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateBulkCredentialsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBulkCredentialsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBulkCredentialsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSuspiciousTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JarID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RegulatorPubKID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.EncSourcePersonalInfoRegulatorPubK)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncDestinationPersonalInfoRegulatorPubK)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncEAmountRegulatorPubK)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncOptInReasonRegulatorPubK)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSuspiciousTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUpdateSuspiciousTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.JarID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RegulatorPubKID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.EncSourcePersonalInfoRegulatorPubK)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncDestinationPersonalInfoRegulatorPubK)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncEAmountRegulatorPubK)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncOptInReasonRegulatorPubK)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSuspiciousTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteSuspiciousTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDeleteSuspiciousTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddPublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubK)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubKType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddServiceProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubKID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ServiceProviderType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddServiceProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeactivateServiceProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeactivateServiceProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateEnclaveIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UniqueID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SignerID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProductID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateEnclaveIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPioneerUpdatePioneerJar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PioneerID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JarID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPioneerUpdatePioneerJarResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPioneerUpdateJarRegulator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JarID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RegulatorID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPioneerUpdateJarRegulatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPioneerUpdateEnclaveIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UniqueID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SignerID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProductID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPioneerUpdateEnclaveIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HomePioneerID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ServiceProviderID) > 0 {
		for _, s := range m.ServiceProviderID {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.EncCreateWalletVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CreateWalletVShareBind != nil {
		l = m.CreateWalletVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AcceptPasswordPC != nil {
		l = m.AcceptPasswordPC.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncAcceptValidatedCredentialsVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AcceptValidatedCredentialsVShareBind != nil {
		l = m.AcceptValidatedCredentialsVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WalletAmountPedersenCommit != nil {
		l = m.WalletAmountPedersenCommit.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncWalletAmountVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WalletAmountVShareBind != nil {
		l = m.WalletAmountVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TransparentWalletAmountPC != nil {
		l = m.TransparentWalletAmountPC.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AcceptCredentialType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransactionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SourcePC != nil {
		l = m.SourcePC.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.HiddenTransferPC != nil {
		l = m.HiddenTransferPC.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewSourcePC != nil {
		l = m.NewSourcePC.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncNewSourceWalletAmountVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewSourceWalletAmountVShareBind != nil {
		l = m.NewSourceWalletAmountVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncNewDestinationWalletAmountVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewDestinationWalletAmountVShareBind != nil {
		l = m.NewDestinationWalletAmountVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncAnonTransferFundsVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AnonTransferFundsVShareBind != nil {
		l = m.AnonTransferFundsVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TransparentAmount != nil {
		l = m.TransparentAmount.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.HiddenTransferPCProof != nil {
		l = m.HiddenTransferPCProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewSourcePCProof != nil {
		l = m.NewSourcePCProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncTransferFundsVShare)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	if m.TransferFundsVShareBind != nil {
		l = m.TransferFundsVShareBind.Size()
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReceiveFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransactionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationPC != nil {
		l = m.DestinationPC.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.HiddenTransferPC != nil {
		l = m.HiddenTransferPC.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewDestinationPC != nil {
		l = m.NewDestinationPC.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncNewDestinationWalletAmountVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewDestinationWalletAmountVShareBind != nil {
		l = m.NewDestinationWalletAmountVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncAnonReceiveFundsVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AnonReceiveFundsVShareBind != nil {
		l = m.AnonReceiveFundsVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TransparentAmount != nil {
		l = m.TransparentAmount.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.HiddenTransferPCProof != nil {
		l = m.HiddenTransferPCProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewDestinationPCProof != nil {
		l = m.NewDestinationPCProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncReceiveFundsVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReceiveFundsVShareBind != nil {
		l = m.ReceiveFundsVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReceiveFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeploySmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcWalletID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SmartContractHex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeploySmartContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecuteSmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcWalletID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SmartContractHex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExecuteSmartContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CredentialID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CredentialType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CredentialPedersenCommit != nil {
		l = m.CredentialPedersenCommit.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncCredentialInfoVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CredentialInfoVShareBind != nil {
		l = m.CredentialInfoVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncCredentialHashVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CredentialHashVShareBind != nil {
		l = m.CredentialHashVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FindCredentialPedersenCommit != nil {
		l = m.FindCredentialPedersenCommit.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EKYCAppWalletID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReferenceCredentialID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CredentialID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CredentialType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPioneerAddPublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubKID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubK)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubKType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPioneerAddPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPioneerUpdateIntervalPublicKeyID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubKID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExternalIPAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPioneerEnclaveExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MsgType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPioneerEnclaveExchangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPioneerBroadcastSecretSharePrivateKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PrivateKeys) > 0 {
		for _, e := range m.PrivateKeys {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProtectPrivateKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Threshold != 0 {
		n += 1 + sovTx(uint64(m.Threshold))
	}
	if len(m.RecoverShare) > 0 {
		for _, e := range m.RecoverShare {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgProtectPrivateKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignRecoverPrivateKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncDestinationEWalletIDVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationEWalletIDVShareBind != nil {
		l = m.DestinationEWalletIDVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RecoverShare != nil {
		l = m.RecoverShare.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignRecoverPrivateKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CredentialID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CredentialType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RecoverKey {
		n += 2
	}
	l = len(m.EncClaimCredentialExtraParmsVShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClaimCredentialExtraParmsVShareBind != nil {
		l = m.ClaimCredentialExtraParmsVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateBulkCredentials) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CredentialType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CredentialInfoVShareBind != nil {
		l = m.CredentialInfoVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CredentialHashVShareBind != nil {
		l = m.CredentialHashVShareBind.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EKYCAppWalletID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BulkCredentials) > 0 {
		for _, e := range m.BulkCredentials {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateBulkCredentialsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSuspiciousTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSuspiciousTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSuspiciousTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JarID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JarID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegulatorPubKID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegulatorPubKID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncSourcePersonalInfoRegulatorPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncSourcePersonalInfoRegulatorPubK = append(m.EncSourcePersonalInfoRegulatorPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncSourcePersonalInfoRegulatorPubK == nil {
				m.EncSourcePersonalInfoRegulatorPubK = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncDestinationPersonalInfoRegulatorPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncDestinationPersonalInfoRegulatorPubK = append(m.EncDestinationPersonalInfoRegulatorPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncDestinationPersonalInfoRegulatorPubK == nil {
				m.EncDestinationPersonalInfoRegulatorPubK = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncEAmountRegulatorPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncEAmountRegulatorPubK = append(m.EncEAmountRegulatorPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncEAmountRegulatorPubK == nil {
				m.EncEAmountRegulatorPubK = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncOptInReasonRegulatorPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncOptInReasonRegulatorPubK = append(m.EncOptInReasonRegulatorPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncOptInReasonRegulatorPubK == nil {
				m.EncOptInReasonRegulatorPubK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSuspiciousTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSuspiciousTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSuspiciousTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSuspiciousTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSuspiciousTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSuspiciousTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JarID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JarID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegulatorPubKID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegulatorPubKID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncSourcePersonalInfoRegulatorPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncSourcePersonalInfoRegulatorPubK = append(m.EncSourcePersonalInfoRegulatorPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncSourcePersonalInfoRegulatorPubK == nil {
				m.EncSourcePersonalInfoRegulatorPubK = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncDestinationPersonalInfoRegulatorPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncDestinationPersonalInfoRegulatorPubK = append(m.EncDestinationPersonalInfoRegulatorPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncDestinationPersonalInfoRegulatorPubK == nil {
				m.EncDestinationPersonalInfoRegulatorPubK = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncEAmountRegulatorPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncEAmountRegulatorPubK = append(m.EncEAmountRegulatorPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncEAmountRegulatorPubK == nil {
				m.EncEAmountRegulatorPubK = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncOptInReasonRegulatorPubK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncOptInReasonRegulatorPubK = append(m.EncOptInReasonRegulatorPubK[:0], dAtA[iNdEx:postIndex]...)
			if m.EncOptInReasonRegulatorPubK == nil {
				m.EncOptInReasonRegulatorPubK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSuspiciousTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSuspiciousTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSuspiciousTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSuspiciousTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSuspiciousTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSuspiciousTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSuspiciousTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSuspiciousTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSuspiciousTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddServiceProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddServiceProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddServiceProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProviderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceProviderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddServiceProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddServiceProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddServiceProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateServiceProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateServiceProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateServiceProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateServiceProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateServiceProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateServiceProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEnclaveIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEnclaveIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEnclaveIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEnclaveIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEnclaveIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEnclaveIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerUpdatePioneerJar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerUpdatePioneerJar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerUpdatePioneerJar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PioneerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PioneerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JarID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JarID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerUpdatePioneerJarResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerUpdatePioneerJarResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerUpdatePioneerJarResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerUpdateJarRegulator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerUpdateJarRegulator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerUpdateJarRegulator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JarID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JarID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegulatorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegulatorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerUpdateJarRegulatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerUpdateJarRegulatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerUpdateJarRegulatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerUpdateEnclaveIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerUpdateEnclaveIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerUpdateEnclaveIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerUpdateEnclaveIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerUpdateEnclaveIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerUpdateEnclaveIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateWallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateWallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePioneerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePioneerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceProviderID = append(m.ServiceProviderID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCreateWalletVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCreateWalletVShare = append(m.EncCreateWalletVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCreateWalletVShare == nil {
				m.EncCreateWalletVShare = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateWalletVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateWalletVShareBind == nil {
				m.CreateWalletVShareBind = &VShareBindData{}
			}
			if err := m.CreateWalletVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptPasswordPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptPasswordPC == nil {
				m.AcceptPasswordPC = &BPedersenCommit{}
			}
			if err := m.AcceptPasswordPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncAcceptValidatedCredentialsVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncAcceptValidatedCredentialsVShare = append(m.EncAcceptValidatedCredentialsVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncAcceptValidatedCredentialsVShare == nil {
				m.EncAcceptValidatedCredentialsVShare = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptValidatedCredentialsVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptValidatedCredentialsVShareBind == nil {
				m.AcceptValidatedCredentialsVShareBind = &VShareBindData{}
			}
			if err := m.AcceptValidatedCredentialsVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAmountPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WalletAmountPedersenCommit == nil {
				m.WalletAmountPedersenCommit = &EncryptablePedersenCommit{}
			}
			if err := m.WalletAmountPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncWalletAmountVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncWalletAmountVShare = append(m.EncWalletAmountVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncWalletAmountVShare == nil {
				m.EncWalletAmountVShare = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAmountVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WalletAmountVShareBind == nil {
				m.WalletAmountVShareBind = &VShareBindData{}
			}
			if err := m.WalletAmountVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransparentWalletAmountPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransparentWalletAmountPC == nil {
				m.TransparentWalletAmountPC = &EncryptablePedersenCommit{}
			}
			if err := m.TransparentWalletAmountPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptCredentialType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptCredentialType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourcePC == nil {
				m.SourcePC = &BPedersenCommit{}
			}
			if err := m.SourcePC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenTransferPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HiddenTransferPC == nil {
				m.HiddenTransferPC = &BPedersenCommit{}
			}
			if err := m.HiddenTransferPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSourcePC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewSourcePC == nil {
				m.NewSourcePC = &BPedersenCommit{}
			}
			if err := m.NewSourcePC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncNewSourceWalletAmountVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncNewSourceWalletAmountVShare = append(m.EncNewSourceWalletAmountVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncNewSourceWalletAmountVShare == nil {
				m.EncNewSourceWalletAmountVShare = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSourceWalletAmountVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewSourceWalletAmountVShareBind == nil {
				m.NewSourceWalletAmountVShareBind = &VShareBindData{}
			}
			if err := m.NewSourceWalletAmountVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncNewDestinationWalletAmountVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncNewDestinationWalletAmountVShare = append(m.EncNewDestinationWalletAmountVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncNewDestinationWalletAmountVShare == nil {
				m.EncNewDestinationWalletAmountVShare = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDestinationWalletAmountVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewDestinationWalletAmountVShareBind == nil {
				m.NewDestinationWalletAmountVShareBind = &VShareBindData{}
			}
			if err := m.NewDestinationWalletAmountVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncAnonTransferFundsVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncAnonTransferFundsVShare = append(m.EncAnonTransferFundsVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncAnonTransferFundsVShare == nil {
				m.EncAnonTransferFundsVShare = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnonTransferFundsVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnonTransferFundsVShareBind == nil {
				m.AnonTransferFundsVShareBind = &VShareBindData{}
			}
			if err := m.AnonTransferFundsVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransparentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransparentAmount == nil {
				m.TransparentAmount = &BInt{}
			}
			if err := m.TransparentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenTransferPCProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HiddenTransferPCProof == nil {
				m.HiddenTransferPCProof = &BRangeProof{}
			}
			if err := m.HiddenTransferPCProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSourcePCProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewSourcePCProof == nil {
				m.NewSourcePCProof = &BRangeProof{}
			}
			if err := m.NewSourcePCProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncTransferFundsVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncTransferFundsVShare = append(m.EncTransferFundsVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncTransferFundsVShare == nil {
				m.EncTransferFundsVShare = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferFundsVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferFundsVShareBind == nil {
				m.TransferFundsVShareBind = &VShareBindData{}
			}
			if err := m.TransferFundsVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceiveFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceiveFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceiveFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestinationPC == nil {
				m.DestinationPC = &BPedersenCommit{}
			}
			if err := m.DestinationPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenTransferPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HiddenTransferPC == nil {
				m.HiddenTransferPC = &BPedersenCommit{}
			}
			if err := m.HiddenTransferPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDestinationPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewDestinationPC == nil {
				m.NewDestinationPC = &BPedersenCommit{}
			}
			if err := m.NewDestinationPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncNewDestinationWalletAmountVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncNewDestinationWalletAmountVShare = append(m.EncNewDestinationWalletAmountVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncNewDestinationWalletAmountVShare == nil {
				m.EncNewDestinationWalletAmountVShare = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDestinationWalletAmountVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewDestinationWalletAmountVShareBind == nil {
				m.NewDestinationWalletAmountVShareBind = &VShareBindData{}
			}
			if err := m.NewDestinationWalletAmountVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncAnonReceiveFundsVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncAnonReceiveFundsVShare = append(m.EncAnonReceiveFundsVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncAnonReceiveFundsVShare == nil {
				m.EncAnonReceiveFundsVShare = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnonReceiveFundsVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnonReceiveFundsVShareBind == nil {
				m.AnonReceiveFundsVShareBind = &VShareBindData{}
			}
			if err := m.AnonReceiveFundsVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransparentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransparentAmount == nil {
				m.TransparentAmount = &BInt{}
			}
			if err := m.TransparentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenTransferPCProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HiddenTransferPCProof == nil {
				m.HiddenTransferPCProof = &BRangeProof{}
			}
			if err := m.HiddenTransferPCProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDestinationPCProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewDestinationPCProof == nil {
				m.NewDestinationPCProof = &BRangeProof{}
			}
			if err := m.NewDestinationPCProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncReceiveFundsVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncReceiveFundsVShare = append(m.EncReceiveFundsVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncReceiveFundsVShare == nil {
				m.EncReceiveFundsVShare = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveFundsVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceiveFundsVShareBind == nil {
				m.ReceiveFundsVShareBind = &VShareBindData{}
			}
			if err := m.ReceiveFundsVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceiveFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceiveFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceiveFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeploySmartContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeploySmartContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeploySmartContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcWalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcWalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartContractHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeploySmartContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeploySmartContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeploySmartContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteSmartContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteSmartContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteSmartContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcWalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcWalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartContractHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteSmartContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteSmartContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteSmartContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialPedersenCommit == nil {
				m.CredentialPedersenCommit = &BPedersenCommit{}
			}
			if err := m.CredentialPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCredentialInfoVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCredentialInfoVShare = append(m.EncCredentialInfoVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCredentialInfoVShare == nil {
				m.EncCredentialInfoVShare = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialInfoVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialInfoVShareBind == nil {
				m.CredentialInfoVShareBind = &VShareBindData{}
			}
			if err := m.CredentialInfoVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCredentialHashVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCredentialHashVShare = append(m.EncCredentialHashVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncCredentialHashVShare == nil {
				m.EncCredentialHashVShare = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialHashVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialHashVShareBind == nil {
				m.CredentialHashVShareBind = &VShareBindData{}
			}
			if err := m.CredentialHashVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindCredentialPedersenCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FindCredentialPedersenCommit == nil {
				m.FindCredentialPedersenCommit = &BPedersenCommit{}
			}
			if err := m.FindCredentialPedersenCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EKYCAppWalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EKYCAppWalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceCredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceCredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerAddPublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerAddPublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerAddPublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, &Share{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerAddPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerAddPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerAddPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerUpdateIntervalPublicKeyID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerUpdateIntervalPublicKeyID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerUpdateIntervalPublicKeyID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerUpdateIntervalPublicKeyIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerUpdateIntervalPublicKeyIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerUpdateIntervalPublicKeyIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerEnclaveExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerEnclaveExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerEnclaveExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerEnclaveExchangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerEnclaveExchangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerEnclaveExchangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerBroadcastSecretSharePrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerBroadcastSecretSharePrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerBroadcastSecretSharePrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKeys = append(m.PrivateKeys, &SecretSharePrivK{})
			if err := m.PrivateKeys[len(m.PrivateKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPioneerBroadcastSecretSharePrivateKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPioneerBroadcastSecretSharePrivateKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPioneerBroadcastSecretSharePrivateKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProtectPrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProtectPrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProtectPrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoverShare = append(m.RecoverShare, &RecoverShare{})
			if err := m.RecoverShare[len(m.RecoverShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProtectPrivateKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProtectPrivateKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProtectPrivateKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignRecoverPrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignRecoverPrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignRecoverPrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncDestinationEWalletIDVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncDestinationEWalletIDVShare = append(m.EncDestinationEWalletIDVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncDestinationEWalletIDVShare == nil {
				m.EncDestinationEWalletIDVShare = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationEWalletIDVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestinationEWalletIDVShareBind == nil {
				m.DestinationEWalletIDVShareBind = &VShareBindData{}
			}
			if err := m.DestinationEWalletIDVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecoverShare == nil {
				m.RecoverShare = &RecoverShare{}
			}
			if err := m.RecoverShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignRecoverPrivateKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignRecoverPrivateKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignRecoverPrivateKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecoverKey = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncClaimCredentialExtraParmsVShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncClaimCredentialExtraParmsVShare = append(m.EncClaimCredentialExtraParmsVShare[:0], dAtA[iNdEx:postIndex]...)
			if m.EncClaimCredentialExtraParmsVShare == nil {
				m.EncClaimCredentialExtraParmsVShare = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimCredentialExtraParmsVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimCredentialExtraParmsVShareBind == nil {
				m.ClaimCredentialExtraParmsVShareBind = &VShareBindData{}
			}
			if err := m.ClaimCredentialExtraParmsVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBulkCredentials) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBulkCredentials: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBulkCredentials: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialInfoVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialInfoVShareBind == nil {
				m.CredentialInfoVShareBind = &VShareBindData{}
			}
			if err := m.CredentialInfoVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialHashVShareBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialHashVShareBind == nil {
				m.CredentialHashVShareBind = &VShareBindData{}
			}
			if err := m.CredentialHashVShareBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EKYCAppWalletID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EKYCAppWalletID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulkCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BulkCredentials = append(m.BulkCredentials, &BulkCredential{})
			if err := m.BulkCredentials[len(m.BulkCredentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBulkCredentialsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBulkCredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBulkCredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
