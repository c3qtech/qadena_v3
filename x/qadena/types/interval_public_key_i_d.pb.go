// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qadena/qadena/interval_public_key_i_d.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IntervalPublicKeyID struct {
	NodeID              string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NodeType            string `protobuf:"bytes,2,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
	PubKID              string `protobuf:"bytes,3,opt,name=pubKID,proto3" json:"pubKID,omitempty"`
	ExternalIPAddress   string `protobuf:"bytes,4,opt,name=externalIPAddress,proto3" json:"externalIPAddress,omitempty"`
	ServiceProviderType string `protobuf:"bytes,5,opt,name=serviceProviderType,proto3" json:"serviceProviderType,omitempty"`
	RemoteReport        []byte `protobuf:"bytes,6,opt,name=remoteReport,proto3" json:"remoteReport,omitempty"`
}

func (m *IntervalPublicKeyID) Reset()         { *m = IntervalPublicKeyID{} }
func (m *IntervalPublicKeyID) String() string { return proto.CompactTextString(m) }
func (*IntervalPublicKeyID) ProtoMessage()    {}
func (*IntervalPublicKeyID) Descriptor() ([]byte, []int) {
	return fileDescriptor_272bf86d61bec731, []int{0}
}
func (m *IntervalPublicKeyID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntervalPublicKeyID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntervalPublicKeyID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntervalPublicKeyID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntervalPublicKeyID.Merge(m, src)
}
func (m *IntervalPublicKeyID) XXX_Size() int {
	return m.Size()
}
func (m *IntervalPublicKeyID) XXX_DiscardUnknown() {
	xxx_messageInfo_IntervalPublicKeyID.DiscardUnknown(m)
}

var xxx_messageInfo_IntervalPublicKeyID proto.InternalMessageInfo

func (m *IntervalPublicKeyID) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *IntervalPublicKeyID) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *IntervalPublicKeyID) GetPubKID() string {
	if m != nil {
		return m.PubKID
	}
	return ""
}

func (m *IntervalPublicKeyID) GetExternalIPAddress() string {
	if m != nil {
		return m.ExternalIPAddress
	}
	return ""
}

func (m *IntervalPublicKeyID) GetServiceProviderType() string {
	if m != nil {
		return m.ServiceProviderType
	}
	return ""
}

func (m *IntervalPublicKeyID) GetRemoteReport() []byte {
	if m != nil {
		return m.RemoteReport
	}
	return nil
}

func init() {
	proto.RegisterType((*IntervalPublicKeyID)(nil), "qadena.qadena.IntervalPublicKeyID")
}

func init() {
	proto.RegisterFile("qadena/qadena/interval_public_key_i_d.proto", fileDescriptor_272bf86d61bec731)
}

var fileDescriptor_272bf86d61bec731 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2e, 0x4c, 0x4c, 0x49,
	0xcd, 0x4b, 0xd4, 0x87, 0x52, 0x99, 0x79, 0x25, 0xa9, 0x45, 0x65, 0x89, 0x39, 0xf1, 0x05, 0xa5,
	0x49, 0x39, 0x99, 0xc9, 0xf1, 0xd9, 0xa9, 0x95, 0xf1, 0x99, 0xf1, 0x29, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0xbc, 0x10, 0x55, 0x7a, 0x10, 0x4a, 0xe9, 0x29, 0x23, 0x97, 0xb0, 0x27, 0x54,
	0x43, 0x00, 0x58, 0xbd, 0x77, 0x6a, 0xa5, 0xa7, 0x8b, 0x90, 0x18, 0x17, 0x5b, 0x5e, 0x7e, 0x4a,
	0xaa, 0xa7, 0x8b, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x94, 0x27, 0x24, 0xc5, 0xc5, 0x01,
	0x62, 0x85, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x81, 0x65, 0xe0, 0x7c, 0x90, 0x9e, 0x82, 0xd2, 0x24,
	0x6f, 0x4f, 0x17, 0x09, 0x66, 0x88, 0x1e, 0x08, 0x4f, 0x48, 0x87, 0x4b, 0x30, 0xb5, 0xa2, 0x24,
	0xb5, 0x28, 0x2f, 0x31, 0xc7, 0x33, 0xc0, 0x31, 0x25, 0xa5, 0x28, 0xb5, 0xb8, 0x58, 0x82, 0x05,
	0xac, 0x04, 0x53, 0x42, 0xc8, 0x80, 0x4b, 0xb8, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x35, 0xa0,
	0x28, 0xbf, 0x2c, 0x33, 0x25, 0xb5, 0x08, 0x6c, 0x19, 0x2b, 0x58, 0x3d, 0x36, 0x29, 0x21, 0x25,
	0x2e, 0x9e, 0xa2, 0xd4, 0xdc, 0xfc, 0x92, 0xd4, 0xa0, 0xd4, 0x82, 0xfc, 0xa2, 0x12, 0x09, 0x36,
	0x05, 0x46, 0x0d, 0x9e, 0x20, 0x14, 0x31, 0x27, 0xfd, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92,
	0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c,
	0x96, 0x63, 0x88, 0x12, 0x85, 0x06, 0x5b, 0x05, 0x2c, 0xfc, 0x4a, 0x2a, 0x0b, 0x52, 0x8b, 0x93,
	0xd8, 0xc0, 0xc1, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x67, 0x88, 0x9a, 0xc1, 0x5d, 0x01,
	0x00, 0x00,
}

func (m *IntervalPublicKeyID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntervalPublicKeyID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntervalPublicKeyID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteReport) > 0 {
		i -= len(m.RemoteReport)
		copy(dAtA[i:], m.RemoteReport)
		i = encodeVarintIntervalPublicKeyID(dAtA, i, uint64(len(m.RemoteReport)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ServiceProviderType) > 0 {
		i -= len(m.ServiceProviderType)
		copy(dAtA[i:], m.ServiceProviderType)
		i = encodeVarintIntervalPublicKeyID(dAtA, i, uint64(len(m.ServiceProviderType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIPAddress) > 0 {
		i -= len(m.ExternalIPAddress)
		copy(dAtA[i:], m.ExternalIPAddress)
		i = encodeVarintIntervalPublicKeyID(dAtA, i, uint64(len(m.ExternalIPAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PubKID) > 0 {
		i -= len(m.PubKID)
		copy(dAtA[i:], m.PubKID)
		i = encodeVarintIntervalPublicKeyID(dAtA, i, uint64(len(m.PubKID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintIntervalPublicKeyID(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintIntervalPublicKeyID(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIntervalPublicKeyID(dAtA []byte, offset int, v uint64) int {
	offset -= sovIntervalPublicKeyID(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IntervalPublicKeyID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovIntervalPublicKeyID(uint64(l))
	}
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovIntervalPublicKeyID(uint64(l))
	}
	l = len(m.PubKID)
	if l > 0 {
		n += 1 + l + sovIntervalPublicKeyID(uint64(l))
	}
	l = len(m.ExternalIPAddress)
	if l > 0 {
		n += 1 + l + sovIntervalPublicKeyID(uint64(l))
	}
	l = len(m.ServiceProviderType)
	if l > 0 {
		n += 1 + l + sovIntervalPublicKeyID(uint64(l))
	}
	l = len(m.RemoteReport)
	if l > 0 {
		n += 1 + l + sovIntervalPublicKeyID(uint64(l))
	}
	return n
}

func sovIntervalPublicKeyID(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIntervalPublicKeyID(x uint64) (n int) {
	return sovIntervalPublicKeyID(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IntervalPublicKeyID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntervalPublicKeyID
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntervalPublicKeyID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntervalPublicKeyID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntervalPublicKeyID
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntervalPublicKeyID
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntervalPublicKeyID
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntervalPublicKeyID
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProviderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntervalPublicKeyID
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceProviderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntervalPublicKeyID
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteReport = append(m.RemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteReport == nil {
				m.RemoteReport = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIntervalPublicKeyID(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIntervalPublicKeyID
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIntervalPublicKeyID(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIntervalPublicKeyID
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIntervalPublicKeyID
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIntervalPublicKeyID
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIntervalPublicKeyID
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIntervalPublicKeyID
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIntervalPublicKeyID
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIntervalPublicKeyID        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIntervalPublicKeyID          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIntervalPublicKeyID = fmt.Errorf("proto: unexpected end of group")
)
