// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package dsvs

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_VShareBindData_1_list)(nil)

type _VShareBindData_1_list struct {
	list *[]*VShareBindDataInternal
}

func (x *_VShareBindData_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VShareBindData_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_VShareBindData_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VShareBindDataInternal)
	(*x.list)[i] = concreteValue
}

func (x *_VShareBindData_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VShareBindDataInternal)
	*x.list = append(*x.list, concreteValue)
}

func (x *_VShareBindData_1_list) AppendMutable() protoreflect.Value {
	v := new(VShareBindDataInternal)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VShareBindData_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_VShareBindData_1_list) NewElement() protoreflect.Value {
	v := new(VShareBindDataInternal)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VShareBindData_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_VShareBindData      protoreflect.MessageDescriptor
	fd_VShareBindData_Data protoreflect.FieldDescriptor
)

func init() {
	file_qadena_dsvs_v_share_bind_data_proto_init()
	md_VShareBindData = File_qadena_dsvs_v_share_bind_data_proto.Messages().ByName("VShareBindData")
	fd_VShareBindData_Data = md_VShareBindData.Fields().ByName("Data")
}

var _ protoreflect.Message = (*fastReflection_VShareBindData)(nil)

type fastReflection_VShareBindData VShareBindData

func (x *VShareBindData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VShareBindData)(x)
}

func (x *VShareBindData) slowProtoReflect() protoreflect.Message {
	mi := &file_qadena_dsvs_v_share_bind_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VShareBindData_messageType fastReflection_VShareBindData_messageType
var _ protoreflect.MessageType = fastReflection_VShareBindData_messageType{}

type fastReflection_VShareBindData_messageType struct{}

func (x fastReflection_VShareBindData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VShareBindData)(nil)
}
func (x fastReflection_VShareBindData_messageType) New() protoreflect.Message {
	return new(fastReflection_VShareBindData)
}
func (x fastReflection_VShareBindData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VShareBindData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VShareBindData) Descriptor() protoreflect.MessageDescriptor {
	return md_VShareBindData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VShareBindData) Type() protoreflect.MessageType {
	return _fastReflection_VShareBindData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VShareBindData) New() protoreflect.Message {
	return new(fastReflection_VShareBindData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VShareBindData) Interface() protoreflect.ProtoMessage {
	return (*VShareBindData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VShareBindData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Data) != 0 {
		value := protoreflect.ValueOfList(&_VShareBindData_1_list{list: &x.Data})
		if !f(fd_VShareBindData_Data, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VShareBindData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "qadena.dsvs.VShareBindData.Data":
		return len(x.Data) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindData"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VShareBindData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "qadena.dsvs.VShareBindData.Data":
		x.Data = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindData"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VShareBindData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "qadena.dsvs.VShareBindData.Data":
		if len(x.Data) == 0 {
			return protoreflect.ValueOfList(&_VShareBindData_1_list{})
		}
		listValue := &_VShareBindData_1_list{list: &x.Data}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindData"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VShareBindData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "qadena.dsvs.VShareBindData.Data":
		lv := value.List()
		clv := lv.(*_VShareBindData_1_list)
		x.Data = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindData"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VShareBindData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.dsvs.VShareBindData.Data":
		if x.Data == nil {
			x.Data = []*VShareBindDataInternal{}
		}
		value := &_VShareBindData_1_list{list: &x.Data}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindData"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VShareBindData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.dsvs.VShareBindData.Data":
		list := []*VShareBindDataInternal{}
		return protoreflect.ValueOfList(&_VShareBindData_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindData"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VShareBindData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in qadena.dsvs.VShareBindData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VShareBindData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VShareBindData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VShareBindData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VShareBindData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VShareBindData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Data) > 0 {
			for _, e := range x.Data {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VShareBindData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Data) > 0 {
			for iNdEx := len(x.Data) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Data[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VShareBindData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VShareBindData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VShareBindData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = append(x.Data, &VShareBindDataInternal{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Data[len(x.Data)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BECPointInfo          protoreflect.MessageDescriptor
	fd_BECPointInfo_ECPoint  protoreflect.FieldDescriptor
	fd_BECPointInfo_NodeType protoreflect.FieldDescriptor
	fd_BECPointInfo_NodeID   protoreflect.FieldDescriptor
)

func init() {
	file_qadena_dsvs_v_share_bind_data_proto_init()
	md_BECPointInfo = File_qadena_dsvs_v_share_bind_data_proto.Messages().ByName("BECPointInfo")
	fd_BECPointInfo_ECPoint = md_BECPointInfo.Fields().ByName("ECPoint")
	fd_BECPointInfo_NodeType = md_BECPointInfo.Fields().ByName("NodeType")
	fd_BECPointInfo_NodeID = md_BECPointInfo.Fields().ByName("NodeID")
}

var _ protoreflect.Message = (*fastReflection_BECPointInfo)(nil)

type fastReflection_BECPointInfo BECPointInfo

func (x *BECPointInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BECPointInfo)(x)
}

func (x *BECPointInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_qadena_dsvs_v_share_bind_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BECPointInfo_messageType fastReflection_BECPointInfo_messageType
var _ protoreflect.MessageType = fastReflection_BECPointInfo_messageType{}

type fastReflection_BECPointInfo_messageType struct{}

func (x fastReflection_BECPointInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BECPointInfo)(nil)
}
func (x fastReflection_BECPointInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_BECPointInfo)
}
func (x fastReflection_BECPointInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BECPointInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BECPointInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_BECPointInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BECPointInfo) Type() protoreflect.MessageType {
	return _fastReflection_BECPointInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BECPointInfo) New() protoreflect.Message {
	return new(fastReflection_BECPointInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BECPointInfo) Interface() protoreflect.ProtoMessage {
	return (*BECPointInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BECPointInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ECPoint != nil {
		value := protoreflect.ValueOfMessage(x.ECPoint.ProtoReflect())
		if !f(fd_BECPointInfo_ECPoint, value) {
			return
		}
	}
	if x.NodeType != "" {
		value := protoreflect.ValueOfString(x.NodeType)
		if !f(fd_BECPointInfo_NodeType, value) {
			return
		}
	}
	if x.NodeID != "" {
		value := protoreflect.ValueOfString(x.NodeID)
		if !f(fd_BECPointInfo_NodeID, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BECPointInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "qadena.dsvs.BECPointInfo.ECPoint":
		return x.ECPoint != nil
	case "qadena.dsvs.BECPointInfo.NodeType":
		return x.NodeType != ""
	case "qadena.dsvs.BECPointInfo.NodeID":
		return x.NodeID != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.BECPointInfo"))
		}
		panic(fmt.Errorf("message qadena.dsvs.BECPointInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BECPointInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "qadena.dsvs.BECPointInfo.ECPoint":
		x.ECPoint = nil
	case "qadena.dsvs.BECPointInfo.NodeType":
		x.NodeType = ""
	case "qadena.dsvs.BECPointInfo.NodeID":
		x.NodeID = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.BECPointInfo"))
		}
		panic(fmt.Errorf("message qadena.dsvs.BECPointInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BECPointInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "qadena.dsvs.BECPointInfo.ECPoint":
		value := x.ECPoint
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.dsvs.BECPointInfo.NodeType":
		value := x.NodeType
		return protoreflect.ValueOfString(value)
	case "qadena.dsvs.BECPointInfo.NodeID":
		value := x.NodeID
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.BECPointInfo"))
		}
		panic(fmt.Errorf("message qadena.dsvs.BECPointInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BECPointInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "qadena.dsvs.BECPointInfo.ECPoint":
		x.ECPoint = value.Message().Interface().(*BECPoint)
	case "qadena.dsvs.BECPointInfo.NodeType":
		x.NodeType = value.Interface().(string)
	case "qadena.dsvs.BECPointInfo.NodeID":
		x.NodeID = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.BECPointInfo"))
		}
		panic(fmt.Errorf("message qadena.dsvs.BECPointInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BECPointInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.dsvs.BECPointInfo.ECPoint":
		if x.ECPoint == nil {
			x.ECPoint = new(BECPoint)
		}
		return protoreflect.ValueOfMessage(x.ECPoint.ProtoReflect())
	case "qadena.dsvs.BECPointInfo.NodeType":
		panic(fmt.Errorf("field NodeType of message qadena.dsvs.BECPointInfo is not mutable"))
	case "qadena.dsvs.BECPointInfo.NodeID":
		panic(fmt.Errorf("field NodeID of message qadena.dsvs.BECPointInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.BECPointInfo"))
		}
		panic(fmt.Errorf("message qadena.dsvs.BECPointInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BECPointInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.dsvs.BECPointInfo.ECPoint":
		m := new(BECPoint)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.dsvs.BECPointInfo.NodeType":
		return protoreflect.ValueOfString("")
	case "qadena.dsvs.BECPointInfo.NodeID":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.BECPointInfo"))
		}
		panic(fmt.Errorf("message qadena.dsvs.BECPointInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BECPointInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in qadena.dsvs.BECPointInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BECPointInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BECPointInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BECPointInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BECPointInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BECPointInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ECPoint != nil {
			l = options.Size(x.ECPoint)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NodeType)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NodeID)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BECPointInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.NodeID) > 0 {
			i -= len(x.NodeID)
			copy(dAtA[i:], x.NodeID)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NodeID)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.NodeType) > 0 {
			i -= len(x.NodeType)
			copy(dAtA[i:], x.NodeType)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NodeType)))
			i--
			dAtA[i] = 0x12
		}
		if x.ECPoint != nil {
			encoded, err := options.Marshal(x.ECPoint)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BECPointInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BECPointInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BECPointInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ECPoint", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ECPoint == nil {
					x.ECPoint = &BECPoint{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ECPoint); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NodeType = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NodeID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_VShareBindDataInternal_5_list)(nil)

type _VShareBindDataInternal_5_list struct {
	list *[]*BECPointInfo
}

func (x *_VShareBindDataInternal_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VShareBindDataInternal_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_VShareBindDataInternal_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BECPointInfo)
	(*x.list)[i] = concreteValue
}

func (x *_VShareBindDataInternal_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BECPointInfo)
	*x.list = append(*x.list, concreteValue)
}

func (x *_VShareBindDataInternal_5_list) AppendMutable() protoreflect.Value {
	v := new(BECPointInfo)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VShareBindDataInternal_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_VShareBindDataInternal_5_list) NewElement() protoreflect.Value {
	v := new(BECPointInfo)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VShareBindDataInternal_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_VShareBindDataInternal_7_list)(nil)

type _VShareBindDataInternal_7_list struct {
	list *[]*BVSharedSecret
}

func (x *_VShareBindDataInternal_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VShareBindDataInternal_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_VShareBindDataInternal_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BVSharedSecret)
	(*x.list)[i] = concreteValue
}

func (x *_VShareBindDataInternal_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BVSharedSecret)
	*x.list = append(*x.list, concreteValue)
}

func (x *_VShareBindDataInternal_7_list) AppendMutable() protoreflect.Value {
	v := new(BVSharedSecret)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VShareBindDataInternal_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_VShareBindDataInternal_7_list) NewElement() protoreflect.Value {
	v := new(BVSharedSecret)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VShareBindDataInternal_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_VShareBindDataInternal    protoreflect.MessageDescriptor
	fd_VShareBindDataInternal_W  protoreflect.FieldDescriptor
	fd_VShareBindDataInternal_Z  protoreflect.FieldDescriptor
	fd_VShareBindDataInternal_C  protoreflect.FieldDescriptor
	fd_VShareBindDataInternal_Y  protoreflect.FieldDescriptor
	fd_VShareBindDataInternal_Cc protoreflect.FieldDescriptor
	fd_VShareBindDataInternal_R  protoreflect.FieldDescriptor
	fd_VShareBindDataInternal_Rr protoreflect.FieldDescriptor
)

func init() {
	file_qadena_dsvs_v_share_bind_data_proto_init()
	md_VShareBindDataInternal = File_qadena_dsvs_v_share_bind_data_proto.Messages().ByName("VShareBindDataInternal")
	fd_VShareBindDataInternal_W = md_VShareBindDataInternal.Fields().ByName("W")
	fd_VShareBindDataInternal_Z = md_VShareBindDataInternal.Fields().ByName("Z")
	fd_VShareBindDataInternal_C = md_VShareBindDataInternal.Fields().ByName("C")
	fd_VShareBindDataInternal_Y = md_VShareBindDataInternal.Fields().ByName("Y")
	fd_VShareBindDataInternal_Cc = md_VShareBindDataInternal.Fields().ByName("Cc")
	fd_VShareBindDataInternal_R = md_VShareBindDataInternal.Fields().ByName("R")
	fd_VShareBindDataInternal_Rr = md_VShareBindDataInternal.Fields().ByName("Rr")
}

var _ protoreflect.Message = (*fastReflection_VShareBindDataInternal)(nil)

type fastReflection_VShareBindDataInternal VShareBindDataInternal

func (x *VShareBindDataInternal) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VShareBindDataInternal)(x)
}

func (x *VShareBindDataInternal) slowProtoReflect() protoreflect.Message {
	mi := &file_qadena_dsvs_v_share_bind_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VShareBindDataInternal_messageType fastReflection_VShareBindDataInternal_messageType
var _ protoreflect.MessageType = fastReflection_VShareBindDataInternal_messageType{}

type fastReflection_VShareBindDataInternal_messageType struct{}

func (x fastReflection_VShareBindDataInternal_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VShareBindDataInternal)(nil)
}
func (x fastReflection_VShareBindDataInternal_messageType) New() protoreflect.Message {
	return new(fastReflection_VShareBindDataInternal)
}
func (x fastReflection_VShareBindDataInternal_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VShareBindDataInternal
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VShareBindDataInternal) Descriptor() protoreflect.MessageDescriptor {
	return md_VShareBindDataInternal
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VShareBindDataInternal) Type() protoreflect.MessageType {
	return _fastReflection_VShareBindDataInternal_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VShareBindDataInternal) New() protoreflect.Message {
	return new(fastReflection_VShareBindDataInternal)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VShareBindDataInternal) Interface() protoreflect.ProtoMessage {
	return (*VShareBindDataInternal)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VShareBindDataInternal) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.W != nil {
		value := protoreflect.ValueOfMessage(x.W.ProtoReflect())
		if !f(fd_VShareBindDataInternal_W, value) {
			return
		}
	}
	if x.Z != nil {
		value := protoreflect.ValueOfMessage(x.Z.ProtoReflect())
		if !f(fd_VShareBindDataInternal_Z, value) {
			return
		}
	}
	if x.C != nil {
		value := protoreflect.ValueOfMessage(x.C.ProtoReflect())
		if !f(fd_VShareBindDataInternal_C, value) {
			return
		}
	}
	if x.Y != nil {
		value := protoreflect.ValueOfMessage(x.Y.ProtoReflect())
		if !f(fd_VShareBindDataInternal_Y, value) {
			return
		}
	}
	if len(x.Cc) != 0 {
		value := protoreflect.ValueOfList(&_VShareBindDataInternal_5_list{list: &x.Cc})
		if !f(fd_VShareBindDataInternal_Cc, value) {
			return
		}
	}
	if x.R != nil {
		value := protoreflect.ValueOfMessage(x.R.ProtoReflect())
		if !f(fd_VShareBindDataInternal_R, value) {
			return
		}
	}
	if len(x.Rr) != 0 {
		value := protoreflect.ValueOfList(&_VShareBindDataInternal_7_list{list: &x.Rr})
		if !f(fd_VShareBindDataInternal_Rr, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VShareBindDataInternal) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "qadena.dsvs.VShareBindDataInternal.W":
		return x.W != nil
	case "qadena.dsvs.VShareBindDataInternal.Z":
		return x.Z != nil
	case "qadena.dsvs.VShareBindDataInternal.C":
		return x.C != nil
	case "qadena.dsvs.VShareBindDataInternal.Y":
		return x.Y != nil
	case "qadena.dsvs.VShareBindDataInternal.Cc":
		return len(x.Cc) != 0
	case "qadena.dsvs.VShareBindDataInternal.R":
		return x.R != nil
	case "qadena.dsvs.VShareBindDataInternal.Rr":
		return len(x.Rr) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindDataInternal"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindDataInternal does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VShareBindDataInternal) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "qadena.dsvs.VShareBindDataInternal.W":
		x.W = nil
	case "qadena.dsvs.VShareBindDataInternal.Z":
		x.Z = nil
	case "qadena.dsvs.VShareBindDataInternal.C":
		x.C = nil
	case "qadena.dsvs.VShareBindDataInternal.Y":
		x.Y = nil
	case "qadena.dsvs.VShareBindDataInternal.Cc":
		x.Cc = nil
	case "qadena.dsvs.VShareBindDataInternal.R":
		x.R = nil
	case "qadena.dsvs.VShareBindDataInternal.Rr":
		x.Rr = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindDataInternal"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindDataInternal does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VShareBindDataInternal) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "qadena.dsvs.VShareBindDataInternal.W":
		value := x.W
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Z":
		value := x.Z
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.C":
		value := x.C
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Y":
		value := x.Y
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Cc":
		if len(x.Cc) == 0 {
			return protoreflect.ValueOfList(&_VShareBindDataInternal_5_list{})
		}
		listValue := &_VShareBindDataInternal_5_list{list: &x.Cc}
		return protoreflect.ValueOfList(listValue)
	case "qadena.dsvs.VShareBindDataInternal.R":
		value := x.R
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Rr":
		if len(x.Rr) == 0 {
			return protoreflect.ValueOfList(&_VShareBindDataInternal_7_list{})
		}
		listValue := &_VShareBindDataInternal_7_list{list: &x.Rr}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindDataInternal"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindDataInternal does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VShareBindDataInternal) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "qadena.dsvs.VShareBindDataInternal.W":
		x.W = value.Message().Interface().(*BInt)
	case "qadena.dsvs.VShareBindDataInternal.Z":
		x.Z = value.Message().Interface().(*BInt)
	case "qadena.dsvs.VShareBindDataInternal.C":
		x.C = value.Message().Interface().(*BECPoint)
	case "qadena.dsvs.VShareBindDataInternal.Y":
		x.Y = value.Message().Interface().(*BECPointInfo)
	case "qadena.dsvs.VShareBindDataInternal.Cc":
		lv := value.List()
		clv := lv.(*_VShareBindDataInternal_5_list)
		x.Cc = *clv.list
	case "qadena.dsvs.VShareBindDataInternal.R":
		x.R = value.Message().Interface().(*BVSharedSecret)
	case "qadena.dsvs.VShareBindDataInternal.Rr":
		lv := value.List()
		clv := lv.(*_VShareBindDataInternal_7_list)
		x.Rr = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindDataInternal"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindDataInternal does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VShareBindDataInternal) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.dsvs.VShareBindDataInternal.W":
		if x.W == nil {
			x.W = new(BInt)
		}
		return protoreflect.ValueOfMessage(x.W.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Z":
		if x.Z == nil {
			x.Z = new(BInt)
		}
		return protoreflect.ValueOfMessage(x.Z.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.C":
		if x.C == nil {
			x.C = new(BECPoint)
		}
		return protoreflect.ValueOfMessage(x.C.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Y":
		if x.Y == nil {
			x.Y = new(BECPointInfo)
		}
		return protoreflect.ValueOfMessage(x.Y.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Cc":
		if x.Cc == nil {
			x.Cc = []*BECPointInfo{}
		}
		value := &_VShareBindDataInternal_5_list{list: &x.Cc}
		return protoreflect.ValueOfList(value)
	case "qadena.dsvs.VShareBindDataInternal.R":
		if x.R == nil {
			x.R = new(BVSharedSecret)
		}
		return protoreflect.ValueOfMessage(x.R.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Rr":
		if x.Rr == nil {
			x.Rr = []*BVSharedSecret{}
		}
		value := &_VShareBindDataInternal_7_list{list: &x.Rr}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindDataInternal"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindDataInternal does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VShareBindDataInternal) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.dsvs.VShareBindDataInternal.W":
		m := new(BInt)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Z":
		m := new(BInt)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.C":
		m := new(BECPoint)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Y":
		m := new(BECPointInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Cc":
		list := []*BECPointInfo{}
		return protoreflect.ValueOfList(&_VShareBindDataInternal_5_list{list: &list})
	case "qadena.dsvs.VShareBindDataInternal.R":
		m := new(BVSharedSecret)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.dsvs.VShareBindDataInternal.Rr":
		list := []*BVSharedSecret{}
		return protoreflect.ValueOfList(&_VShareBindDataInternal_7_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.dsvs.VShareBindDataInternal"))
		}
		panic(fmt.Errorf("message qadena.dsvs.VShareBindDataInternal does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VShareBindDataInternal) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in qadena.dsvs.VShareBindDataInternal", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VShareBindDataInternal) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VShareBindDataInternal) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VShareBindDataInternal) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VShareBindDataInternal) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VShareBindDataInternal)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.W != nil {
			l = options.Size(x.W)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Z != nil {
			l = options.Size(x.Z)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.C != nil {
			l = options.Size(x.C)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Y != nil {
			l = options.Size(x.Y)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Cc) > 0 {
			for _, e := range x.Cc {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.R != nil {
			l = options.Size(x.R)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Rr) > 0 {
			for _, e := range x.Rr {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VShareBindDataInternal)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Rr) > 0 {
			for iNdEx := len(x.Rr) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Rr[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.R != nil {
			encoded, err := options.Marshal(x.R)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Cc) > 0 {
			for iNdEx := len(x.Cc) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Cc[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.Y != nil {
			encoded, err := options.Marshal(x.Y)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.C != nil {
			encoded, err := options.Marshal(x.C)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Z != nil {
			encoded, err := options.Marshal(x.Z)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.W != nil {
			encoded, err := options.Marshal(x.W)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VShareBindDataInternal)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VShareBindDataInternal: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VShareBindDataInternal: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.W == nil {
					x.W = &BInt{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.W); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Z == nil {
					x.Z = &BInt{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Z); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.C == nil {
					x.C = &BECPoint{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.C); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Y == nil {
					x.Y = &BECPointInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Y); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Cc", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Cc = append(x.Cc, &BECPointInfo{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Cc[len(x.Cc)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.R == nil {
					x.R = &BVSharedSecret{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.R); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Rr", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Rr = append(x.Rr, &BVSharedSecret{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Rr[len(x.Rr)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: qadena/dsvs/v_share_bind_data.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VShareBindData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*VShareBindDataInternal `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *VShareBindData) Reset() {
	*x = VShareBindData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qadena_dsvs_v_share_bind_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VShareBindData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VShareBindData) ProtoMessage() {}

// Deprecated: Use VShareBindData.ProtoReflect.Descriptor instead.
func (*VShareBindData) Descriptor() ([]byte, []int) {
	return file_qadena_dsvs_v_share_bind_data_proto_rawDescGZIP(), []int{0}
}

func (x *VShareBindData) GetData() []*VShareBindDataInternal {
	if x != nil {
		return x.Data
	}
	return nil
}

type BECPointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ECPoint  *BECPoint `protobuf:"bytes,1,opt,name=ECPoint,proto3" json:"ECPoint,omitempty"`
	NodeType string    `protobuf:"bytes,2,opt,name=NodeType,proto3" json:"NodeType,omitempty"`
	NodeID   string    `protobuf:"bytes,3,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
}

func (x *BECPointInfo) Reset() {
	*x = BECPointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qadena_dsvs_v_share_bind_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BECPointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BECPointInfo) ProtoMessage() {}

// Deprecated: Use BECPointInfo.ProtoReflect.Descriptor instead.
func (*BECPointInfo) Descriptor() ([]byte, []int) {
	return file_qadena_dsvs_v_share_bind_data_proto_rawDescGZIP(), []int{1}
}

func (x *BECPointInfo) GetECPoint() *BECPoint {
	if x != nil {
		return x.ECPoint
	}
	return nil
}

func (x *BECPointInfo) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *BECPointInfo) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

type VShareBindDataInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	W  *BInt             `protobuf:"bytes,1,opt,name=W,proto3" json:"W,omitempty"`
	Z  *BInt             `protobuf:"bytes,2,opt,name=Z,proto3" json:"Z,omitempty"`
	C  *BECPoint         `protobuf:"bytes,3,opt,name=C,proto3" json:"C,omitempty"`
	Y  *BECPointInfo     `protobuf:"bytes,4,opt,name=Y,proto3" json:"Y,omitempty"`
	Cc []*BECPointInfo   `protobuf:"bytes,5,rep,name=Cc,proto3" json:"Cc,omitempty"`
	R  *BVSharedSecret   `protobuf:"bytes,6,opt,name=R,proto3" json:"R,omitempty"`
	Rr []*BVSharedSecret `protobuf:"bytes,7,rep,name=Rr,proto3" json:"Rr,omitempty"`
}

func (x *VShareBindDataInternal) Reset() {
	*x = VShareBindDataInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qadena_dsvs_v_share_bind_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VShareBindDataInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VShareBindDataInternal) ProtoMessage() {}

// Deprecated: Use VShareBindDataInternal.ProtoReflect.Descriptor instead.
func (*VShareBindDataInternal) Descriptor() ([]byte, []int) {
	return file_qadena_dsvs_v_share_bind_data_proto_rawDescGZIP(), []int{2}
}

func (x *VShareBindDataInternal) GetW() *BInt {
	if x != nil {
		return x.W
	}
	return nil
}

func (x *VShareBindDataInternal) GetZ() *BInt {
	if x != nil {
		return x.Z
	}
	return nil
}

func (x *VShareBindDataInternal) GetC() *BECPoint {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *VShareBindDataInternal) GetY() *BECPointInfo {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *VShareBindDataInternal) GetCc() []*BECPointInfo {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *VShareBindDataInternal) GetR() *BVSharedSecret {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *VShareBindDataInternal) GetRr() []*BVSharedSecret {
	if x != nil {
		return x.Rr
	}
	return nil
}

var File_qadena_dsvs_v_share_bind_data_proto protoreflect.FileDescriptor

var file_qadena_dsvs_v_share_bind_data_proto_rawDesc = []byte{
	0x0a, 0x23, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f, 0x64, 0x73, 0x76, 0x73, 0x2f, 0x76, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x64, 0x73,
	0x76, 0x73, 0x1a, 0x1a, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f, 0x64, 0x73, 0x76, 0x73, 0x2f,
	0x65, 0x63, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f, 0x64, 0x73, 0x76, 0x73, 0x2f, 0x62, 0x69, 0x67, 0x69,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61,
	0x2f, 0x64, 0x73, 0x76, 0x73, 0x2f, 0x62, 0x5f, 0x76, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a,
	0x0e, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x64, 0x73, 0x76, 0x73, 0x2e, 0x56, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x0c, 0x42, 0x45, 0x43, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x45, 0x43, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x61, 0x64, 0x65,
	0x6e, 0x61, 0x2e, 0x64, 0x73, 0x76, 0x73, 0x2e, 0x42, 0x45, 0x43, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x07, 0x45, 0x43, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0xab, 0x02,
	0x0a, 0x16, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x01, 0x57, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x64, 0x73, 0x76,
	0x73, 0x2e, 0x42, 0x49, 0x6e, 0x74, 0x52, 0x01, 0x57, 0x12, 0x1f, 0x0a, 0x01, 0x5a, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x64, 0x73,
	0x76, 0x73, 0x2e, 0x42, 0x49, 0x6e, 0x74, 0x52, 0x01, 0x5a, 0x12, 0x23, 0x0a, 0x01, 0x43, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x64,
	0x73, 0x76, 0x73, 0x2e, 0x42, 0x45, 0x43, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x01, 0x43, 0x12,
	0x27, 0x0a, 0x01, 0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x71, 0x61, 0x64,
	0x65, 0x6e, 0x61, 0x2e, 0x64, 0x73, 0x76, 0x73, 0x2e, 0x42, 0x45, 0x43, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x59, 0x12, 0x29, 0x0a, 0x02, 0x43, 0x63, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x64, 0x73,
	0x76, 0x73, 0x2e, 0x42, 0x45, 0x43, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x02, 0x43, 0x63, 0x12, 0x29, 0x0a, 0x01, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x64, 0x73, 0x76, 0x73, 0x2e, 0x42, 0x56, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x01, 0x52, 0x12, 0x2b,
	0x0a, 0x02, 0x52, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x61, 0x64,
	0x65, 0x6e, 0x61, 0x2e, 0x64, 0x73, 0x76, 0x73, 0x2e, 0x42, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x02, 0x52, 0x72, 0x42, 0x91, 0x01, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x64, 0x73, 0x76, 0x73, 0x42,
	0x13, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f,
	0x64, 0x73, 0x76, 0x73, 0xa2, 0x02, 0x03, 0x51, 0x44, 0x58, 0xaa, 0x02, 0x0b, 0x51, 0x61, 0x64,
	0x65, 0x6e, 0x61, 0x2e, 0x44, 0x73, 0x76, 0x73, 0xca, 0x02, 0x0b, 0x51, 0x61, 0x64, 0x65, 0x6e,
	0x61, 0x5c, 0x44, 0x73, 0x76, 0x73, 0xe2, 0x02, 0x17, 0x51, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x5c,
	0x44, 0x73, 0x76, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0c, 0x51, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x3a, 0x3a, 0x44, 0x73, 0x76, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_qadena_dsvs_v_share_bind_data_proto_rawDescOnce sync.Once
	file_qadena_dsvs_v_share_bind_data_proto_rawDescData = file_qadena_dsvs_v_share_bind_data_proto_rawDesc
)

func file_qadena_dsvs_v_share_bind_data_proto_rawDescGZIP() []byte {
	file_qadena_dsvs_v_share_bind_data_proto_rawDescOnce.Do(func() {
		file_qadena_dsvs_v_share_bind_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_qadena_dsvs_v_share_bind_data_proto_rawDescData)
	})
	return file_qadena_dsvs_v_share_bind_data_proto_rawDescData
}

var file_qadena_dsvs_v_share_bind_data_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_qadena_dsvs_v_share_bind_data_proto_goTypes = []interface{}{
	(*VShareBindData)(nil),         // 0: qadena.dsvs.VShareBindData
	(*BECPointInfo)(nil),           // 1: qadena.dsvs.BECPointInfo
	(*VShareBindDataInternal)(nil), // 2: qadena.dsvs.VShareBindDataInternal
	(*BECPoint)(nil),               // 3: qadena.dsvs.BECPoint
	(*BInt)(nil),                   // 4: qadena.dsvs.BInt
	(*BVSharedSecret)(nil),         // 5: qadena.dsvs.BVSharedSecret
}
var file_qadena_dsvs_v_share_bind_data_proto_depIdxs = []int32{
	2, // 0: qadena.dsvs.VShareBindData.Data:type_name -> qadena.dsvs.VShareBindDataInternal
	3, // 1: qadena.dsvs.BECPointInfo.ECPoint:type_name -> qadena.dsvs.BECPoint
	4, // 2: qadena.dsvs.VShareBindDataInternal.W:type_name -> qadena.dsvs.BInt
	4, // 3: qadena.dsvs.VShareBindDataInternal.Z:type_name -> qadena.dsvs.BInt
	3, // 4: qadena.dsvs.VShareBindDataInternal.C:type_name -> qadena.dsvs.BECPoint
	1, // 5: qadena.dsvs.VShareBindDataInternal.Y:type_name -> qadena.dsvs.BECPointInfo
	1, // 6: qadena.dsvs.VShareBindDataInternal.Cc:type_name -> qadena.dsvs.BECPointInfo
	5, // 7: qadena.dsvs.VShareBindDataInternal.R:type_name -> qadena.dsvs.BVSharedSecret
	5, // 8: qadena.dsvs.VShareBindDataInternal.Rr:type_name -> qadena.dsvs.BVSharedSecret
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_qadena_dsvs_v_share_bind_data_proto_init() }
func file_qadena_dsvs_v_share_bind_data_proto_init() {
	if File_qadena_dsvs_v_share_bind_data_proto != nil {
		return
	}
	file_qadena_dsvs_ec_point_proto_init()
	file_qadena_dsvs_bigint_proto_init()
	file_qadena_dsvs_b_v_shared_secret_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_qadena_dsvs_v_share_bind_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VShareBindData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qadena_dsvs_v_share_bind_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BECPointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qadena_dsvs_v_share_bind_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VShareBindDataInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_qadena_dsvs_v_share_bind_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qadena_dsvs_v_share_bind_data_proto_goTypes,
		DependencyIndexes: file_qadena_dsvs_v_share_bind_data_proto_depIdxs,
		MessageInfos:      file_qadena_dsvs_v_share_bind_data_proto_msgTypes,
	}.Build()
	File_qadena_dsvs_v_share_bind_data_proto = out.File
	file_qadena_dsvs_v_share_bind_data_proto_rawDesc = nil
	file_qadena_dsvs_v_share_bind_data_proto_goTypes = nil
	file_qadena_dsvs_v_share_bind_data_proto_depIdxs = nil
}
