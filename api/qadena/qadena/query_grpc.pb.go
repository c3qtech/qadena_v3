// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: qadena/qadena/query.proto

package qadena

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                         = "/qadena.qadena.Query/Params"
	Query_Credential_FullMethodName                     = "/qadena.qadena.Query/Credential"
	Query_CredentialAll_FullMethodName                  = "/qadena.qadena.Query/CredentialAll"
	Query_PublicKey_FullMethodName                      = "/qadena.qadena.Query/PublicKey"
	Query_PublicKeyAll_FullMethodName                   = "/qadena.qadena.Query/PublicKeyAll"
	Query_Wallet_FullMethodName                         = "/qadena.qadena.Query/Wallet"
	Query_WalletAll_FullMethodName                      = "/qadena.qadena.Query/WalletAll"
	Query_IntervalPublicKeyID_FullMethodName            = "/qadena.qadena.Query/IntervalPublicKeyID"
	Query_IntervalPublicKeyIDAll_FullMethodName         = "/qadena.qadena.Query/IntervalPublicKeyIDAll"
	Query_PioneerJar_FullMethodName                     = "/qadena.qadena.Query/PioneerJar"
	Query_PioneerJarAll_FullMethodName                  = "/qadena.qadena.Query/PioneerJarAll"
	Query_JarRegulator_FullMethodName                   = "/qadena.qadena.Query/JarRegulator"
	Query_JarRegulatorAll_FullMethodName                = "/qadena.qadena.Query/JarRegulatorAll"
	Query_SuspiciousTransaction_FullMethodName          = "/qadena.qadena.Query/SuspiciousTransaction"
	Query_SuspiciousTransactionAll_FullMethodName       = "/qadena.qadena.Query/SuspiciousTransactionAll"
	Query_ProtectKey_FullMethodName                     = "/qadena.qadena.Query/ProtectKey"
	Query_ProtectKeyAll_FullMethodName                  = "/qadena.qadena.Query/ProtectKeyAll"
	Query_RecoverKey_FullMethodName                     = "/qadena.qadena.Query/RecoverKey"
	Query_RecoverKeyAll_FullMethodName                  = "/qadena.qadena.Query/RecoverKeyAll"
	Query_Treasury_FullMethodName                       = "/qadena.qadena.Query/Treasury"
	Query_Account_FullMethodName                        = "/qadena.qadena.Query/Account"
	Query_Incentives_FullMethodName                     = "/qadena.qadena.Query/Incentives"
	Query_EnclaveSyncEnclave_FullMethodName             = "/qadena.qadena.Query/EnclaveSyncEnclave"
	Query_EnclaveSecretShare_FullMethodName             = "/qadena.qadena.Query/EnclaveSecretShare"
	Query_EnclaveRecoverKeyShare_FullMethodName         = "/qadena.qadena.Query/EnclaveRecoverKeyShare"
	Query_EnclaveValidateEnclaveIdentity_FullMethodName = "/qadena.qadena.Query/EnclaveValidateEnclaveIdentity"
	Query_FindCredential_FullMethodName                 = "/qadena.qadena.Query/FindCredential"
	Query_EnclaveIdentity_FullMethodName                = "/qadena.qadena.Query/EnclaveIdentity"
	Query_EnclaveIdentityAll_FullMethodName             = "/qadena.qadena.Query/EnclaveIdentityAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Credential items.
	Credential(ctx context.Context, in *QueryGetCredentialRequest, opts ...grpc.CallOption) (*QueryGetCredentialResponse, error)
	CredentialAll(ctx context.Context, in *QueryAllCredentialRequest, opts ...grpc.CallOption) (*QueryAllCredentialResponse, error)
	// Queries a list of PublicKey items.
	PublicKey(ctx context.Context, in *QueryGetPublicKeyRequest, opts ...grpc.CallOption) (*QueryGetPublicKeyResponse, error)
	PublicKeyAll(ctx context.Context, in *QueryAllPublicKeyRequest, opts ...grpc.CallOption) (*QueryAllPublicKeyResponse, error)
	// Queries a list of Wallet items.
	Wallet(ctx context.Context, in *QueryGetWalletRequest, opts ...grpc.CallOption) (*QueryGetWalletResponse, error)
	WalletAll(ctx context.Context, in *QueryAllWalletRequest, opts ...grpc.CallOption) (*QueryAllWalletResponse, error)
	// Queries a list of IntervalPublicKeyID items.
	IntervalPublicKeyID(ctx context.Context, in *QueryGetIntervalPublicKeyIDRequest, opts ...grpc.CallOption) (*QueryGetIntervalPublicKeyIDResponse, error)
	IntervalPublicKeyIDAll(ctx context.Context, in *QueryAllIntervalPublicKeyIDRequest, opts ...grpc.CallOption) (*QueryAllIntervalPublicKeyIDResponse, error)
	// Queries a list of PioneerJar items.
	PioneerJar(ctx context.Context, in *QueryGetPioneerJarRequest, opts ...grpc.CallOption) (*QueryGetPioneerJarResponse, error)
	PioneerJarAll(ctx context.Context, in *QueryAllPioneerJarRequest, opts ...grpc.CallOption) (*QueryAllPioneerJarResponse, error)
	// Queries a list of JarRegulator items.
	JarRegulator(ctx context.Context, in *QueryGetJarRegulatorRequest, opts ...grpc.CallOption) (*QueryGetJarRegulatorResponse, error)
	JarRegulatorAll(ctx context.Context, in *QueryAllJarRegulatorRequest, opts ...grpc.CallOption) (*QueryAllJarRegulatorResponse, error)
	// Queries a list of SuspiciousTransaction items.
	SuspiciousTransaction(ctx context.Context, in *QueryGetSuspiciousTransactionRequest, opts ...grpc.CallOption) (*QueryGetSuspiciousTransactionResponse, error)
	SuspiciousTransactionAll(ctx context.Context, in *QueryAllSuspiciousTransactionRequest, opts ...grpc.CallOption) (*QueryAllSuspiciousTransactionResponse, error)
	// Queries a list of ProtectKey items.
	ProtectKey(ctx context.Context, in *QueryGetProtectKeyRequest, opts ...grpc.CallOption) (*QueryGetProtectKeyResponse, error)
	ProtectKeyAll(ctx context.Context, in *QueryAllProtectKeyRequest, opts ...grpc.CallOption) (*QueryAllProtectKeyResponse, error)
	// Queries a list of RecoverKey items.
	RecoverKey(ctx context.Context, in *QueryGetRecoverKeyRequest, opts ...grpc.CallOption) (*QueryGetRecoverKeyResponse, error)
	RecoverKeyAll(ctx context.Context, in *QueryAllRecoverKeyRequest, opts ...grpc.CallOption) (*QueryAllRecoverKeyResponse, error)
	// Queries a list of Treasury items.
	Treasury(ctx context.Context, in *QueryTreasuryRequest, opts ...grpc.CallOption) (*QueryTreasuryResponse, error)
	// Queries a list of Account items.
	Account(ctx context.Context, in *QueryAccountRequest, opts ...grpc.CallOption) (*QueryAccountResponse, error)
	// Queries a list of Incentives items.
	Incentives(ctx context.Context, in *QueryIncentivesRequest, opts ...grpc.CallOption) (*QueryIncentivesResponse, error)
	// Queries a list of EnclaveSyncEnclave items.
	EnclaveSyncEnclave(ctx context.Context, in *QueryEnclaveSyncEnclaveRequest, opts ...grpc.CallOption) (*QueryEnclaveSyncEnclaveResponse, error)
	// Queries a list of EnclaveSecretShare items.
	EnclaveSecretShare(ctx context.Context, in *QueryEnclaveSecretShareRequest, opts ...grpc.CallOption) (*QueryEnclaveSecretShareResponse, error)
	// Queries a list of EnclaveRecoverKeyShare items.
	EnclaveRecoverKeyShare(ctx context.Context, in *QueryEnclaveRecoverKeyShareRequest, opts ...grpc.CallOption) (*QueryEnclaveRecoverKeyShareResponse, error)
	EnclaveValidateEnclaveIdentity(ctx context.Context, in *QueryEnclaveValidateEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryEnclaveValidateEnclaveIdentityResponse, error)
	// Queries a list of FindCredential items.
	FindCredential(ctx context.Context, in *QueryFindCredentialRequest, opts ...grpc.CallOption) (*QueryFindCredentialResponse, error)
	// Queries a list of EnclaveIdentity items.
	EnclaveIdentity(ctx context.Context, in *QueryGetEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryGetEnclaveIdentityResponse, error)
	EnclaveIdentityAll(ctx context.Context, in *QueryAllEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryAllEnclaveIdentityResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Credential(ctx context.Context, in *QueryGetCredentialRequest, opts ...grpc.CallOption) (*QueryGetCredentialResponse, error) {
	out := new(QueryGetCredentialResponse)
	err := c.cc.Invoke(ctx, Query_Credential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CredentialAll(ctx context.Context, in *QueryAllCredentialRequest, opts ...grpc.CallOption) (*QueryAllCredentialResponse, error) {
	out := new(QueryAllCredentialResponse)
	err := c.cc.Invoke(ctx, Query_CredentialAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicKey(ctx context.Context, in *QueryGetPublicKeyRequest, opts ...grpc.CallOption) (*QueryGetPublicKeyResponse, error) {
	out := new(QueryGetPublicKeyResponse)
	err := c.cc.Invoke(ctx, Query_PublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicKeyAll(ctx context.Context, in *QueryAllPublicKeyRequest, opts ...grpc.CallOption) (*QueryAllPublicKeyResponse, error) {
	out := new(QueryAllPublicKeyResponse)
	err := c.cc.Invoke(ctx, Query_PublicKeyAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Wallet(ctx context.Context, in *QueryGetWalletRequest, opts ...grpc.CallOption) (*QueryGetWalletResponse, error) {
	out := new(QueryGetWalletResponse)
	err := c.cc.Invoke(ctx, Query_Wallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WalletAll(ctx context.Context, in *QueryAllWalletRequest, opts ...grpc.CallOption) (*QueryAllWalletResponse, error) {
	out := new(QueryAllWalletResponse)
	err := c.cc.Invoke(ctx, Query_WalletAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IntervalPublicKeyID(ctx context.Context, in *QueryGetIntervalPublicKeyIDRequest, opts ...grpc.CallOption) (*QueryGetIntervalPublicKeyIDResponse, error) {
	out := new(QueryGetIntervalPublicKeyIDResponse)
	err := c.cc.Invoke(ctx, Query_IntervalPublicKeyID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IntervalPublicKeyIDAll(ctx context.Context, in *QueryAllIntervalPublicKeyIDRequest, opts ...grpc.CallOption) (*QueryAllIntervalPublicKeyIDResponse, error) {
	out := new(QueryAllIntervalPublicKeyIDResponse)
	err := c.cc.Invoke(ctx, Query_IntervalPublicKeyIDAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PioneerJar(ctx context.Context, in *QueryGetPioneerJarRequest, opts ...grpc.CallOption) (*QueryGetPioneerJarResponse, error) {
	out := new(QueryGetPioneerJarResponse)
	err := c.cc.Invoke(ctx, Query_PioneerJar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PioneerJarAll(ctx context.Context, in *QueryAllPioneerJarRequest, opts ...grpc.CallOption) (*QueryAllPioneerJarResponse, error) {
	out := new(QueryAllPioneerJarResponse)
	err := c.cc.Invoke(ctx, Query_PioneerJarAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) JarRegulator(ctx context.Context, in *QueryGetJarRegulatorRequest, opts ...grpc.CallOption) (*QueryGetJarRegulatorResponse, error) {
	out := new(QueryGetJarRegulatorResponse)
	err := c.cc.Invoke(ctx, Query_JarRegulator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) JarRegulatorAll(ctx context.Context, in *QueryAllJarRegulatorRequest, opts ...grpc.CallOption) (*QueryAllJarRegulatorResponse, error) {
	out := new(QueryAllJarRegulatorResponse)
	err := c.cc.Invoke(ctx, Query_JarRegulatorAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuspiciousTransaction(ctx context.Context, in *QueryGetSuspiciousTransactionRequest, opts ...grpc.CallOption) (*QueryGetSuspiciousTransactionResponse, error) {
	out := new(QueryGetSuspiciousTransactionResponse)
	err := c.cc.Invoke(ctx, Query_SuspiciousTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuspiciousTransactionAll(ctx context.Context, in *QueryAllSuspiciousTransactionRequest, opts ...grpc.CallOption) (*QueryAllSuspiciousTransactionResponse, error) {
	out := new(QueryAllSuspiciousTransactionResponse)
	err := c.cc.Invoke(ctx, Query_SuspiciousTransactionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProtectKey(ctx context.Context, in *QueryGetProtectKeyRequest, opts ...grpc.CallOption) (*QueryGetProtectKeyResponse, error) {
	out := new(QueryGetProtectKeyResponse)
	err := c.cc.Invoke(ctx, Query_ProtectKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProtectKeyAll(ctx context.Context, in *QueryAllProtectKeyRequest, opts ...grpc.CallOption) (*QueryAllProtectKeyResponse, error) {
	out := new(QueryAllProtectKeyResponse)
	err := c.cc.Invoke(ctx, Query_ProtectKeyAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecoverKey(ctx context.Context, in *QueryGetRecoverKeyRequest, opts ...grpc.CallOption) (*QueryGetRecoverKeyResponse, error) {
	out := new(QueryGetRecoverKeyResponse)
	err := c.cc.Invoke(ctx, Query_RecoverKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecoverKeyAll(ctx context.Context, in *QueryAllRecoverKeyRequest, opts ...grpc.CallOption) (*QueryAllRecoverKeyResponse, error) {
	out := new(QueryAllRecoverKeyResponse)
	err := c.cc.Invoke(ctx, Query_RecoverKeyAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Treasury(ctx context.Context, in *QueryTreasuryRequest, opts ...grpc.CallOption) (*QueryTreasuryResponse, error) {
	out := new(QueryTreasuryResponse)
	err := c.cc.Invoke(ctx, Query_Treasury_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Account(ctx context.Context, in *QueryAccountRequest, opts ...grpc.CallOption) (*QueryAccountResponse, error) {
	out := new(QueryAccountResponse)
	err := c.cc.Invoke(ctx, Query_Account_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Incentives(ctx context.Context, in *QueryIncentivesRequest, opts ...grpc.CallOption) (*QueryIncentivesResponse, error) {
	out := new(QueryIncentivesResponse)
	err := c.cc.Invoke(ctx, Query_Incentives_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveSyncEnclave(ctx context.Context, in *QueryEnclaveSyncEnclaveRequest, opts ...grpc.CallOption) (*QueryEnclaveSyncEnclaveResponse, error) {
	out := new(QueryEnclaveSyncEnclaveResponse)
	err := c.cc.Invoke(ctx, Query_EnclaveSyncEnclave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveSecretShare(ctx context.Context, in *QueryEnclaveSecretShareRequest, opts ...grpc.CallOption) (*QueryEnclaveSecretShareResponse, error) {
	out := new(QueryEnclaveSecretShareResponse)
	err := c.cc.Invoke(ctx, Query_EnclaveSecretShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveRecoverKeyShare(ctx context.Context, in *QueryEnclaveRecoverKeyShareRequest, opts ...grpc.CallOption) (*QueryEnclaveRecoverKeyShareResponse, error) {
	out := new(QueryEnclaveRecoverKeyShareResponse)
	err := c.cc.Invoke(ctx, Query_EnclaveRecoverKeyShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveValidateEnclaveIdentity(ctx context.Context, in *QueryEnclaveValidateEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryEnclaveValidateEnclaveIdentityResponse, error) {
	out := new(QueryEnclaveValidateEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, Query_EnclaveValidateEnclaveIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FindCredential(ctx context.Context, in *QueryFindCredentialRequest, opts ...grpc.CallOption) (*QueryFindCredentialResponse, error) {
	out := new(QueryFindCredentialResponse)
	err := c.cc.Invoke(ctx, Query_FindCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveIdentity(ctx context.Context, in *QueryGetEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryGetEnclaveIdentityResponse, error) {
	out := new(QueryGetEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, Query_EnclaveIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnclaveIdentityAll(ctx context.Context, in *QueryAllEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryAllEnclaveIdentityResponse, error) {
	out := new(QueryAllEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, Query_EnclaveIdentityAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Credential items.
	Credential(context.Context, *QueryGetCredentialRequest) (*QueryGetCredentialResponse, error)
	CredentialAll(context.Context, *QueryAllCredentialRequest) (*QueryAllCredentialResponse, error)
	// Queries a list of PublicKey items.
	PublicKey(context.Context, *QueryGetPublicKeyRequest) (*QueryGetPublicKeyResponse, error)
	PublicKeyAll(context.Context, *QueryAllPublicKeyRequest) (*QueryAllPublicKeyResponse, error)
	// Queries a list of Wallet items.
	Wallet(context.Context, *QueryGetWalletRequest) (*QueryGetWalletResponse, error)
	WalletAll(context.Context, *QueryAllWalletRequest) (*QueryAllWalletResponse, error)
	// Queries a list of IntervalPublicKeyID items.
	IntervalPublicKeyID(context.Context, *QueryGetIntervalPublicKeyIDRequest) (*QueryGetIntervalPublicKeyIDResponse, error)
	IntervalPublicKeyIDAll(context.Context, *QueryAllIntervalPublicKeyIDRequest) (*QueryAllIntervalPublicKeyIDResponse, error)
	// Queries a list of PioneerJar items.
	PioneerJar(context.Context, *QueryGetPioneerJarRequest) (*QueryGetPioneerJarResponse, error)
	PioneerJarAll(context.Context, *QueryAllPioneerJarRequest) (*QueryAllPioneerJarResponse, error)
	// Queries a list of JarRegulator items.
	JarRegulator(context.Context, *QueryGetJarRegulatorRequest) (*QueryGetJarRegulatorResponse, error)
	JarRegulatorAll(context.Context, *QueryAllJarRegulatorRequest) (*QueryAllJarRegulatorResponse, error)
	// Queries a list of SuspiciousTransaction items.
	SuspiciousTransaction(context.Context, *QueryGetSuspiciousTransactionRequest) (*QueryGetSuspiciousTransactionResponse, error)
	SuspiciousTransactionAll(context.Context, *QueryAllSuspiciousTransactionRequest) (*QueryAllSuspiciousTransactionResponse, error)
	// Queries a list of ProtectKey items.
	ProtectKey(context.Context, *QueryGetProtectKeyRequest) (*QueryGetProtectKeyResponse, error)
	ProtectKeyAll(context.Context, *QueryAllProtectKeyRequest) (*QueryAllProtectKeyResponse, error)
	// Queries a list of RecoverKey items.
	RecoverKey(context.Context, *QueryGetRecoverKeyRequest) (*QueryGetRecoverKeyResponse, error)
	RecoverKeyAll(context.Context, *QueryAllRecoverKeyRequest) (*QueryAllRecoverKeyResponse, error)
	// Queries a list of Treasury items.
	Treasury(context.Context, *QueryTreasuryRequest) (*QueryTreasuryResponse, error)
	// Queries a list of Account items.
	Account(context.Context, *QueryAccountRequest) (*QueryAccountResponse, error)
	// Queries a list of Incentives items.
	Incentives(context.Context, *QueryIncentivesRequest) (*QueryIncentivesResponse, error)
	// Queries a list of EnclaveSyncEnclave items.
	EnclaveSyncEnclave(context.Context, *QueryEnclaveSyncEnclaveRequest) (*QueryEnclaveSyncEnclaveResponse, error)
	// Queries a list of EnclaveSecretShare items.
	EnclaveSecretShare(context.Context, *QueryEnclaveSecretShareRequest) (*QueryEnclaveSecretShareResponse, error)
	// Queries a list of EnclaveRecoverKeyShare items.
	EnclaveRecoverKeyShare(context.Context, *QueryEnclaveRecoverKeyShareRequest) (*QueryEnclaveRecoverKeyShareResponse, error)
	EnclaveValidateEnclaveIdentity(context.Context, *QueryEnclaveValidateEnclaveIdentityRequest) (*QueryEnclaveValidateEnclaveIdentityResponse, error)
	// Queries a list of FindCredential items.
	FindCredential(context.Context, *QueryFindCredentialRequest) (*QueryFindCredentialResponse, error)
	// Queries a list of EnclaveIdentity items.
	EnclaveIdentity(context.Context, *QueryGetEnclaveIdentityRequest) (*QueryGetEnclaveIdentityResponse, error)
	EnclaveIdentityAll(context.Context, *QueryAllEnclaveIdentityRequest) (*QueryAllEnclaveIdentityResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Credential(context.Context, *QueryGetCredentialRequest) (*QueryGetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credential not implemented")
}
func (UnimplementedQueryServer) CredentialAll(context.Context, *QueryAllCredentialRequest) (*QueryAllCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialAll not implemented")
}
func (UnimplementedQueryServer) PublicKey(context.Context, *QueryGetPublicKeyRequest) (*QueryGetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}
func (UnimplementedQueryServer) PublicKeyAll(context.Context, *QueryAllPublicKeyRequest) (*QueryAllPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKeyAll not implemented")
}
func (UnimplementedQueryServer) Wallet(context.Context, *QueryGetWalletRequest) (*QueryGetWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wallet not implemented")
}
func (UnimplementedQueryServer) WalletAll(context.Context, *QueryAllWalletRequest) (*QueryAllWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletAll not implemented")
}
func (UnimplementedQueryServer) IntervalPublicKeyID(context.Context, *QueryGetIntervalPublicKeyIDRequest) (*QueryGetIntervalPublicKeyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntervalPublicKeyID not implemented")
}
func (UnimplementedQueryServer) IntervalPublicKeyIDAll(context.Context, *QueryAllIntervalPublicKeyIDRequest) (*QueryAllIntervalPublicKeyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntervalPublicKeyIDAll not implemented")
}
func (UnimplementedQueryServer) PioneerJar(context.Context, *QueryGetPioneerJarRequest) (*QueryGetPioneerJarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerJar not implemented")
}
func (UnimplementedQueryServer) PioneerJarAll(context.Context, *QueryAllPioneerJarRequest) (*QueryAllPioneerJarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerJarAll not implemented")
}
func (UnimplementedQueryServer) JarRegulator(context.Context, *QueryGetJarRegulatorRequest) (*QueryGetJarRegulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JarRegulator not implemented")
}
func (UnimplementedQueryServer) JarRegulatorAll(context.Context, *QueryAllJarRegulatorRequest) (*QueryAllJarRegulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JarRegulatorAll not implemented")
}
func (UnimplementedQueryServer) SuspiciousTransaction(context.Context, *QueryGetSuspiciousTransactionRequest) (*QueryGetSuspiciousTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspiciousTransaction not implemented")
}
func (UnimplementedQueryServer) SuspiciousTransactionAll(context.Context, *QueryAllSuspiciousTransactionRequest) (*QueryAllSuspiciousTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspiciousTransactionAll not implemented")
}
func (UnimplementedQueryServer) ProtectKey(context.Context, *QueryGetProtectKeyRequest) (*QueryGetProtectKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtectKey not implemented")
}
func (UnimplementedQueryServer) ProtectKeyAll(context.Context, *QueryAllProtectKeyRequest) (*QueryAllProtectKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtectKeyAll not implemented")
}
func (UnimplementedQueryServer) RecoverKey(context.Context, *QueryGetRecoverKeyRequest) (*QueryGetRecoverKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverKey not implemented")
}
func (UnimplementedQueryServer) RecoverKeyAll(context.Context, *QueryAllRecoverKeyRequest) (*QueryAllRecoverKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverKeyAll not implemented")
}
func (UnimplementedQueryServer) Treasury(context.Context, *QueryTreasuryRequest) (*QueryTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Treasury not implemented")
}
func (UnimplementedQueryServer) Account(context.Context, *QueryAccountRequest) (*QueryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (UnimplementedQueryServer) Incentives(context.Context, *QueryIncentivesRequest) (*QueryIncentivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Incentives not implemented")
}
func (UnimplementedQueryServer) EnclaveSyncEnclave(context.Context, *QueryEnclaveSyncEnclaveRequest) (*QueryEnclaveSyncEnclaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveSyncEnclave not implemented")
}
func (UnimplementedQueryServer) EnclaveSecretShare(context.Context, *QueryEnclaveSecretShareRequest) (*QueryEnclaveSecretShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveSecretShare not implemented")
}
func (UnimplementedQueryServer) EnclaveRecoverKeyShare(context.Context, *QueryEnclaveRecoverKeyShareRequest) (*QueryEnclaveRecoverKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveRecoverKeyShare not implemented")
}
func (UnimplementedQueryServer) EnclaveValidateEnclaveIdentity(context.Context, *QueryEnclaveValidateEnclaveIdentityRequest) (*QueryEnclaveValidateEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveValidateEnclaveIdentity not implemented")
}
func (UnimplementedQueryServer) FindCredential(context.Context, *QueryFindCredentialRequest) (*QueryFindCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCredential not implemented")
}
func (UnimplementedQueryServer) EnclaveIdentity(context.Context, *QueryGetEnclaveIdentityRequest) (*QueryGetEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveIdentity not implemented")
}
func (UnimplementedQueryServer) EnclaveIdentityAll(context.Context, *QueryAllEnclaveIdentityRequest) (*QueryAllEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnclaveIdentityAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Credential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Credential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Credential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Credential(ctx, req.(*QueryGetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CredentialAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CredentialAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CredentialAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CredentialAll(ctx, req.(*QueryAllCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicKey(ctx, req.(*QueryGetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicKeyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicKeyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PublicKeyAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicKeyAll(ctx, req.(*QueryAllPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Wallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Wallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Wallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Wallet(ctx, req.(*QueryGetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WalletAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WalletAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WalletAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WalletAll(ctx, req.(*QueryAllWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IntervalPublicKeyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIntervalPublicKeyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IntervalPublicKeyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IntervalPublicKeyID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IntervalPublicKeyID(ctx, req.(*QueryGetIntervalPublicKeyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IntervalPublicKeyIDAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIntervalPublicKeyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IntervalPublicKeyIDAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IntervalPublicKeyIDAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IntervalPublicKeyIDAll(ctx, req.(*QueryAllIntervalPublicKeyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PioneerJar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPioneerJarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PioneerJar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PioneerJar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PioneerJar(ctx, req.(*QueryGetPioneerJarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PioneerJarAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPioneerJarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PioneerJarAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PioneerJarAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PioneerJarAll(ctx, req.(*QueryAllPioneerJarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_JarRegulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetJarRegulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).JarRegulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_JarRegulator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).JarRegulator(ctx, req.(*QueryGetJarRegulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_JarRegulatorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllJarRegulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).JarRegulatorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_JarRegulatorAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).JarRegulatorAll(ctx, req.(*QueryAllJarRegulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuspiciousTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSuspiciousTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuspiciousTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SuspiciousTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuspiciousTransaction(ctx, req.(*QueryGetSuspiciousTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuspiciousTransactionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSuspiciousTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuspiciousTransactionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SuspiciousTransactionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuspiciousTransactionAll(ctx, req.(*QueryAllSuspiciousTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProtectKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtectKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProtectKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProtectKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProtectKey(ctx, req.(*QueryGetProtectKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProtectKeyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProtectKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProtectKeyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProtectKeyAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProtectKeyAll(ctx, req.(*QueryAllProtectKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecoverKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecoverKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecoverKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RecoverKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecoverKey(ctx, req.(*QueryGetRecoverKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecoverKeyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRecoverKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecoverKeyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RecoverKeyAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecoverKeyAll(ctx, req.(*QueryAllRecoverKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Treasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Treasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Treasury_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Treasury(ctx, req.(*QueryTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Account_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Account(ctx, req.(*QueryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Incentives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Incentives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Incentives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Incentives(ctx, req.(*QueryIncentivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveSyncEnclave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveSyncEnclaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveSyncEnclave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EnclaveSyncEnclave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveSyncEnclave(ctx, req.(*QueryEnclaveSyncEnclaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveSecretShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveSecretShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveSecretShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EnclaveSecretShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveSecretShare(ctx, req.(*QueryEnclaveSecretShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveRecoverKeyShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveRecoverKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveRecoverKeyShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EnclaveRecoverKeyShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveRecoverKeyShare(ctx, req.(*QueryEnclaveRecoverKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveValidateEnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveValidateEnclaveIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveValidateEnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EnclaveValidateEnclaveIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveValidateEnclaveIdentity(ctx, req.(*QueryEnclaveValidateEnclaveIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FindCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFindCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FindCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FindCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FindCredential(ctx, req.(*QueryFindCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEnclaveIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EnclaveIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveIdentity(ctx, req.(*QueryGetEnclaveIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnclaveIdentityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEnclaveIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnclaveIdentityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EnclaveIdentityAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnclaveIdentityAll(ctx, req.(*QueryAllEnclaveIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qadena.qadena.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Credential",
			Handler:    _Query_Credential_Handler,
		},
		{
			MethodName: "CredentialAll",
			Handler:    _Query_CredentialAll_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _Query_PublicKey_Handler,
		},
		{
			MethodName: "PublicKeyAll",
			Handler:    _Query_PublicKeyAll_Handler,
		},
		{
			MethodName: "Wallet",
			Handler:    _Query_Wallet_Handler,
		},
		{
			MethodName: "WalletAll",
			Handler:    _Query_WalletAll_Handler,
		},
		{
			MethodName: "IntervalPublicKeyID",
			Handler:    _Query_IntervalPublicKeyID_Handler,
		},
		{
			MethodName: "IntervalPublicKeyIDAll",
			Handler:    _Query_IntervalPublicKeyIDAll_Handler,
		},
		{
			MethodName: "PioneerJar",
			Handler:    _Query_PioneerJar_Handler,
		},
		{
			MethodName: "PioneerJarAll",
			Handler:    _Query_PioneerJarAll_Handler,
		},
		{
			MethodName: "JarRegulator",
			Handler:    _Query_JarRegulator_Handler,
		},
		{
			MethodName: "JarRegulatorAll",
			Handler:    _Query_JarRegulatorAll_Handler,
		},
		{
			MethodName: "SuspiciousTransaction",
			Handler:    _Query_SuspiciousTransaction_Handler,
		},
		{
			MethodName: "SuspiciousTransactionAll",
			Handler:    _Query_SuspiciousTransactionAll_Handler,
		},
		{
			MethodName: "ProtectKey",
			Handler:    _Query_ProtectKey_Handler,
		},
		{
			MethodName: "ProtectKeyAll",
			Handler:    _Query_ProtectKeyAll_Handler,
		},
		{
			MethodName: "RecoverKey",
			Handler:    _Query_RecoverKey_Handler,
		},
		{
			MethodName: "RecoverKeyAll",
			Handler:    _Query_RecoverKeyAll_Handler,
		},
		{
			MethodName: "Treasury",
			Handler:    _Query_Treasury_Handler,
		},
		{
			MethodName: "Account",
			Handler:    _Query_Account_Handler,
		},
		{
			MethodName: "Incentives",
			Handler:    _Query_Incentives_Handler,
		},
		{
			MethodName: "EnclaveSyncEnclave",
			Handler:    _Query_EnclaveSyncEnclave_Handler,
		},
		{
			MethodName: "EnclaveSecretShare",
			Handler:    _Query_EnclaveSecretShare_Handler,
		},
		{
			MethodName: "EnclaveRecoverKeyShare",
			Handler:    _Query_EnclaveRecoverKeyShare_Handler,
		},
		{
			MethodName: "EnclaveValidateEnclaveIdentity",
			Handler:    _Query_EnclaveValidateEnclaveIdentity_Handler,
		},
		{
			MethodName: "FindCredential",
			Handler:    _Query_FindCredential_Handler,
		},
		{
			MethodName: "EnclaveIdentity",
			Handler:    _Query_EnclaveIdentity_Handler,
		},
		{
			MethodName: "EnclaveIdentityAll",
			Handler:    _Query_EnclaveIdentityAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qadena/qadena/query.proto",
}
