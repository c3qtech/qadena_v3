// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package qadena

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sort "sort"
	sync "sync"
)

var _ protoreflect.List = (*_WalletAmount_4_list)(nil)

type _WalletAmount_4_list struct {
	list *[]*BPedersenCommit
}

func (x *_WalletAmount_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_WalletAmount_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_WalletAmount_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BPedersenCommit)
	(*x.list)[i] = concreteValue
}

func (x *_WalletAmount_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BPedersenCommit)
	*x.list = append(*x.list, concreteValue)
}

func (x *_WalletAmount_4_list) AppendMutable() protoreflect.Value {
	v := new(BPedersenCommit)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_WalletAmount_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_WalletAmount_4_list) NewElement() protoreflect.Value {
	v := new(BPedersenCommit)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_WalletAmount_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_WalletAmount                            protoreflect.MessageDescriptor
	fd_WalletAmount_walletAmountPedersenCommit protoreflect.FieldDescriptor
	fd_WalletAmount_encWalletAmountVShare      protoreflect.FieldDescriptor
	fd_WalletAmount_walletAmountVShareBind     protoreflect.FieldDescriptor
	fd_WalletAmount_RequiredSenderCheckPC      protoreflect.FieldDescriptor
)

func init() {
	file_qadena_qadena_wallet_proto_init()
	md_WalletAmount = File_qadena_qadena_wallet_proto.Messages().ByName("WalletAmount")
	fd_WalletAmount_walletAmountPedersenCommit = md_WalletAmount.Fields().ByName("walletAmountPedersenCommit")
	fd_WalletAmount_encWalletAmountVShare = md_WalletAmount.Fields().ByName("encWalletAmountVShare")
	fd_WalletAmount_walletAmountVShareBind = md_WalletAmount.Fields().ByName("walletAmountVShareBind")
	fd_WalletAmount_RequiredSenderCheckPC = md_WalletAmount.Fields().ByName("RequiredSenderCheckPC")
}

var _ protoreflect.Message = (*fastReflection_WalletAmount)(nil)

type fastReflection_WalletAmount WalletAmount

func (x *WalletAmount) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WalletAmount)(x)
}

func (x *WalletAmount) slowProtoReflect() protoreflect.Message {
	mi := &file_qadena_qadena_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WalletAmount_messageType fastReflection_WalletAmount_messageType
var _ protoreflect.MessageType = fastReflection_WalletAmount_messageType{}

type fastReflection_WalletAmount_messageType struct{}

func (x fastReflection_WalletAmount_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WalletAmount)(nil)
}
func (x fastReflection_WalletAmount_messageType) New() protoreflect.Message {
	return new(fastReflection_WalletAmount)
}
func (x fastReflection_WalletAmount_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WalletAmount
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WalletAmount) Descriptor() protoreflect.MessageDescriptor {
	return md_WalletAmount
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WalletAmount) Type() protoreflect.MessageType {
	return _fastReflection_WalletAmount_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WalletAmount) New() protoreflect.Message {
	return new(fastReflection_WalletAmount)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WalletAmount) Interface() protoreflect.ProtoMessage {
	return (*WalletAmount)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WalletAmount) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.WalletAmountPedersenCommit != nil {
		value := protoreflect.ValueOfMessage(x.WalletAmountPedersenCommit.ProtoReflect())
		if !f(fd_WalletAmount_walletAmountPedersenCommit, value) {
			return
		}
	}
	if len(x.EncWalletAmountVShare) != 0 {
		value := protoreflect.ValueOfBytes(x.EncWalletAmountVShare)
		if !f(fd_WalletAmount_encWalletAmountVShare, value) {
			return
		}
	}
	if x.WalletAmountVShareBind != nil {
		value := protoreflect.ValueOfMessage(x.WalletAmountVShareBind.ProtoReflect())
		if !f(fd_WalletAmount_walletAmountVShareBind, value) {
			return
		}
	}
	if len(x.RequiredSenderCheckPC) != 0 {
		value := protoreflect.ValueOfList(&_WalletAmount_4_list{list: &x.RequiredSenderCheckPC})
		if !f(fd_WalletAmount_RequiredSenderCheckPC, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WalletAmount) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "qadena.qadena.WalletAmount.walletAmountPedersenCommit":
		return x.WalletAmountPedersenCommit != nil
	case "qadena.qadena.WalletAmount.encWalletAmountVShare":
		return len(x.EncWalletAmountVShare) != 0
	case "qadena.qadena.WalletAmount.walletAmountVShareBind":
		return x.WalletAmountVShareBind != nil
	case "qadena.qadena.WalletAmount.RequiredSenderCheckPC":
		return len(x.RequiredSenderCheckPC) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.WalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.WalletAmount does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WalletAmount) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "qadena.qadena.WalletAmount.walletAmountPedersenCommit":
		x.WalletAmountPedersenCommit = nil
	case "qadena.qadena.WalletAmount.encWalletAmountVShare":
		x.EncWalletAmountVShare = nil
	case "qadena.qadena.WalletAmount.walletAmountVShareBind":
		x.WalletAmountVShareBind = nil
	case "qadena.qadena.WalletAmount.RequiredSenderCheckPC":
		x.RequiredSenderCheckPC = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.WalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.WalletAmount does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WalletAmount) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "qadena.qadena.WalletAmount.walletAmountPedersenCommit":
		value := x.WalletAmountPedersenCommit
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.qadena.WalletAmount.encWalletAmountVShare":
		value := x.EncWalletAmountVShare
		return protoreflect.ValueOfBytes(value)
	case "qadena.qadena.WalletAmount.walletAmountVShareBind":
		value := x.WalletAmountVShareBind
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.qadena.WalletAmount.RequiredSenderCheckPC":
		if len(x.RequiredSenderCheckPC) == 0 {
			return protoreflect.ValueOfList(&_WalletAmount_4_list{})
		}
		listValue := &_WalletAmount_4_list{list: &x.RequiredSenderCheckPC}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.WalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.WalletAmount does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WalletAmount) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "qadena.qadena.WalletAmount.walletAmountPedersenCommit":
		x.WalletAmountPedersenCommit = value.Message().Interface().(*BPedersenCommit)
	case "qadena.qadena.WalletAmount.encWalletAmountVShare":
		x.EncWalletAmountVShare = value.Bytes()
	case "qadena.qadena.WalletAmount.walletAmountVShareBind":
		x.WalletAmountVShareBind = value.Message().Interface().(*VShareBindData)
	case "qadena.qadena.WalletAmount.RequiredSenderCheckPC":
		lv := value.List()
		clv := lv.(*_WalletAmount_4_list)
		x.RequiredSenderCheckPC = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.WalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.WalletAmount does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WalletAmount) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.WalletAmount.walletAmountPedersenCommit":
		if x.WalletAmountPedersenCommit == nil {
			x.WalletAmountPedersenCommit = new(BPedersenCommit)
		}
		return protoreflect.ValueOfMessage(x.WalletAmountPedersenCommit.ProtoReflect())
	case "qadena.qadena.WalletAmount.walletAmountVShareBind":
		if x.WalletAmountVShareBind == nil {
			x.WalletAmountVShareBind = new(VShareBindData)
		}
		return protoreflect.ValueOfMessage(x.WalletAmountVShareBind.ProtoReflect())
	case "qadena.qadena.WalletAmount.RequiredSenderCheckPC":
		if x.RequiredSenderCheckPC == nil {
			x.RequiredSenderCheckPC = []*BPedersenCommit{}
		}
		value := &_WalletAmount_4_list{list: &x.RequiredSenderCheckPC}
		return protoreflect.ValueOfList(value)
	case "qadena.qadena.WalletAmount.encWalletAmountVShare":
		panic(fmt.Errorf("field encWalletAmountVShare of message qadena.qadena.WalletAmount is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.WalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.WalletAmount does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WalletAmount) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.WalletAmount.walletAmountPedersenCommit":
		m := new(BPedersenCommit)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.qadena.WalletAmount.encWalletAmountVShare":
		return protoreflect.ValueOfBytes(nil)
	case "qadena.qadena.WalletAmount.walletAmountVShareBind":
		m := new(VShareBindData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.qadena.WalletAmount.RequiredSenderCheckPC":
		list := []*BPedersenCommit{}
		return protoreflect.ValueOfList(&_WalletAmount_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.WalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.WalletAmount does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WalletAmount) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in qadena.qadena.WalletAmount", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WalletAmount) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WalletAmount) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WalletAmount) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WalletAmount) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WalletAmount)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.WalletAmountPedersenCommit != nil {
			l = options.Size(x.WalletAmountPedersenCommit)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EncWalletAmountVShare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.WalletAmountVShareBind != nil {
			l = options.Size(x.WalletAmountVShareBind)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RequiredSenderCheckPC) > 0 {
			for _, e := range x.RequiredSenderCheckPC {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WalletAmount)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RequiredSenderCheckPC) > 0 {
			for iNdEx := len(x.RequiredSenderCheckPC) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RequiredSenderCheckPC[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.WalletAmountVShareBind != nil {
			encoded, err := options.Marshal(x.WalletAmountVShareBind)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.EncWalletAmountVShare) > 0 {
			i -= len(x.EncWalletAmountVShare)
			copy(dAtA[i:], x.EncWalletAmountVShare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EncWalletAmountVShare)))
			i--
			dAtA[i] = 0x12
		}
		if x.WalletAmountPedersenCommit != nil {
			encoded, err := options.Marshal(x.WalletAmountPedersenCommit)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WalletAmount)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WalletAmount: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WalletAmount: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletAmountPedersenCommit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.WalletAmountPedersenCommit == nil {
					x.WalletAmountPedersenCommit = &BPedersenCommit{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.WalletAmountPedersenCommit); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncWalletAmountVShare", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncWalletAmountVShare = append(x.EncWalletAmountVShare[:0], dAtA[iNdEx:postIndex]...)
				if x.EncWalletAmountVShare == nil {
					x.EncWalletAmountVShare = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletAmountVShareBind", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.WalletAmountVShareBind == nil {
					x.WalletAmountVShareBind = &VShareBindData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.WalletAmountVShareBind); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequiredSenderCheckPC", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequiredSenderCheckPC = append(x.RequiredSenderCheckPC, &BPedersenCommit{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RequiredSenderCheckPC[len(x.RequiredSenderCheckPC)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ListWalletAmount_1_list)(nil)

type _ListWalletAmount_1_list struct {
	list *[]*WalletAmount
}

func (x *_ListWalletAmount_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ListWalletAmount_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ListWalletAmount_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*WalletAmount)
	(*x.list)[i] = concreteValue
}

func (x *_ListWalletAmount_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*WalletAmount)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ListWalletAmount_1_list) AppendMutable() protoreflect.Value {
	v := new(WalletAmount)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ListWalletAmount_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ListWalletAmount_1_list) NewElement() protoreflect.Value {
	v := new(WalletAmount)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ListWalletAmount_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ListWalletAmount               protoreflect.MessageDescriptor
	fd_ListWalletAmount_walletAmounts protoreflect.FieldDescriptor
)

func init() {
	file_qadena_qadena_wallet_proto_init()
	md_ListWalletAmount = File_qadena_qadena_wallet_proto.Messages().ByName("ListWalletAmount")
	fd_ListWalletAmount_walletAmounts = md_ListWalletAmount.Fields().ByName("walletAmounts")
}

var _ protoreflect.Message = (*fastReflection_ListWalletAmount)(nil)

type fastReflection_ListWalletAmount ListWalletAmount

func (x *ListWalletAmount) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ListWalletAmount)(x)
}

func (x *ListWalletAmount) slowProtoReflect() protoreflect.Message {
	mi := &file_qadena_qadena_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ListWalletAmount_messageType fastReflection_ListWalletAmount_messageType
var _ protoreflect.MessageType = fastReflection_ListWalletAmount_messageType{}

type fastReflection_ListWalletAmount_messageType struct{}

func (x fastReflection_ListWalletAmount_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ListWalletAmount)(nil)
}
func (x fastReflection_ListWalletAmount_messageType) New() protoreflect.Message {
	return new(fastReflection_ListWalletAmount)
}
func (x fastReflection_ListWalletAmount_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ListWalletAmount
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ListWalletAmount) Descriptor() protoreflect.MessageDescriptor {
	return md_ListWalletAmount
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ListWalletAmount) Type() protoreflect.MessageType {
	return _fastReflection_ListWalletAmount_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ListWalletAmount) New() protoreflect.Message {
	return new(fastReflection_ListWalletAmount)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ListWalletAmount) Interface() protoreflect.ProtoMessage {
	return (*ListWalletAmount)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ListWalletAmount) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.WalletAmounts) != 0 {
		value := protoreflect.ValueOfList(&_ListWalletAmount_1_list{list: &x.WalletAmounts})
		if !f(fd_ListWalletAmount_walletAmounts, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ListWalletAmount) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "qadena.qadena.ListWalletAmount.walletAmounts":
		return len(x.WalletAmounts) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.ListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.ListWalletAmount does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ListWalletAmount) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "qadena.qadena.ListWalletAmount.walletAmounts":
		x.WalletAmounts = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.ListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.ListWalletAmount does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ListWalletAmount) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "qadena.qadena.ListWalletAmount.walletAmounts":
		if len(x.WalletAmounts) == 0 {
			return protoreflect.ValueOfList(&_ListWalletAmount_1_list{})
		}
		listValue := &_ListWalletAmount_1_list{list: &x.WalletAmounts}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.ListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.ListWalletAmount does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ListWalletAmount) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "qadena.qadena.ListWalletAmount.walletAmounts":
		lv := value.List()
		clv := lv.(*_ListWalletAmount_1_list)
		x.WalletAmounts = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.ListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.ListWalletAmount does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ListWalletAmount) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.ListWalletAmount.walletAmounts":
		if x.WalletAmounts == nil {
			x.WalletAmounts = []*WalletAmount{}
		}
		value := &_ListWalletAmount_1_list{list: &x.WalletAmounts}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.ListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.ListWalletAmount does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ListWalletAmount) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.ListWalletAmount.walletAmounts":
		list := []*WalletAmount{}
		return protoreflect.ValueOfList(&_ListWalletAmount_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.ListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.ListWalletAmount does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ListWalletAmount) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in qadena.qadena.ListWalletAmount", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ListWalletAmount) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ListWalletAmount) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ListWalletAmount) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ListWalletAmount) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ListWalletAmount)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.WalletAmounts) > 0 {
			for _, e := range x.WalletAmounts {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ListWalletAmount)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.WalletAmounts) > 0 {
			for iNdEx := len(x.WalletAmounts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.WalletAmounts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ListWalletAmount)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ListWalletAmount: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ListWalletAmount: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletAmounts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WalletAmounts = append(x.WalletAmounts, &WalletAmount{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.WalletAmounts[len(x.WalletAmounts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Wallet_3_list)(nil)

type _Wallet_3_list struct {
	list *[]string
}

func (x *_Wallet_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Wallet_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Wallet_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Wallet_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Wallet_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Wallet at list field ServiceProviderID as it is not of Message kind"))
}

func (x *_Wallet_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Wallet_3_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Wallet_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.Map = (*_Wallet_4_map)(nil)

type _Wallet_4_map struct {
	m *map[string]*WalletAmount
}

func (x *_Wallet_4_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_Wallet_4_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfMessage(v.ProtoReflect())
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_Wallet_4_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_Wallet_4_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_Wallet_4_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Wallet_4_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*WalletAmount)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_Wallet_4_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if ok {
		return protoreflect.ValueOfMessage(v.ProtoReflect())
	}
	newValue := new(WalletAmount)
	(*x.m)[concreteKey] = newValue
	return protoreflect.ValueOfMessage(newValue.ProtoReflect())
}

func (x *_Wallet_4_map) NewValue() protoreflect.Value {
	v := new(WalletAmount)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Wallet_4_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.Map = (*_Wallet_8_map)(nil)

type _Wallet_8_map struct {
	m *map[string]int32
}

func (x *_Wallet_8_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_Wallet_8_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfInt32(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_Wallet_8_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_Wallet_8_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_Wallet_8_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfInt32(v)
}

func (x *_Wallet_8_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Int()
	concreteValue := (int32)(valueUnwrapped)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_Wallet_8_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_Wallet_8_map) NewValue() protoreflect.Value {
	v := int32(0)
	return protoreflect.ValueOfInt32(v)
}

func (x *_Wallet_8_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.Map = (*_Wallet_9_map)(nil)

type _Wallet_9_map struct {
	m *map[string]*ListWalletAmount
}

func (x *_Wallet_9_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_Wallet_9_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfMessage(v.ProtoReflect())
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_Wallet_9_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_Wallet_9_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_Wallet_9_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Wallet_9_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ListWalletAmount)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_Wallet_9_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if ok {
		return protoreflect.ValueOfMessage(v.ProtoReflect())
	}
	newValue := new(ListWalletAmount)
	(*x.m)[concreteKey] = newValue
	return protoreflect.ValueOfMessage(newValue.ProtoReflect())
}

func (x *_Wallet_9_map) NewValue() protoreflect.Value {
	v := new(ListWalletAmount)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Wallet_9_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.List = (*_Wallet_14_list)(nil)

type _Wallet_14_list struct {
	list *[]*RecoverShare
}

func (x *_Wallet_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Wallet_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Wallet_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RecoverShare)
	(*x.list)[i] = concreteValue
}

func (x *_Wallet_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RecoverShare)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Wallet_14_list) AppendMutable() protoreflect.Value {
	v := new(RecoverShare)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Wallet_14_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Wallet_14_list) NewElement() protoreflect.Value {
	v := new(RecoverShare)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Wallet_14_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Wallet                                      protoreflect.MessageDescriptor
	fd_Wallet_walletID                             protoreflect.FieldDescriptor
	fd_Wallet_homePioneerID                        protoreflect.FieldDescriptor
	fd_Wallet_serviceProviderID                    protoreflect.FieldDescriptor
	fd_Wallet_walletAmount                         protoreflect.FieldDescriptor
	fd_Wallet_credentialID                         protoreflect.FieldDescriptor
	fd_Wallet_encCreateWalletVShare                protoreflect.FieldDescriptor
	fd_Wallet_createWalletVShareBind               protoreflect.FieldDescriptor
	fd_Wallet_ephemeralWalletAmountCount           protoreflect.FieldDescriptor
	fd_Wallet_queuedWalletAmount                   protoreflect.FieldDescriptor
	fd_Wallet_acceptPasswordPedersenCommit         protoreflect.FieldDescriptor
	fd_Wallet_encAcceptValidatedCredentialsVShare  protoreflect.FieldDescriptor
	fd_Wallet_acceptValidatedCredentialsVShareBind protoreflect.FieldDescriptor
	fd_Wallet_senderOptions                        protoreflect.FieldDescriptor
	fd_Wallet_recoverShares                        protoreflect.FieldDescriptor
)

func init() {
	file_qadena_qadena_wallet_proto_init()
	md_Wallet = File_qadena_qadena_wallet_proto.Messages().ByName("Wallet")
	fd_Wallet_walletID = md_Wallet.Fields().ByName("walletID")
	fd_Wallet_homePioneerID = md_Wallet.Fields().ByName("homePioneerID")
	fd_Wallet_serviceProviderID = md_Wallet.Fields().ByName("serviceProviderID")
	fd_Wallet_walletAmount = md_Wallet.Fields().ByName("walletAmount")
	fd_Wallet_credentialID = md_Wallet.Fields().ByName("credentialID")
	fd_Wallet_encCreateWalletVShare = md_Wallet.Fields().ByName("encCreateWalletVShare")
	fd_Wallet_createWalletVShareBind = md_Wallet.Fields().ByName("createWalletVShareBind")
	fd_Wallet_ephemeralWalletAmountCount = md_Wallet.Fields().ByName("ephemeralWalletAmountCount")
	fd_Wallet_queuedWalletAmount = md_Wallet.Fields().ByName("queuedWalletAmount")
	fd_Wallet_acceptPasswordPedersenCommit = md_Wallet.Fields().ByName("acceptPasswordPedersenCommit")
	fd_Wallet_encAcceptValidatedCredentialsVShare = md_Wallet.Fields().ByName("encAcceptValidatedCredentialsVShare")
	fd_Wallet_acceptValidatedCredentialsVShareBind = md_Wallet.Fields().ByName("acceptValidatedCredentialsVShareBind")
	fd_Wallet_senderOptions = md_Wallet.Fields().ByName("senderOptions")
	fd_Wallet_recoverShares = md_Wallet.Fields().ByName("recoverShares")
}

var _ protoreflect.Message = (*fastReflection_Wallet)(nil)

type fastReflection_Wallet Wallet

func (x *Wallet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Wallet)(x)
}

func (x *Wallet) slowProtoReflect() protoreflect.Message {
	mi := &file_qadena_qadena_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Wallet_messageType fastReflection_Wallet_messageType
var _ protoreflect.MessageType = fastReflection_Wallet_messageType{}

type fastReflection_Wallet_messageType struct{}

func (x fastReflection_Wallet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Wallet)(nil)
}
func (x fastReflection_Wallet_messageType) New() protoreflect.Message {
	return new(fastReflection_Wallet)
}
func (x fastReflection_Wallet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Wallet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Wallet) Descriptor() protoreflect.MessageDescriptor {
	return md_Wallet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Wallet) Type() protoreflect.MessageType {
	return _fastReflection_Wallet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Wallet) New() protoreflect.Message {
	return new(fastReflection_Wallet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Wallet) Interface() protoreflect.ProtoMessage {
	return (*Wallet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Wallet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.WalletID != "" {
		value := protoreflect.ValueOfString(x.WalletID)
		if !f(fd_Wallet_walletID, value) {
			return
		}
	}
	if x.HomePioneerID != "" {
		value := protoreflect.ValueOfString(x.HomePioneerID)
		if !f(fd_Wallet_homePioneerID, value) {
			return
		}
	}
	if len(x.ServiceProviderID) != 0 {
		value := protoreflect.ValueOfList(&_Wallet_3_list{list: &x.ServiceProviderID})
		if !f(fd_Wallet_serviceProviderID, value) {
			return
		}
	}
	if len(x.WalletAmount) != 0 {
		value := protoreflect.ValueOfMap(&_Wallet_4_map{m: &x.WalletAmount})
		if !f(fd_Wallet_walletAmount, value) {
			return
		}
	}
	if x.CredentialID != "" {
		value := protoreflect.ValueOfString(x.CredentialID)
		if !f(fd_Wallet_credentialID, value) {
			return
		}
	}
	if len(x.EncCreateWalletVShare) != 0 {
		value := protoreflect.ValueOfBytes(x.EncCreateWalletVShare)
		if !f(fd_Wallet_encCreateWalletVShare, value) {
			return
		}
	}
	if x.CreateWalletVShareBind != nil {
		value := protoreflect.ValueOfMessage(x.CreateWalletVShareBind.ProtoReflect())
		if !f(fd_Wallet_createWalletVShareBind, value) {
			return
		}
	}
	if len(x.EphemeralWalletAmountCount) != 0 {
		value := protoreflect.ValueOfMap(&_Wallet_8_map{m: &x.EphemeralWalletAmountCount})
		if !f(fd_Wallet_ephemeralWalletAmountCount, value) {
			return
		}
	}
	if len(x.QueuedWalletAmount) != 0 {
		value := protoreflect.ValueOfMap(&_Wallet_9_map{m: &x.QueuedWalletAmount})
		if !f(fd_Wallet_queuedWalletAmount, value) {
			return
		}
	}
	if x.AcceptPasswordPedersenCommit != nil {
		value := protoreflect.ValueOfMessage(x.AcceptPasswordPedersenCommit.ProtoReflect())
		if !f(fd_Wallet_acceptPasswordPedersenCommit, value) {
			return
		}
	}
	if len(x.EncAcceptValidatedCredentialsVShare) != 0 {
		value := protoreflect.ValueOfBytes(x.EncAcceptValidatedCredentialsVShare)
		if !f(fd_Wallet_encAcceptValidatedCredentialsVShare, value) {
			return
		}
	}
	if x.AcceptValidatedCredentialsVShareBind != nil {
		value := protoreflect.ValueOfMessage(x.AcceptValidatedCredentialsVShareBind.ProtoReflect())
		if !f(fd_Wallet_acceptValidatedCredentialsVShareBind, value) {
			return
		}
	}
	if x.SenderOptions != "" {
		value := protoreflect.ValueOfString(x.SenderOptions)
		if !f(fd_Wallet_senderOptions, value) {
			return
		}
	}
	if len(x.RecoverShares) != 0 {
		value := protoreflect.ValueOfList(&_Wallet_14_list{list: &x.RecoverShares})
		if !f(fd_Wallet_recoverShares, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Wallet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "qadena.qadena.Wallet.walletID":
		return x.WalletID != ""
	case "qadena.qadena.Wallet.homePioneerID":
		return x.HomePioneerID != ""
	case "qadena.qadena.Wallet.serviceProviderID":
		return len(x.ServiceProviderID) != 0
	case "qadena.qadena.Wallet.walletAmount":
		return len(x.WalletAmount) != 0
	case "qadena.qadena.Wallet.credentialID":
		return x.CredentialID != ""
	case "qadena.qadena.Wallet.encCreateWalletVShare":
		return len(x.EncCreateWalletVShare) != 0
	case "qadena.qadena.Wallet.createWalletVShareBind":
		return x.CreateWalletVShareBind != nil
	case "qadena.qadena.Wallet.ephemeralWalletAmountCount":
		return len(x.EphemeralWalletAmountCount) != 0
	case "qadena.qadena.Wallet.queuedWalletAmount":
		return len(x.QueuedWalletAmount) != 0
	case "qadena.qadena.Wallet.acceptPasswordPedersenCommit":
		return x.AcceptPasswordPedersenCommit != nil
	case "qadena.qadena.Wallet.encAcceptValidatedCredentialsVShare":
		return len(x.EncAcceptValidatedCredentialsVShare) != 0
	case "qadena.qadena.Wallet.acceptValidatedCredentialsVShareBind":
		return x.AcceptValidatedCredentialsVShareBind != nil
	case "qadena.qadena.Wallet.senderOptions":
		return x.SenderOptions != ""
	case "qadena.qadena.Wallet.recoverShares":
		return len(x.RecoverShares) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.Wallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.Wallet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Wallet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "qadena.qadena.Wallet.walletID":
		x.WalletID = ""
	case "qadena.qadena.Wallet.homePioneerID":
		x.HomePioneerID = ""
	case "qadena.qadena.Wallet.serviceProviderID":
		x.ServiceProviderID = nil
	case "qadena.qadena.Wallet.walletAmount":
		x.WalletAmount = nil
	case "qadena.qadena.Wallet.credentialID":
		x.CredentialID = ""
	case "qadena.qadena.Wallet.encCreateWalletVShare":
		x.EncCreateWalletVShare = nil
	case "qadena.qadena.Wallet.createWalletVShareBind":
		x.CreateWalletVShareBind = nil
	case "qadena.qadena.Wallet.ephemeralWalletAmountCount":
		x.EphemeralWalletAmountCount = nil
	case "qadena.qadena.Wallet.queuedWalletAmount":
		x.QueuedWalletAmount = nil
	case "qadena.qadena.Wallet.acceptPasswordPedersenCommit":
		x.AcceptPasswordPedersenCommit = nil
	case "qadena.qadena.Wallet.encAcceptValidatedCredentialsVShare":
		x.EncAcceptValidatedCredentialsVShare = nil
	case "qadena.qadena.Wallet.acceptValidatedCredentialsVShareBind":
		x.AcceptValidatedCredentialsVShareBind = nil
	case "qadena.qadena.Wallet.senderOptions":
		x.SenderOptions = ""
	case "qadena.qadena.Wallet.recoverShares":
		x.RecoverShares = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.Wallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.Wallet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Wallet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "qadena.qadena.Wallet.walletID":
		value := x.WalletID
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.Wallet.homePioneerID":
		value := x.HomePioneerID
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.Wallet.serviceProviderID":
		if len(x.ServiceProviderID) == 0 {
			return protoreflect.ValueOfList(&_Wallet_3_list{})
		}
		listValue := &_Wallet_3_list{list: &x.ServiceProviderID}
		return protoreflect.ValueOfList(listValue)
	case "qadena.qadena.Wallet.walletAmount":
		if len(x.WalletAmount) == 0 {
			return protoreflect.ValueOfMap(&_Wallet_4_map{})
		}
		mapValue := &_Wallet_4_map{m: &x.WalletAmount}
		return protoreflect.ValueOfMap(mapValue)
	case "qadena.qadena.Wallet.credentialID":
		value := x.CredentialID
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.Wallet.encCreateWalletVShare":
		value := x.EncCreateWalletVShare
		return protoreflect.ValueOfBytes(value)
	case "qadena.qadena.Wallet.createWalletVShareBind":
		value := x.CreateWalletVShareBind
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.qadena.Wallet.ephemeralWalletAmountCount":
		if len(x.EphemeralWalletAmountCount) == 0 {
			return protoreflect.ValueOfMap(&_Wallet_8_map{})
		}
		mapValue := &_Wallet_8_map{m: &x.EphemeralWalletAmountCount}
		return protoreflect.ValueOfMap(mapValue)
	case "qadena.qadena.Wallet.queuedWalletAmount":
		if len(x.QueuedWalletAmount) == 0 {
			return protoreflect.ValueOfMap(&_Wallet_9_map{})
		}
		mapValue := &_Wallet_9_map{m: &x.QueuedWalletAmount}
		return protoreflect.ValueOfMap(mapValue)
	case "qadena.qadena.Wallet.acceptPasswordPedersenCommit":
		value := x.AcceptPasswordPedersenCommit
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.qadena.Wallet.encAcceptValidatedCredentialsVShare":
		value := x.EncAcceptValidatedCredentialsVShare
		return protoreflect.ValueOfBytes(value)
	case "qadena.qadena.Wallet.acceptValidatedCredentialsVShareBind":
		value := x.AcceptValidatedCredentialsVShareBind
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.qadena.Wallet.senderOptions":
		value := x.SenderOptions
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.Wallet.recoverShares":
		if len(x.RecoverShares) == 0 {
			return protoreflect.ValueOfList(&_Wallet_14_list{})
		}
		listValue := &_Wallet_14_list{list: &x.RecoverShares}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.Wallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.Wallet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Wallet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "qadena.qadena.Wallet.walletID":
		x.WalletID = value.Interface().(string)
	case "qadena.qadena.Wallet.homePioneerID":
		x.HomePioneerID = value.Interface().(string)
	case "qadena.qadena.Wallet.serviceProviderID":
		lv := value.List()
		clv := lv.(*_Wallet_3_list)
		x.ServiceProviderID = *clv.list
	case "qadena.qadena.Wallet.walletAmount":
		mv := value.Map()
		cmv := mv.(*_Wallet_4_map)
		x.WalletAmount = *cmv.m
	case "qadena.qadena.Wallet.credentialID":
		x.CredentialID = value.Interface().(string)
	case "qadena.qadena.Wallet.encCreateWalletVShare":
		x.EncCreateWalletVShare = value.Bytes()
	case "qadena.qadena.Wallet.createWalletVShareBind":
		x.CreateWalletVShareBind = value.Message().Interface().(*VShareBindData)
	case "qadena.qadena.Wallet.ephemeralWalletAmountCount":
		mv := value.Map()
		cmv := mv.(*_Wallet_8_map)
		x.EphemeralWalletAmountCount = *cmv.m
	case "qadena.qadena.Wallet.queuedWalletAmount":
		mv := value.Map()
		cmv := mv.(*_Wallet_9_map)
		x.QueuedWalletAmount = *cmv.m
	case "qadena.qadena.Wallet.acceptPasswordPedersenCommit":
		x.AcceptPasswordPedersenCommit = value.Message().Interface().(*BPedersenCommit)
	case "qadena.qadena.Wallet.encAcceptValidatedCredentialsVShare":
		x.EncAcceptValidatedCredentialsVShare = value.Bytes()
	case "qadena.qadena.Wallet.acceptValidatedCredentialsVShareBind":
		x.AcceptValidatedCredentialsVShareBind = value.Message().Interface().(*VShareBindData)
	case "qadena.qadena.Wallet.senderOptions":
		x.SenderOptions = value.Interface().(string)
	case "qadena.qadena.Wallet.recoverShares":
		lv := value.List()
		clv := lv.(*_Wallet_14_list)
		x.RecoverShares = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.Wallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.Wallet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Wallet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.Wallet.serviceProviderID":
		if x.ServiceProviderID == nil {
			x.ServiceProviderID = []string{}
		}
		value := &_Wallet_3_list{list: &x.ServiceProviderID}
		return protoreflect.ValueOfList(value)
	case "qadena.qadena.Wallet.walletAmount":
		if x.WalletAmount == nil {
			x.WalletAmount = make(map[string]*WalletAmount)
		}
		value := &_Wallet_4_map{m: &x.WalletAmount}
		return protoreflect.ValueOfMap(value)
	case "qadena.qadena.Wallet.createWalletVShareBind":
		if x.CreateWalletVShareBind == nil {
			x.CreateWalletVShareBind = new(VShareBindData)
		}
		return protoreflect.ValueOfMessage(x.CreateWalletVShareBind.ProtoReflect())
	case "qadena.qadena.Wallet.ephemeralWalletAmountCount":
		if x.EphemeralWalletAmountCount == nil {
			x.EphemeralWalletAmountCount = make(map[string]int32)
		}
		value := &_Wallet_8_map{m: &x.EphemeralWalletAmountCount}
		return protoreflect.ValueOfMap(value)
	case "qadena.qadena.Wallet.queuedWalletAmount":
		if x.QueuedWalletAmount == nil {
			x.QueuedWalletAmount = make(map[string]*ListWalletAmount)
		}
		value := &_Wallet_9_map{m: &x.QueuedWalletAmount}
		return protoreflect.ValueOfMap(value)
	case "qadena.qadena.Wallet.acceptPasswordPedersenCommit":
		if x.AcceptPasswordPedersenCommit == nil {
			x.AcceptPasswordPedersenCommit = new(BPedersenCommit)
		}
		return protoreflect.ValueOfMessage(x.AcceptPasswordPedersenCommit.ProtoReflect())
	case "qadena.qadena.Wallet.acceptValidatedCredentialsVShareBind":
		if x.AcceptValidatedCredentialsVShareBind == nil {
			x.AcceptValidatedCredentialsVShareBind = new(VShareBindData)
		}
		return protoreflect.ValueOfMessage(x.AcceptValidatedCredentialsVShareBind.ProtoReflect())
	case "qadena.qadena.Wallet.recoverShares":
		if x.RecoverShares == nil {
			x.RecoverShares = []*RecoverShare{}
		}
		value := &_Wallet_14_list{list: &x.RecoverShares}
		return protoreflect.ValueOfList(value)
	case "qadena.qadena.Wallet.walletID":
		panic(fmt.Errorf("field walletID of message qadena.qadena.Wallet is not mutable"))
	case "qadena.qadena.Wallet.homePioneerID":
		panic(fmt.Errorf("field homePioneerID of message qadena.qadena.Wallet is not mutable"))
	case "qadena.qadena.Wallet.credentialID":
		panic(fmt.Errorf("field credentialID of message qadena.qadena.Wallet is not mutable"))
	case "qadena.qadena.Wallet.encCreateWalletVShare":
		panic(fmt.Errorf("field encCreateWalletVShare of message qadena.qadena.Wallet is not mutable"))
	case "qadena.qadena.Wallet.encAcceptValidatedCredentialsVShare":
		panic(fmt.Errorf("field encAcceptValidatedCredentialsVShare of message qadena.qadena.Wallet is not mutable"))
	case "qadena.qadena.Wallet.senderOptions":
		panic(fmt.Errorf("field senderOptions of message qadena.qadena.Wallet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.Wallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.Wallet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Wallet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.Wallet.walletID":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.Wallet.homePioneerID":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.Wallet.serviceProviderID":
		list := []string{}
		return protoreflect.ValueOfList(&_Wallet_3_list{list: &list})
	case "qadena.qadena.Wallet.walletAmount":
		m := make(map[string]*WalletAmount)
		return protoreflect.ValueOfMap(&_Wallet_4_map{m: &m})
	case "qadena.qadena.Wallet.credentialID":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.Wallet.encCreateWalletVShare":
		return protoreflect.ValueOfBytes(nil)
	case "qadena.qadena.Wallet.createWalletVShareBind":
		m := new(VShareBindData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.qadena.Wallet.ephemeralWalletAmountCount":
		m := make(map[string]int32)
		return protoreflect.ValueOfMap(&_Wallet_8_map{m: &m})
	case "qadena.qadena.Wallet.queuedWalletAmount":
		m := make(map[string]*ListWalletAmount)
		return protoreflect.ValueOfMap(&_Wallet_9_map{m: &m})
	case "qadena.qadena.Wallet.acceptPasswordPedersenCommit":
		m := new(BPedersenCommit)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.qadena.Wallet.encAcceptValidatedCredentialsVShare":
		return protoreflect.ValueOfBytes(nil)
	case "qadena.qadena.Wallet.acceptValidatedCredentialsVShareBind":
		m := new(VShareBindData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.qadena.Wallet.senderOptions":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.Wallet.recoverShares":
		list := []*RecoverShare{}
		return protoreflect.ValueOfList(&_Wallet_14_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.Wallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.Wallet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Wallet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in qadena.qadena.Wallet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Wallet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Wallet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Wallet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Wallet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Wallet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.WalletID)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.HomePioneerID)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ServiceProviderID) > 0 {
			for _, s := range x.ServiceProviderID {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.WalletAmount) > 0 {
			SiZeMaP := func(k string, v *WalletAmount) {
				l := 0
				if v != nil {
					l = options.Size(v)
				}
				l += 1 + runtime.Sov(uint64(l))
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + l
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.WalletAmount))
				for k := range x.WalletAmount {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.WalletAmount[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.WalletAmount {
					SiZeMaP(k, v)
				}
			}
		}
		l = len(x.CredentialID)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EncCreateWalletVShare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreateWalletVShareBind != nil {
			l = options.Size(x.CreateWalletVShareBind)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.EphemeralWalletAmountCount) > 0 {
			SiZeMaP := func(k string, v int32) {
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + 1 + runtime.Sov(uint64(v))
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.EphemeralWalletAmountCount))
				for k := range x.EphemeralWalletAmountCount {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.EphemeralWalletAmountCount[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.EphemeralWalletAmountCount {
					SiZeMaP(k, v)
				}
			}
		}
		if len(x.QueuedWalletAmount) > 0 {
			SiZeMaP := func(k string, v *ListWalletAmount) {
				l := 0
				if v != nil {
					l = options.Size(v)
				}
				l += 1 + runtime.Sov(uint64(l))
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + l
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.QueuedWalletAmount))
				for k := range x.QueuedWalletAmount {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.QueuedWalletAmount[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.QueuedWalletAmount {
					SiZeMaP(k, v)
				}
			}
		}
		if x.AcceptPasswordPedersenCommit != nil {
			l = options.Size(x.AcceptPasswordPedersenCommit)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EncAcceptValidatedCredentialsVShare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AcceptValidatedCredentialsVShareBind != nil {
			l = options.Size(x.AcceptValidatedCredentialsVShareBind)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SenderOptions)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RecoverShares) > 0 {
			for _, e := range x.RecoverShares {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Wallet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RecoverShares) > 0 {
			for iNdEx := len(x.RecoverShares) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RecoverShares[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x72
			}
		}
		if len(x.SenderOptions) > 0 {
			i -= len(x.SenderOptions)
			copy(dAtA[i:], x.SenderOptions)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SenderOptions)))
			i--
			dAtA[i] = 0x6a
		}
		if x.AcceptValidatedCredentialsVShareBind != nil {
			encoded, err := options.Marshal(x.AcceptValidatedCredentialsVShareBind)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.EncAcceptValidatedCredentialsVShare) > 0 {
			i -= len(x.EncAcceptValidatedCredentialsVShare)
			copy(dAtA[i:], x.EncAcceptValidatedCredentialsVShare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EncAcceptValidatedCredentialsVShare)))
			i--
			dAtA[i] = 0x5a
		}
		if x.AcceptPasswordPedersenCommit != nil {
			encoded, err := options.Marshal(x.AcceptPasswordPedersenCommit)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.QueuedWalletAmount) > 0 {
			MaRsHaLmAp := func(k string, v *ListWalletAmount) (protoiface.MarshalOutput, error) {
				baseI := i
				encoded, err := options.Marshal(v)
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x4a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForQueuedWalletAmount := make([]string, 0, len(x.QueuedWalletAmount))
				for k := range x.QueuedWalletAmount {
					keysForQueuedWalletAmount = append(keysForQueuedWalletAmount, string(k))
				}
				sort.Slice(keysForQueuedWalletAmount, func(i, j int) bool {
					return keysForQueuedWalletAmount[i] < keysForQueuedWalletAmount[j]
				})
				for iNdEx := len(keysForQueuedWalletAmount) - 1; iNdEx >= 0; iNdEx-- {
					v := x.QueuedWalletAmount[string(keysForQueuedWalletAmount[iNdEx])]
					out, err := MaRsHaLmAp(keysForQueuedWalletAmount[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.QueuedWalletAmount {
					v := x.QueuedWalletAmount[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.EphemeralWalletAmountCount) > 0 {
			MaRsHaLmAp := func(k string, v int32) (protoiface.MarshalOutput, error) {
				baseI := i
				i = runtime.EncodeVarint(dAtA, i, uint64(v))
				i--
				dAtA[i] = 0x10
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x42
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForEphemeralWalletAmountCount := make([]string, 0, len(x.EphemeralWalletAmountCount))
				for k := range x.EphemeralWalletAmountCount {
					keysForEphemeralWalletAmountCount = append(keysForEphemeralWalletAmountCount, string(k))
				}
				sort.Slice(keysForEphemeralWalletAmountCount, func(i, j int) bool {
					return keysForEphemeralWalletAmountCount[i] < keysForEphemeralWalletAmountCount[j]
				})
				for iNdEx := len(keysForEphemeralWalletAmountCount) - 1; iNdEx >= 0; iNdEx-- {
					v := x.EphemeralWalletAmountCount[string(keysForEphemeralWalletAmountCount[iNdEx])]
					out, err := MaRsHaLmAp(keysForEphemeralWalletAmountCount[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.EphemeralWalletAmountCount {
					v := x.EphemeralWalletAmountCount[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if x.CreateWalletVShareBind != nil {
			encoded, err := options.Marshal(x.CreateWalletVShareBind)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.EncCreateWalletVShare) > 0 {
			i -= len(x.EncCreateWalletVShare)
			copy(dAtA[i:], x.EncCreateWalletVShare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EncCreateWalletVShare)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.CredentialID) > 0 {
			i -= len(x.CredentialID)
			copy(dAtA[i:], x.CredentialID)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CredentialID)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.WalletAmount) > 0 {
			MaRsHaLmAp := func(k string, v *WalletAmount) (protoiface.MarshalOutput, error) {
				baseI := i
				encoded, err := options.Marshal(v)
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x22
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForWalletAmount := make([]string, 0, len(x.WalletAmount))
				for k := range x.WalletAmount {
					keysForWalletAmount = append(keysForWalletAmount, string(k))
				}
				sort.Slice(keysForWalletAmount, func(i, j int) bool {
					return keysForWalletAmount[i] < keysForWalletAmount[j]
				})
				for iNdEx := len(keysForWalletAmount) - 1; iNdEx >= 0; iNdEx-- {
					v := x.WalletAmount[string(keysForWalletAmount[iNdEx])]
					out, err := MaRsHaLmAp(keysForWalletAmount[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.WalletAmount {
					v := x.WalletAmount[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.ServiceProviderID) > 0 {
			for iNdEx := len(x.ServiceProviderID) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ServiceProviderID[iNdEx])
				copy(dAtA[i:], x.ServiceProviderID[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ServiceProviderID[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.HomePioneerID) > 0 {
			i -= len(x.HomePioneerID)
			copy(dAtA[i:], x.HomePioneerID)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HomePioneerID)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.WalletID) > 0 {
			i -= len(x.WalletID)
			copy(dAtA[i:], x.WalletID)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WalletID)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Wallet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Wallet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WalletID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HomePioneerID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HomePioneerID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ServiceProviderID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ServiceProviderID = append(x.ServiceProviderID, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.WalletAmount == nil {
					x.WalletAmount = make(map[string]*WalletAmount)
				}
				var mapkey string
				var mapvalue *WalletAmount
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						var mapmsglen int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapmsglen |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						if mapmsglen < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postmsgIndex := iNdEx + mapmsglen
						if postmsgIndex < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postmsgIndex > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = &WalletAmount{}
						if err := options.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						iNdEx = postmsgIndex
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.WalletAmount[mapkey] = mapvalue
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CredentialID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncCreateWalletVShare", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncCreateWalletVShare = append(x.EncCreateWalletVShare[:0], dAtA[iNdEx:postIndex]...)
				if x.EncCreateWalletVShare == nil {
					x.EncCreateWalletVShare = []byte{}
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateWalletVShareBind", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CreateWalletVShareBind == nil {
					x.CreateWalletVShareBind = &VShareBindData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CreateWalletVShareBind); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EphemeralWalletAmountCount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EphemeralWalletAmountCount == nil {
					x.EphemeralWalletAmountCount = make(map[string]int32)
				}
				var mapkey string
				var mapvalue int32
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapvalue |= int32(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.EphemeralWalletAmountCount[mapkey] = mapvalue
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QueuedWalletAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.QueuedWalletAmount == nil {
					x.QueuedWalletAmount = make(map[string]*ListWalletAmount)
				}
				var mapkey string
				var mapvalue *ListWalletAmount
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						var mapmsglen int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapmsglen |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						if mapmsglen < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postmsgIndex := iNdEx + mapmsglen
						if postmsgIndex < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postmsgIndex > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = &ListWalletAmount{}
						if err := options.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						iNdEx = postmsgIndex
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.QueuedWalletAmount[mapkey] = mapvalue
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AcceptPasswordPedersenCommit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AcceptPasswordPedersenCommit == nil {
					x.AcceptPasswordPedersenCommit = &BPedersenCommit{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AcceptPasswordPedersenCommit); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncAcceptValidatedCredentialsVShare", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncAcceptValidatedCredentialsVShare = append(x.EncAcceptValidatedCredentialsVShare[:0], dAtA[iNdEx:postIndex]...)
				if x.EncAcceptValidatedCredentialsVShare == nil {
					x.EncAcceptValidatedCredentialsVShare = []byte{}
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AcceptValidatedCredentialsVShareBind", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AcceptValidatedCredentialsVShareBind == nil {
					x.AcceptValidatedCredentialsVShareBind = &VShareBindData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AcceptValidatedCredentialsVShareBind); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SenderOptions", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SenderOptions = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecoverShares", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RecoverShares = append(x.RecoverShares, &RecoverShare{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RecoverShares[len(x.RecoverShares)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_StringWalletAmount      protoreflect.MessageDescriptor
	fd_StringWalletAmount_name protoreflect.FieldDescriptor
	fd_StringWalletAmount_val  protoreflect.FieldDescriptor
)

func init() {
	file_qadena_qadena_wallet_proto_init()
	md_StringWalletAmount = File_qadena_qadena_wallet_proto.Messages().ByName("StringWalletAmount")
	fd_StringWalletAmount_name = md_StringWalletAmount.Fields().ByName("name")
	fd_StringWalletAmount_val = md_StringWalletAmount.Fields().ByName("val")
}

var _ protoreflect.Message = (*fastReflection_StringWalletAmount)(nil)

type fastReflection_StringWalletAmount StringWalletAmount

func (x *StringWalletAmount) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StringWalletAmount)(x)
}

func (x *StringWalletAmount) slowProtoReflect() protoreflect.Message {
	mi := &file_qadena_qadena_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StringWalletAmount_messageType fastReflection_StringWalletAmount_messageType
var _ protoreflect.MessageType = fastReflection_StringWalletAmount_messageType{}

type fastReflection_StringWalletAmount_messageType struct{}

func (x fastReflection_StringWalletAmount_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StringWalletAmount)(nil)
}
func (x fastReflection_StringWalletAmount_messageType) New() protoreflect.Message {
	return new(fastReflection_StringWalletAmount)
}
func (x fastReflection_StringWalletAmount_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StringWalletAmount
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StringWalletAmount) Descriptor() protoreflect.MessageDescriptor {
	return md_StringWalletAmount
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StringWalletAmount) Type() protoreflect.MessageType {
	return _fastReflection_StringWalletAmount_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StringWalletAmount) New() protoreflect.Message {
	return new(fastReflection_StringWalletAmount)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StringWalletAmount) Interface() protoreflect.ProtoMessage {
	return (*StringWalletAmount)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StringWalletAmount) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_StringWalletAmount_name, value) {
			return
		}
	}
	if x.Val != nil {
		value := protoreflect.ValueOfMessage(x.Val.ProtoReflect())
		if !f(fd_StringWalletAmount_val, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StringWalletAmount) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "qadena.qadena.StringWalletAmount.name":
		return x.Name != ""
	case "qadena.qadena.StringWalletAmount.val":
		return x.Val != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringWalletAmount does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringWalletAmount) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "qadena.qadena.StringWalletAmount.name":
		x.Name = ""
	case "qadena.qadena.StringWalletAmount.val":
		x.Val = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringWalletAmount does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StringWalletAmount) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "qadena.qadena.StringWalletAmount.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.StringWalletAmount.val":
		value := x.Val
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringWalletAmount does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringWalletAmount) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "qadena.qadena.StringWalletAmount.name":
		x.Name = value.Interface().(string)
	case "qadena.qadena.StringWalletAmount.val":
		x.Val = value.Message().Interface().(*WalletAmount)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringWalletAmount does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringWalletAmount) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.StringWalletAmount.val":
		if x.Val == nil {
			x.Val = new(WalletAmount)
		}
		return protoreflect.ValueOfMessage(x.Val.ProtoReflect())
	case "qadena.qadena.StringWalletAmount.name":
		panic(fmt.Errorf("field name of message qadena.qadena.StringWalletAmount is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringWalletAmount does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StringWalletAmount) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.StringWalletAmount.name":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.StringWalletAmount.val":
		m := new(WalletAmount)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringWalletAmount does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StringWalletAmount) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in qadena.qadena.StringWalletAmount", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StringWalletAmount) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringWalletAmount) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StringWalletAmount) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StringWalletAmount) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StringWalletAmount)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Val != nil {
			l = options.Size(x.Val)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StringWalletAmount)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Val != nil {
			encoded, err := options.Marshal(x.Val)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StringWalletAmount)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StringWalletAmount: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StringWalletAmount: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Val == nil {
					x.Val = &WalletAmount{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Val); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_StringInt32      protoreflect.MessageDescriptor
	fd_StringInt32_name protoreflect.FieldDescriptor
	fd_StringInt32_val  protoreflect.FieldDescriptor
)

func init() {
	file_qadena_qadena_wallet_proto_init()
	md_StringInt32 = File_qadena_qadena_wallet_proto.Messages().ByName("StringInt32")
	fd_StringInt32_name = md_StringInt32.Fields().ByName("name")
	fd_StringInt32_val = md_StringInt32.Fields().ByName("val")
}

var _ protoreflect.Message = (*fastReflection_StringInt32)(nil)

type fastReflection_StringInt32 StringInt32

func (x *StringInt32) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StringInt32)(x)
}

func (x *StringInt32) slowProtoReflect() protoreflect.Message {
	mi := &file_qadena_qadena_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StringInt32_messageType fastReflection_StringInt32_messageType
var _ protoreflect.MessageType = fastReflection_StringInt32_messageType{}

type fastReflection_StringInt32_messageType struct{}

func (x fastReflection_StringInt32_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StringInt32)(nil)
}
func (x fastReflection_StringInt32_messageType) New() protoreflect.Message {
	return new(fastReflection_StringInt32)
}
func (x fastReflection_StringInt32_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StringInt32
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StringInt32) Descriptor() protoreflect.MessageDescriptor {
	return md_StringInt32
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StringInt32) Type() protoreflect.MessageType {
	return _fastReflection_StringInt32_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StringInt32) New() protoreflect.Message {
	return new(fastReflection_StringInt32)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StringInt32) Interface() protoreflect.ProtoMessage {
	return (*StringInt32)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StringInt32) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_StringInt32_name, value) {
			return
		}
	}
	if x.Val != int32(0) {
		value := protoreflect.ValueOfInt32(x.Val)
		if !f(fd_StringInt32_val, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StringInt32) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "qadena.qadena.StringInt32.name":
		return x.Name != ""
	case "qadena.qadena.StringInt32.val":
		return x.Val != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringInt32"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringInt32 does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringInt32) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "qadena.qadena.StringInt32.name":
		x.Name = ""
	case "qadena.qadena.StringInt32.val":
		x.Val = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringInt32"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringInt32 does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StringInt32) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "qadena.qadena.StringInt32.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.StringInt32.val":
		value := x.Val
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringInt32"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringInt32 does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringInt32) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "qadena.qadena.StringInt32.name":
		x.Name = value.Interface().(string)
	case "qadena.qadena.StringInt32.val":
		x.Val = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringInt32"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringInt32 does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringInt32) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.StringInt32.name":
		panic(fmt.Errorf("field name of message qadena.qadena.StringInt32 is not mutable"))
	case "qadena.qadena.StringInt32.val":
		panic(fmt.Errorf("field val of message qadena.qadena.StringInt32 is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringInt32"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringInt32 does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StringInt32) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.StringInt32.name":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.StringInt32.val":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringInt32"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringInt32 does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StringInt32) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in qadena.qadena.StringInt32", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StringInt32) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringInt32) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StringInt32) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StringInt32) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StringInt32)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Val != 0 {
			n += 1 + runtime.Sov(uint64(x.Val))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StringInt32)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Val != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Val))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StringInt32)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StringInt32: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StringInt32: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
				}
				x.Val = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Val |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_StringListWalletAmount      protoreflect.MessageDescriptor
	fd_StringListWalletAmount_name protoreflect.FieldDescriptor
	fd_StringListWalletAmount_val  protoreflect.FieldDescriptor
)

func init() {
	file_qadena_qadena_wallet_proto_init()
	md_StringListWalletAmount = File_qadena_qadena_wallet_proto.Messages().ByName("StringListWalletAmount")
	fd_StringListWalletAmount_name = md_StringListWalletAmount.Fields().ByName("name")
	fd_StringListWalletAmount_val = md_StringListWalletAmount.Fields().ByName("val")
}

var _ protoreflect.Message = (*fastReflection_StringListWalletAmount)(nil)

type fastReflection_StringListWalletAmount StringListWalletAmount

func (x *StringListWalletAmount) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StringListWalletAmount)(x)
}

func (x *StringListWalletAmount) slowProtoReflect() protoreflect.Message {
	mi := &file_qadena_qadena_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StringListWalletAmount_messageType fastReflection_StringListWalletAmount_messageType
var _ protoreflect.MessageType = fastReflection_StringListWalletAmount_messageType{}

type fastReflection_StringListWalletAmount_messageType struct{}

func (x fastReflection_StringListWalletAmount_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StringListWalletAmount)(nil)
}
func (x fastReflection_StringListWalletAmount_messageType) New() protoreflect.Message {
	return new(fastReflection_StringListWalletAmount)
}
func (x fastReflection_StringListWalletAmount_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StringListWalletAmount
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StringListWalletAmount) Descriptor() protoreflect.MessageDescriptor {
	return md_StringListWalletAmount
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StringListWalletAmount) Type() protoreflect.MessageType {
	return _fastReflection_StringListWalletAmount_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StringListWalletAmount) New() protoreflect.Message {
	return new(fastReflection_StringListWalletAmount)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StringListWalletAmount) Interface() protoreflect.ProtoMessage {
	return (*StringListWalletAmount)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StringListWalletAmount) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_StringListWalletAmount_name, value) {
			return
		}
	}
	if x.Val != nil {
		value := protoreflect.ValueOfMessage(x.Val.ProtoReflect())
		if !f(fd_StringListWalletAmount_val, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StringListWalletAmount) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "qadena.qadena.StringListWalletAmount.name":
		return x.Name != ""
	case "qadena.qadena.StringListWalletAmount.val":
		return x.Val != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringListWalletAmount does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringListWalletAmount) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "qadena.qadena.StringListWalletAmount.name":
		x.Name = ""
	case "qadena.qadena.StringListWalletAmount.val":
		x.Val = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringListWalletAmount does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StringListWalletAmount) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "qadena.qadena.StringListWalletAmount.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.StringListWalletAmount.val":
		value := x.Val
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringListWalletAmount does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringListWalletAmount) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "qadena.qadena.StringListWalletAmount.name":
		x.Name = value.Interface().(string)
	case "qadena.qadena.StringListWalletAmount.val":
		x.Val = value.Message().Interface().(*ListWalletAmount)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringListWalletAmount does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringListWalletAmount) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.StringListWalletAmount.val":
		if x.Val == nil {
			x.Val = new(ListWalletAmount)
		}
		return protoreflect.ValueOfMessage(x.Val.ProtoReflect())
	case "qadena.qadena.StringListWalletAmount.name":
		panic(fmt.Errorf("field name of message qadena.qadena.StringListWalletAmount is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringListWalletAmount does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StringListWalletAmount) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.StringListWalletAmount.name":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.StringListWalletAmount.val":
		m := new(ListWalletAmount)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StringListWalletAmount"))
		}
		panic(fmt.Errorf("message qadena.qadena.StringListWalletAmount does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StringListWalletAmount) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in qadena.qadena.StringListWalletAmount", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StringListWalletAmount) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringListWalletAmount) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StringListWalletAmount) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StringListWalletAmount) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StringListWalletAmount)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Val != nil {
			l = options.Size(x.Val)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StringListWalletAmount)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Val != nil {
			encoded, err := options.Marshal(x.Val)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StringListWalletAmount)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StringListWalletAmount: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StringListWalletAmount: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Val == nil {
					x.Val = &ListWalletAmount{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Val); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_StableWallet_3_list)(nil)

type _StableWallet_3_list struct {
	list *[]string
}

func (x *_StableWallet_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StableWallet_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_StableWallet_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_StableWallet_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_StableWallet_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message StableWallet at list field ServiceProviderID as it is not of Message kind"))
}

func (x *_StableWallet_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_StableWallet_3_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_StableWallet_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_StableWallet_4_list)(nil)

type _StableWallet_4_list struct {
	list *[]*StringWalletAmount
}

func (x *_StableWallet_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StableWallet_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_StableWallet_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*StringWalletAmount)
	(*x.list)[i] = concreteValue
}

func (x *_StableWallet_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*StringWalletAmount)
	*x.list = append(*x.list, concreteValue)
}

func (x *_StableWallet_4_list) AppendMutable() protoreflect.Value {
	v := new(StringWalletAmount)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StableWallet_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_StableWallet_4_list) NewElement() protoreflect.Value {
	v := new(StringWalletAmount)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StableWallet_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_StableWallet_8_list)(nil)

type _StableWallet_8_list struct {
	list *[]*StringInt32
}

func (x *_StableWallet_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StableWallet_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_StableWallet_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*StringInt32)
	(*x.list)[i] = concreteValue
}

func (x *_StableWallet_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*StringInt32)
	*x.list = append(*x.list, concreteValue)
}

func (x *_StableWallet_8_list) AppendMutable() protoreflect.Value {
	v := new(StringInt32)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StableWallet_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_StableWallet_8_list) NewElement() protoreflect.Value {
	v := new(StringInt32)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StableWallet_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_StableWallet_9_list)(nil)

type _StableWallet_9_list struct {
	list *[]*StringListWalletAmount
}

func (x *_StableWallet_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StableWallet_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_StableWallet_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*StringListWalletAmount)
	(*x.list)[i] = concreteValue
}

func (x *_StableWallet_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*StringListWalletAmount)
	*x.list = append(*x.list, concreteValue)
}

func (x *_StableWallet_9_list) AppendMutable() protoreflect.Value {
	v := new(StringListWalletAmount)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StableWallet_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_StableWallet_9_list) NewElement() protoreflect.Value {
	v := new(StringListWalletAmount)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StableWallet_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_StableWallet_14_list)(nil)

type _StableWallet_14_list struct {
	list *[]*RecoverShare
}

func (x *_StableWallet_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StableWallet_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_StableWallet_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RecoverShare)
	(*x.list)[i] = concreteValue
}

func (x *_StableWallet_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RecoverShare)
	*x.list = append(*x.list, concreteValue)
}

func (x *_StableWallet_14_list) AppendMutable() protoreflect.Value {
	v := new(RecoverShare)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StableWallet_14_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_StableWallet_14_list) NewElement() protoreflect.Value {
	v := new(RecoverShare)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StableWallet_14_list) IsValid() bool {
	return x.list != nil
}

var (
	md_StableWallet                                      protoreflect.MessageDescriptor
	fd_StableWallet_walletID                             protoreflect.FieldDescriptor
	fd_StableWallet_homePioneerID                        protoreflect.FieldDescriptor
	fd_StableWallet_serviceProviderID                    protoreflect.FieldDescriptor
	fd_StableWallet_walletAmount                         protoreflect.FieldDescriptor
	fd_StableWallet_credentialID                         protoreflect.FieldDescriptor
	fd_StableWallet_encCreateWalletVShare                protoreflect.FieldDescriptor
	fd_StableWallet_createWalletVShareBind               protoreflect.FieldDescriptor
	fd_StableWallet_ephemeralWalletAmountCount           protoreflect.FieldDescriptor
	fd_StableWallet_queuedWalletAmount                   protoreflect.FieldDescriptor
	fd_StableWallet_acceptPasswordPedersenCommit         protoreflect.FieldDescriptor
	fd_StableWallet_encAcceptValidatedCredentialsVShare  protoreflect.FieldDescriptor
	fd_StableWallet_acceptValidatedCredentialsVShareBind protoreflect.FieldDescriptor
	fd_StableWallet_senderOptions                        protoreflect.FieldDescriptor
	fd_StableWallet_recoverShares                        protoreflect.FieldDescriptor
)

func init() {
	file_qadena_qadena_wallet_proto_init()
	md_StableWallet = File_qadena_qadena_wallet_proto.Messages().ByName("StableWallet")
	fd_StableWallet_walletID = md_StableWallet.Fields().ByName("walletID")
	fd_StableWallet_homePioneerID = md_StableWallet.Fields().ByName("homePioneerID")
	fd_StableWallet_serviceProviderID = md_StableWallet.Fields().ByName("serviceProviderID")
	fd_StableWallet_walletAmount = md_StableWallet.Fields().ByName("walletAmount")
	fd_StableWallet_credentialID = md_StableWallet.Fields().ByName("credentialID")
	fd_StableWallet_encCreateWalletVShare = md_StableWallet.Fields().ByName("encCreateWalletVShare")
	fd_StableWallet_createWalletVShareBind = md_StableWallet.Fields().ByName("createWalletVShareBind")
	fd_StableWallet_ephemeralWalletAmountCount = md_StableWallet.Fields().ByName("ephemeralWalletAmountCount")
	fd_StableWallet_queuedWalletAmount = md_StableWallet.Fields().ByName("queuedWalletAmount")
	fd_StableWallet_acceptPasswordPedersenCommit = md_StableWallet.Fields().ByName("acceptPasswordPedersenCommit")
	fd_StableWallet_encAcceptValidatedCredentialsVShare = md_StableWallet.Fields().ByName("encAcceptValidatedCredentialsVShare")
	fd_StableWallet_acceptValidatedCredentialsVShareBind = md_StableWallet.Fields().ByName("acceptValidatedCredentialsVShareBind")
	fd_StableWallet_senderOptions = md_StableWallet.Fields().ByName("senderOptions")
	fd_StableWallet_recoverShares = md_StableWallet.Fields().ByName("recoverShares")
}

var _ protoreflect.Message = (*fastReflection_StableWallet)(nil)

type fastReflection_StableWallet StableWallet

func (x *StableWallet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StableWallet)(x)
}

func (x *StableWallet) slowProtoReflect() protoreflect.Message {
	mi := &file_qadena_qadena_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StableWallet_messageType fastReflection_StableWallet_messageType
var _ protoreflect.MessageType = fastReflection_StableWallet_messageType{}

type fastReflection_StableWallet_messageType struct{}

func (x fastReflection_StableWallet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StableWallet)(nil)
}
func (x fastReflection_StableWallet_messageType) New() protoreflect.Message {
	return new(fastReflection_StableWallet)
}
func (x fastReflection_StableWallet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StableWallet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StableWallet) Descriptor() protoreflect.MessageDescriptor {
	return md_StableWallet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StableWallet) Type() protoreflect.MessageType {
	return _fastReflection_StableWallet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StableWallet) New() protoreflect.Message {
	return new(fastReflection_StableWallet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StableWallet) Interface() protoreflect.ProtoMessage {
	return (*StableWallet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StableWallet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.WalletID != "" {
		value := protoreflect.ValueOfString(x.WalletID)
		if !f(fd_StableWallet_walletID, value) {
			return
		}
	}
	if x.HomePioneerID != "" {
		value := protoreflect.ValueOfString(x.HomePioneerID)
		if !f(fd_StableWallet_homePioneerID, value) {
			return
		}
	}
	if len(x.ServiceProviderID) != 0 {
		value := protoreflect.ValueOfList(&_StableWallet_3_list{list: &x.ServiceProviderID})
		if !f(fd_StableWallet_serviceProviderID, value) {
			return
		}
	}
	if len(x.WalletAmount) != 0 {
		value := protoreflect.ValueOfList(&_StableWallet_4_list{list: &x.WalletAmount})
		if !f(fd_StableWallet_walletAmount, value) {
			return
		}
	}
	if x.CredentialID != "" {
		value := protoreflect.ValueOfString(x.CredentialID)
		if !f(fd_StableWallet_credentialID, value) {
			return
		}
	}
	if len(x.EncCreateWalletVShare) != 0 {
		value := protoreflect.ValueOfBytes(x.EncCreateWalletVShare)
		if !f(fd_StableWallet_encCreateWalletVShare, value) {
			return
		}
	}
	if x.CreateWalletVShareBind != nil {
		value := protoreflect.ValueOfMessage(x.CreateWalletVShareBind.ProtoReflect())
		if !f(fd_StableWallet_createWalletVShareBind, value) {
			return
		}
	}
	if len(x.EphemeralWalletAmountCount) != 0 {
		value := protoreflect.ValueOfList(&_StableWallet_8_list{list: &x.EphemeralWalletAmountCount})
		if !f(fd_StableWallet_ephemeralWalletAmountCount, value) {
			return
		}
	}
	if len(x.QueuedWalletAmount) != 0 {
		value := protoreflect.ValueOfList(&_StableWallet_9_list{list: &x.QueuedWalletAmount})
		if !f(fd_StableWallet_queuedWalletAmount, value) {
			return
		}
	}
	if x.AcceptPasswordPedersenCommit != nil {
		value := protoreflect.ValueOfMessage(x.AcceptPasswordPedersenCommit.ProtoReflect())
		if !f(fd_StableWallet_acceptPasswordPedersenCommit, value) {
			return
		}
	}
	if len(x.EncAcceptValidatedCredentialsVShare) != 0 {
		value := protoreflect.ValueOfBytes(x.EncAcceptValidatedCredentialsVShare)
		if !f(fd_StableWallet_encAcceptValidatedCredentialsVShare, value) {
			return
		}
	}
	if x.AcceptValidatedCredentialsVShareBind != nil {
		value := protoreflect.ValueOfMessage(x.AcceptValidatedCredentialsVShareBind.ProtoReflect())
		if !f(fd_StableWallet_acceptValidatedCredentialsVShareBind, value) {
			return
		}
	}
	if x.SenderOptions != "" {
		value := protoreflect.ValueOfString(x.SenderOptions)
		if !f(fd_StableWallet_senderOptions, value) {
			return
		}
	}
	if len(x.RecoverShares) != 0 {
		value := protoreflect.ValueOfList(&_StableWallet_14_list{list: &x.RecoverShares})
		if !f(fd_StableWallet_recoverShares, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StableWallet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "qadena.qadena.StableWallet.walletID":
		return x.WalletID != ""
	case "qadena.qadena.StableWallet.homePioneerID":
		return x.HomePioneerID != ""
	case "qadena.qadena.StableWallet.serviceProviderID":
		return len(x.ServiceProviderID) != 0
	case "qadena.qadena.StableWallet.walletAmount":
		return len(x.WalletAmount) != 0
	case "qadena.qadena.StableWallet.credentialID":
		return x.CredentialID != ""
	case "qadena.qadena.StableWallet.encCreateWalletVShare":
		return len(x.EncCreateWalletVShare) != 0
	case "qadena.qadena.StableWallet.createWalletVShareBind":
		return x.CreateWalletVShareBind != nil
	case "qadena.qadena.StableWallet.ephemeralWalletAmountCount":
		return len(x.EphemeralWalletAmountCount) != 0
	case "qadena.qadena.StableWallet.queuedWalletAmount":
		return len(x.QueuedWalletAmount) != 0
	case "qadena.qadena.StableWallet.acceptPasswordPedersenCommit":
		return x.AcceptPasswordPedersenCommit != nil
	case "qadena.qadena.StableWallet.encAcceptValidatedCredentialsVShare":
		return len(x.EncAcceptValidatedCredentialsVShare) != 0
	case "qadena.qadena.StableWallet.acceptValidatedCredentialsVShareBind":
		return x.AcceptValidatedCredentialsVShareBind != nil
	case "qadena.qadena.StableWallet.senderOptions":
		return x.SenderOptions != ""
	case "qadena.qadena.StableWallet.recoverShares":
		return len(x.RecoverShares) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StableWallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.StableWallet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StableWallet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "qadena.qadena.StableWallet.walletID":
		x.WalletID = ""
	case "qadena.qadena.StableWallet.homePioneerID":
		x.HomePioneerID = ""
	case "qadena.qadena.StableWallet.serviceProviderID":
		x.ServiceProviderID = nil
	case "qadena.qadena.StableWallet.walletAmount":
		x.WalletAmount = nil
	case "qadena.qadena.StableWallet.credentialID":
		x.CredentialID = ""
	case "qadena.qadena.StableWallet.encCreateWalletVShare":
		x.EncCreateWalletVShare = nil
	case "qadena.qadena.StableWallet.createWalletVShareBind":
		x.CreateWalletVShareBind = nil
	case "qadena.qadena.StableWallet.ephemeralWalletAmountCount":
		x.EphemeralWalletAmountCount = nil
	case "qadena.qadena.StableWallet.queuedWalletAmount":
		x.QueuedWalletAmount = nil
	case "qadena.qadena.StableWallet.acceptPasswordPedersenCommit":
		x.AcceptPasswordPedersenCommit = nil
	case "qadena.qadena.StableWallet.encAcceptValidatedCredentialsVShare":
		x.EncAcceptValidatedCredentialsVShare = nil
	case "qadena.qadena.StableWallet.acceptValidatedCredentialsVShareBind":
		x.AcceptValidatedCredentialsVShareBind = nil
	case "qadena.qadena.StableWallet.senderOptions":
		x.SenderOptions = ""
	case "qadena.qadena.StableWallet.recoverShares":
		x.RecoverShares = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StableWallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.StableWallet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StableWallet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "qadena.qadena.StableWallet.walletID":
		value := x.WalletID
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.StableWallet.homePioneerID":
		value := x.HomePioneerID
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.StableWallet.serviceProviderID":
		if len(x.ServiceProviderID) == 0 {
			return protoreflect.ValueOfList(&_StableWallet_3_list{})
		}
		listValue := &_StableWallet_3_list{list: &x.ServiceProviderID}
		return protoreflect.ValueOfList(listValue)
	case "qadena.qadena.StableWallet.walletAmount":
		if len(x.WalletAmount) == 0 {
			return protoreflect.ValueOfList(&_StableWallet_4_list{})
		}
		listValue := &_StableWallet_4_list{list: &x.WalletAmount}
		return protoreflect.ValueOfList(listValue)
	case "qadena.qadena.StableWallet.credentialID":
		value := x.CredentialID
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.StableWallet.encCreateWalletVShare":
		value := x.EncCreateWalletVShare
		return protoreflect.ValueOfBytes(value)
	case "qadena.qadena.StableWallet.createWalletVShareBind":
		value := x.CreateWalletVShareBind
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.qadena.StableWallet.ephemeralWalletAmountCount":
		if len(x.EphemeralWalletAmountCount) == 0 {
			return protoreflect.ValueOfList(&_StableWallet_8_list{})
		}
		listValue := &_StableWallet_8_list{list: &x.EphemeralWalletAmountCount}
		return protoreflect.ValueOfList(listValue)
	case "qadena.qadena.StableWallet.queuedWalletAmount":
		if len(x.QueuedWalletAmount) == 0 {
			return protoreflect.ValueOfList(&_StableWallet_9_list{})
		}
		listValue := &_StableWallet_9_list{list: &x.QueuedWalletAmount}
		return protoreflect.ValueOfList(listValue)
	case "qadena.qadena.StableWallet.acceptPasswordPedersenCommit":
		value := x.AcceptPasswordPedersenCommit
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.qadena.StableWallet.encAcceptValidatedCredentialsVShare":
		value := x.EncAcceptValidatedCredentialsVShare
		return protoreflect.ValueOfBytes(value)
	case "qadena.qadena.StableWallet.acceptValidatedCredentialsVShareBind":
		value := x.AcceptValidatedCredentialsVShareBind
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "qadena.qadena.StableWallet.senderOptions":
		value := x.SenderOptions
		return protoreflect.ValueOfString(value)
	case "qadena.qadena.StableWallet.recoverShares":
		if len(x.RecoverShares) == 0 {
			return protoreflect.ValueOfList(&_StableWallet_14_list{})
		}
		listValue := &_StableWallet_14_list{list: &x.RecoverShares}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StableWallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.StableWallet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StableWallet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "qadena.qadena.StableWallet.walletID":
		x.WalletID = value.Interface().(string)
	case "qadena.qadena.StableWallet.homePioneerID":
		x.HomePioneerID = value.Interface().(string)
	case "qadena.qadena.StableWallet.serviceProviderID":
		lv := value.List()
		clv := lv.(*_StableWallet_3_list)
		x.ServiceProviderID = *clv.list
	case "qadena.qadena.StableWallet.walletAmount":
		lv := value.List()
		clv := lv.(*_StableWallet_4_list)
		x.WalletAmount = *clv.list
	case "qadena.qadena.StableWallet.credentialID":
		x.CredentialID = value.Interface().(string)
	case "qadena.qadena.StableWallet.encCreateWalletVShare":
		x.EncCreateWalletVShare = value.Bytes()
	case "qadena.qadena.StableWallet.createWalletVShareBind":
		x.CreateWalletVShareBind = value.Message().Interface().(*VShareBindData)
	case "qadena.qadena.StableWallet.ephemeralWalletAmountCount":
		lv := value.List()
		clv := lv.(*_StableWallet_8_list)
		x.EphemeralWalletAmountCount = *clv.list
	case "qadena.qadena.StableWallet.queuedWalletAmount":
		lv := value.List()
		clv := lv.(*_StableWallet_9_list)
		x.QueuedWalletAmount = *clv.list
	case "qadena.qadena.StableWallet.acceptPasswordPedersenCommit":
		x.AcceptPasswordPedersenCommit = value.Message().Interface().(*BPedersenCommit)
	case "qadena.qadena.StableWallet.encAcceptValidatedCredentialsVShare":
		x.EncAcceptValidatedCredentialsVShare = value.Bytes()
	case "qadena.qadena.StableWallet.acceptValidatedCredentialsVShareBind":
		x.AcceptValidatedCredentialsVShareBind = value.Message().Interface().(*VShareBindData)
	case "qadena.qadena.StableWallet.senderOptions":
		x.SenderOptions = value.Interface().(string)
	case "qadena.qadena.StableWallet.recoverShares":
		lv := value.List()
		clv := lv.(*_StableWallet_14_list)
		x.RecoverShares = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StableWallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.StableWallet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StableWallet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.StableWallet.serviceProviderID":
		if x.ServiceProviderID == nil {
			x.ServiceProviderID = []string{}
		}
		value := &_StableWallet_3_list{list: &x.ServiceProviderID}
		return protoreflect.ValueOfList(value)
	case "qadena.qadena.StableWallet.walletAmount":
		if x.WalletAmount == nil {
			x.WalletAmount = []*StringWalletAmount{}
		}
		value := &_StableWallet_4_list{list: &x.WalletAmount}
		return protoreflect.ValueOfList(value)
	case "qadena.qadena.StableWallet.createWalletVShareBind":
		if x.CreateWalletVShareBind == nil {
			x.CreateWalletVShareBind = new(VShareBindData)
		}
		return protoreflect.ValueOfMessage(x.CreateWalletVShareBind.ProtoReflect())
	case "qadena.qadena.StableWallet.ephemeralWalletAmountCount":
		if x.EphemeralWalletAmountCount == nil {
			x.EphemeralWalletAmountCount = []*StringInt32{}
		}
		value := &_StableWallet_8_list{list: &x.EphemeralWalletAmountCount}
		return protoreflect.ValueOfList(value)
	case "qadena.qadena.StableWallet.queuedWalletAmount":
		if x.QueuedWalletAmount == nil {
			x.QueuedWalletAmount = []*StringListWalletAmount{}
		}
		value := &_StableWallet_9_list{list: &x.QueuedWalletAmount}
		return protoreflect.ValueOfList(value)
	case "qadena.qadena.StableWallet.acceptPasswordPedersenCommit":
		if x.AcceptPasswordPedersenCommit == nil {
			x.AcceptPasswordPedersenCommit = new(BPedersenCommit)
		}
		return protoreflect.ValueOfMessage(x.AcceptPasswordPedersenCommit.ProtoReflect())
	case "qadena.qadena.StableWallet.acceptValidatedCredentialsVShareBind":
		if x.AcceptValidatedCredentialsVShareBind == nil {
			x.AcceptValidatedCredentialsVShareBind = new(VShareBindData)
		}
		return protoreflect.ValueOfMessage(x.AcceptValidatedCredentialsVShareBind.ProtoReflect())
	case "qadena.qadena.StableWallet.recoverShares":
		if x.RecoverShares == nil {
			x.RecoverShares = []*RecoverShare{}
		}
		value := &_StableWallet_14_list{list: &x.RecoverShares}
		return protoreflect.ValueOfList(value)
	case "qadena.qadena.StableWallet.walletID":
		panic(fmt.Errorf("field walletID of message qadena.qadena.StableWallet is not mutable"))
	case "qadena.qadena.StableWallet.homePioneerID":
		panic(fmt.Errorf("field homePioneerID of message qadena.qadena.StableWallet is not mutable"))
	case "qadena.qadena.StableWallet.credentialID":
		panic(fmt.Errorf("field credentialID of message qadena.qadena.StableWallet is not mutable"))
	case "qadena.qadena.StableWallet.encCreateWalletVShare":
		panic(fmt.Errorf("field encCreateWalletVShare of message qadena.qadena.StableWallet is not mutable"))
	case "qadena.qadena.StableWallet.encAcceptValidatedCredentialsVShare":
		panic(fmt.Errorf("field encAcceptValidatedCredentialsVShare of message qadena.qadena.StableWallet is not mutable"))
	case "qadena.qadena.StableWallet.senderOptions":
		panic(fmt.Errorf("field senderOptions of message qadena.qadena.StableWallet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StableWallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.StableWallet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StableWallet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "qadena.qadena.StableWallet.walletID":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.StableWallet.homePioneerID":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.StableWallet.serviceProviderID":
		list := []string{}
		return protoreflect.ValueOfList(&_StableWallet_3_list{list: &list})
	case "qadena.qadena.StableWallet.walletAmount":
		list := []*StringWalletAmount{}
		return protoreflect.ValueOfList(&_StableWallet_4_list{list: &list})
	case "qadena.qadena.StableWallet.credentialID":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.StableWallet.encCreateWalletVShare":
		return protoreflect.ValueOfBytes(nil)
	case "qadena.qadena.StableWallet.createWalletVShareBind":
		m := new(VShareBindData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.qadena.StableWallet.ephemeralWalletAmountCount":
		list := []*StringInt32{}
		return protoreflect.ValueOfList(&_StableWallet_8_list{list: &list})
	case "qadena.qadena.StableWallet.queuedWalletAmount":
		list := []*StringListWalletAmount{}
		return protoreflect.ValueOfList(&_StableWallet_9_list{list: &list})
	case "qadena.qadena.StableWallet.acceptPasswordPedersenCommit":
		m := new(BPedersenCommit)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.qadena.StableWallet.encAcceptValidatedCredentialsVShare":
		return protoreflect.ValueOfBytes(nil)
	case "qadena.qadena.StableWallet.acceptValidatedCredentialsVShareBind":
		m := new(VShareBindData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "qadena.qadena.StableWallet.senderOptions":
		return protoreflect.ValueOfString("")
	case "qadena.qadena.StableWallet.recoverShares":
		list := []*RecoverShare{}
		return protoreflect.ValueOfList(&_StableWallet_14_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: qadena.qadena.StableWallet"))
		}
		panic(fmt.Errorf("message qadena.qadena.StableWallet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StableWallet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in qadena.qadena.StableWallet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StableWallet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StableWallet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StableWallet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StableWallet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StableWallet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.WalletID)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.HomePioneerID)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ServiceProviderID) > 0 {
			for _, s := range x.ServiceProviderID {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.WalletAmount) > 0 {
			for _, e := range x.WalletAmount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.CredentialID)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EncCreateWalletVShare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreateWalletVShareBind != nil {
			l = options.Size(x.CreateWalletVShareBind)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.EphemeralWalletAmountCount) > 0 {
			for _, e := range x.EphemeralWalletAmountCount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.QueuedWalletAmount) > 0 {
			for _, e := range x.QueuedWalletAmount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.AcceptPasswordPedersenCommit != nil {
			l = options.Size(x.AcceptPasswordPedersenCommit)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EncAcceptValidatedCredentialsVShare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AcceptValidatedCredentialsVShareBind != nil {
			l = options.Size(x.AcceptValidatedCredentialsVShareBind)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SenderOptions)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RecoverShares) > 0 {
			for _, e := range x.RecoverShares {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StableWallet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RecoverShares) > 0 {
			for iNdEx := len(x.RecoverShares) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RecoverShares[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x72
			}
		}
		if len(x.SenderOptions) > 0 {
			i -= len(x.SenderOptions)
			copy(dAtA[i:], x.SenderOptions)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SenderOptions)))
			i--
			dAtA[i] = 0x6a
		}
		if x.AcceptValidatedCredentialsVShareBind != nil {
			encoded, err := options.Marshal(x.AcceptValidatedCredentialsVShareBind)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.EncAcceptValidatedCredentialsVShare) > 0 {
			i -= len(x.EncAcceptValidatedCredentialsVShare)
			copy(dAtA[i:], x.EncAcceptValidatedCredentialsVShare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EncAcceptValidatedCredentialsVShare)))
			i--
			dAtA[i] = 0x5a
		}
		if x.AcceptPasswordPedersenCommit != nil {
			encoded, err := options.Marshal(x.AcceptPasswordPedersenCommit)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.QueuedWalletAmount) > 0 {
			for iNdEx := len(x.QueuedWalletAmount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.QueuedWalletAmount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.EphemeralWalletAmountCount) > 0 {
			for iNdEx := len(x.EphemeralWalletAmountCount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.EphemeralWalletAmountCount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if x.CreateWalletVShareBind != nil {
			encoded, err := options.Marshal(x.CreateWalletVShareBind)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.EncCreateWalletVShare) > 0 {
			i -= len(x.EncCreateWalletVShare)
			copy(dAtA[i:], x.EncCreateWalletVShare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EncCreateWalletVShare)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.CredentialID) > 0 {
			i -= len(x.CredentialID)
			copy(dAtA[i:], x.CredentialID)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CredentialID)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.WalletAmount) > 0 {
			for iNdEx := len(x.WalletAmount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.WalletAmount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.ServiceProviderID) > 0 {
			for iNdEx := len(x.ServiceProviderID) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ServiceProviderID[iNdEx])
				copy(dAtA[i:], x.ServiceProviderID[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ServiceProviderID[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.HomePioneerID) > 0 {
			i -= len(x.HomePioneerID)
			copy(dAtA[i:], x.HomePioneerID)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HomePioneerID)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.WalletID) > 0 {
			i -= len(x.WalletID)
			copy(dAtA[i:], x.WalletID)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WalletID)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StableWallet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StableWallet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StableWallet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WalletID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HomePioneerID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HomePioneerID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ServiceProviderID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ServiceProviderID = append(x.ServiceProviderID, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WalletAmount = append(x.WalletAmount, &StringWalletAmount{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.WalletAmount[len(x.WalletAmount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CredentialID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CredentialID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncCreateWalletVShare", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncCreateWalletVShare = append(x.EncCreateWalletVShare[:0], dAtA[iNdEx:postIndex]...)
				if x.EncCreateWalletVShare == nil {
					x.EncCreateWalletVShare = []byte{}
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateWalletVShareBind", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CreateWalletVShareBind == nil {
					x.CreateWalletVShareBind = &VShareBindData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CreateWalletVShareBind); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EphemeralWalletAmountCount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EphemeralWalletAmountCount = append(x.EphemeralWalletAmountCount, &StringInt32{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EphemeralWalletAmountCount[len(x.EphemeralWalletAmountCount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QueuedWalletAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.QueuedWalletAmount = append(x.QueuedWalletAmount, &StringListWalletAmount{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.QueuedWalletAmount[len(x.QueuedWalletAmount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AcceptPasswordPedersenCommit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AcceptPasswordPedersenCommit == nil {
					x.AcceptPasswordPedersenCommit = &BPedersenCommit{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AcceptPasswordPedersenCommit); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncAcceptValidatedCredentialsVShare", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncAcceptValidatedCredentialsVShare = append(x.EncAcceptValidatedCredentialsVShare[:0], dAtA[iNdEx:postIndex]...)
				if x.EncAcceptValidatedCredentialsVShare == nil {
					x.EncAcceptValidatedCredentialsVShare = []byte{}
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AcceptValidatedCredentialsVShareBind", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AcceptValidatedCredentialsVShareBind == nil {
					x.AcceptValidatedCredentialsVShareBind = &VShareBindData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AcceptValidatedCredentialsVShareBind); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SenderOptions", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SenderOptions = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecoverShares", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RecoverShares = append(x.RecoverShares, &RecoverShare{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RecoverShares[len(x.RecoverShares)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: qadena/qadena/wallet.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WalletAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAmountPedersenCommit *BPedersenCommit   `protobuf:"bytes,1,opt,name=walletAmountPedersenCommit,proto3" json:"walletAmountPedersenCommit,omitempty"`
	EncWalletAmountVShare      []byte             `protobuf:"bytes,2,opt,name=encWalletAmountVShare,proto3" json:"encWalletAmountVShare,omitempty"` // formerly encWalletAmountUserCredentialPubK
	WalletAmountVShareBind     *VShareBindData    `protobuf:"bytes,3,opt,name=walletAmountVShareBind,proto3" json:"walletAmountVShareBind,omitempty"`
	RequiredSenderCheckPC      []*BPedersenCommit `protobuf:"bytes,4,rep,name=RequiredSenderCheckPC,proto3" json:"RequiredSenderCheckPC,omitempty"`
}

func (x *WalletAmount) Reset() {
	*x = WalletAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qadena_qadena_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletAmount) ProtoMessage() {}

// Deprecated: Use WalletAmount.ProtoReflect.Descriptor instead.
func (*WalletAmount) Descriptor() ([]byte, []int) {
	return file_qadena_qadena_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *WalletAmount) GetWalletAmountPedersenCommit() *BPedersenCommit {
	if x != nil {
		return x.WalletAmountPedersenCommit
	}
	return nil
}

func (x *WalletAmount) GetEncWalletAmountVShare() []byte {
	if x != nil {
		return x.EncWalletAmountVShare
	}
	return nil
}

func (x *WalletAmount) GetWalletAmountVShareBind() *VShareBindData {
	if x != nil {
		return x.WalletAmountVShareBind
	}
	return nil
}

func (x *WalletAmount) GetRequiredSenderCheckPC() []*BPedersenCommit {
	if x != nil {
		return x.RequiredSenderCheckPC
	}
	return nil
}

type ListWalletAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAmounts []*WalletAmount `protobuf:"bytes,1,rep,name=walletAmounts,proto3" json:"walletAmounts,omitempty"`
}

func (x *ListWalletAmount) Reset() {
	*x = ListWalletAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qadena_qadena_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletAmount) ProtoMessage() {}

// Deprecated: Use ListWalletAmount.ProtoReflect.Descriptor instead.
func (*ListWalletAmount) Descriptor() ([]byte, []int) {
	return file_qadena_qadena_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *ListWalletAmount) GetWalletAmounts() []*WalletAmount {
	if x != nil {
		return x.WalletAmounts
	}
	return nil
}

// WARNING:  ANY CHANGES TO WALLET MUST BE DONE TO STABLEWALLET, and c.SetStableWallet must be updated
// THE ONLY DIFFERENCE IS THAT MAPS ARE CHANGED TO REPEATED
// IF YOU ADD ANYTHING HERE, YOU MUST MAKE SURE TO MODIFY common.SetStableWallet
type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletID                             string                       `protobuf:"bytes,1,opt,name=walletID,proto3" json:"walletID,omitempty"`
	HomePioneerID                        string                       `protobuf:"bytes,2,opt,name=homePioneerID,proto3" json:"homePioneerID,omitempty"`
	ServiceProviderID                    []string                     `protobuf:"bytes,3,rep,name=serviceProviderID,proto3" json:"serviceProviderID,omitempty"`
	WalletAmount                         map[string]*WalletAmount     `protobuf:"bytes,4,rep,name=walletAmount,proto3" json:"walletAmount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CredentialID                         string                       `protobuf:"bytes,5,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
	EncCreateWalletVShare                []byte                       `protobuf:"bytes,6,opt,name=encCreateWalletVShare,proto3" json:"encCreateWalletVShare,omitempty"`   //
	CreateWalletVShareBind               *VShareBindData              `protobuf:"bytes,7,opt,name=createWalletVShareBind,proto3" json:"createWalletVShareBind,omitempty"` // formerly vShareBind
	EphemeralWalletAmountCount           map[string]int32             `protobuf:"bytes,8,rep,name=ephemeralWalletAmountCount,proto3" json:"ephemeralWalletAmountCount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	QueuedWalletAmount                   map[string]*ListWalletAmount `protobuf:"bytes,9,rep,name=queuedWalletAmount,proto3" json:"queuedWalletAmount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AcceptPasswordPedersenCommit         *BPedersenCommit             `protobuf:"bytes,10,opt,name=acceptPasswordPedersenCommit,proto3" json:"acceptPasswordPedersenCommit,omitempty"`
	EncAcceptValidatedCredentialsVShare  []byte                       `protobuf:"bytes,11,opt,name=encAcceptValidatedCredentialsVShare,proto3" json:"encAcceptValidatedCredentialsVShare,omitempty"`
	AcceptValidatedCredentialsVShareBind *VShareBindData              `protobuf:"bytes,12,opt,name=acceptValidatedCredentialsVShareBind,proto3" json:"acceptValidatedCredentialsVShareBind,omitempty"`
	SenderOptions                        string                       `protobuf:"bytes,13,opt,name=senderOptions,proto3" json:"senderOptions,omitempty"`
	RecoverShares                        []*RecoverShare              `protobuf:"bytes,14,rep,name=recoverShares,proto3" json:"recoverShares,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qadena_qadena_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_qadena_qadena_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *Wallet) GetWalletID() string {
	if x != nil {
		return x.WalletID
	}
	return ""
}

func (x *Wallet) GetHomePioneerID() string {
	if x != nil {
		return x.HomePioneerID
	}
	return ""
}

func (x *Wallet) GetServiceProviderID() []string {
	if x != nil {
		return x.ServiceProviderID
	}
	return nil
}

func (x *Wallet) GetWalletAmount() map[string]*WalletAmount {
	if x != nil {
		return x.WalletAmount
	}
	return nil
}

func (x *Wallet) GetCredentialID() string {
	if x != nil {
		return x.CredentialID
	}
	return ""
}

func (x *Wallet) GetEncCreateWalletVShare() []byte {
	if x != nil {
		return x.EncCreateWalletVShare
	}
	return nil
}

func (x *Wallet) GetCreateWalletVShareBind() *VShareBindData {
	if x != nil {
		return x.CreateWalletVShareBind
	}
	return nil
}

func (x *Wallet) GetEphemeralWalletAmountCount() map[string]int32 {
	if x != nil {
		return x.EphemeralWalletAmountCount
	}
	return nil
}

func (x *Wallet) GetQueuedWalletAmount() map[string]*ListWalletAmount {
	if x != nil {
		return x.QueuedWalletAmount
	}
	return nil
}

func (x *Wallet) GetAcceptPasswordPedersenCommit() *BPedersenCommit {
	if x != nil {
		return x.AcceptPasswordPedersenCommit
	}
	return nil
}

func (x *Wallet) GetEncAcceptValidatedCredentialsVShare() []byte {
	if x != nil {
		return x.EncAcceptValidatedCredentialsVShare
	}
	return nil
}

func (x *Wallet) GetAcceptValidatedCredentialsVShareBind() *VShareBindData {
	if x != nil {
		return x.AcceptValidatedCredentialsVShareBind
	}
	return nil
}

func (x *Wallet) GetSenderOptions() string {
	if x != nil {
		return x.SenderOptions
	}
	return ""
}

func (x *Wallet) GetRecoverShares() []*RecoverShare {
	if x != nil {
		return x.RecoverShares
	}
	return nil
}

type StringWalletAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Val  *WalletAmount `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *StringWalletAmount) Reset() {
	*x = StringWalletAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qadena_qadena_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringWalletAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringWalletAmount) ProtoMessage() {}

// Deprecated: Use StringWalletAmount.ProtoReflect.Descriptor instead.
func (*StringWalletAmount) Descriptor() ([]byte, []int) {
	return file_qadena_qadena_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *StringWalletAmount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StringWalletAmount) GetVal() *WalletAmount {
	if x != nil {
		return x.Val
	}
	return nil
}

type StringInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Val  int32  `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *StringInt32) Reset() {
	*x = StringInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qadena_qadena_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringInt32) ProtoMessage() {}

// Deprecated: Use StringInt32.ProtoReflect.Descriptor instead.
func (*StringInt32) Descriptor() ([]byte, []int) {
	return file_qadena_qadena_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *StringInt32) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StringInt32) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type StringListWalletAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Val  *ListWalletAmount `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *StringListWalletAmount) Reset() {
	*x = StringListWalletAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qadena_qadena_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringListWalletAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringListWalletAmount) ProtoMessage() {}

// Deprecated: Use StringListWalletAmount.ProtoReflect.Descriptor instead.
func (*StringListWalletAmount) Descriptor() ([]byte, []int) {
	return file_qadena_qadena_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *StringListWalletAmount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StringListWalletAmount) GetVal() *ListWalletAmount {
	if x != nil {
		return x.Val
	}
	return nil
}

type StableWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletID                             string                    `protobuf:"bytes,1,opt,name=walletID,proto3" json:"walletID,omitempty"`
	HomePioneerID                        string                    `protobuf:"bytes,2,opt,name=homePioneerID,proto3" json:"homePioneerID,omitempty"`
	ServiceProviderID                    []string                  `protobuf:"bytes,3,rep,name=serviceProviderID,proto3" json:"serviceProviderID,omitempty"`
	WalletAmount                         []*StringWalletAmount     `protobuf:"bytes,4,rep,name=walletAmount,proto3" json:"walletAmount,omitempty"`
	CredentialID                         string                    `protobuf:"bytes,5,opt,name=credentialID,proto3" json:"credentialID,omitempty"`
	EncCreateWalletVShare                []byte                    `protobuf:"bytes,6,opt,name=encCreateWalletVShare,proto3" json:"encCreateWalletVShare,omitempty"`
	CreateWalletVShareBind               *VShareBindData           `protobuf:"bytes,7,opt,name=createWalletVShareBind,proto3" json:"createWalletVShareBind,omitempty"`
	EphemeralWalletAmountCount           []*StringInt32            `protobuf:"bytes,8,rep,name=ephemeralWalletAmountCount,proto3" json:"ephemeralWalletAmountCount,omitempty"`
	QueuedWalletAmount                   []*StringListWalletAmount `protobuf:"bytes,9,rep,name=queuedWalletAmount,proto3" json:"queuedWalletAmount,omitempty"`
	AcceptPasswordPedersenCommit         *BPedersenCommit          `protobuf:"bytes,10,opt,name=acceptPasswordPedersenCommit,proto3" json:"acceptPasswordPedersenCommit,omitempty"`
	EncAcceptValidatedCredentialsVShare  []byte                    `protobuf:"bytes,11,opt,name=encAcceptValidatedCredentialsVShare,proto3" json:"encAcceptValidatedCredentialsVShare,omitempty"`
	AcceptValidatedCredentialsVShareBind *VShareBindData           `protobuf:"bytes,12,opt,name=acceptValidatedCredentialsVShareBind,proto3" json:"acceptValidatedCredentialsVShareBind,omitempty"`
	SenderOptions                        string                    `protobuf:"bytes,13,opt,name=senderOptions,proto3" json:"senderOptions,omitempty"`
	RecoverShares                        []*RecoverShare           `protobuf:"bytes,14,rep,name=recoverShares,proto3" json:"recoverShares,omitempty"`
}

func (x *StableWallet) Reset() {
	*x = StableWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qadena_qadena_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableWallet) ProtoMessage() {}

// Deprecated: Use StableWallet.ProtoReflect.Descriptor instead.
func (*StableWallet) Descriptor() ([]byte, []int) {
	return file_qadena_qadena_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *StableWallet) GetWalletID() string {
	if x != nil {
		return x.WalletID
	}
	return ""
}

func (x *StableWallet) GetHomePioneerID() string {
	if x != nil {
		return x.HomePioneerID
	}
	return ""
}

func (x *StableWallet) GetServiceProviderID() []string {
	if x != nil {
		return x.ServiceProviderID
	}
	return nil
}

func (x *StableWallet) GetWalletAmount() []*StringWalletAmount {
	if x != nil {
		return x.WalletAmount
	}
	return nil
}

func (x *StableWallet) GetCredentialID() string {
	if x != nil {
		return x.CredentialID
	}
	return ""
}

func (x *StableWallet) GetEncCreateWalletVShare() []byte {
	if x != nil {
		return x.EncCreateWalletVShare
	}
	return nil
}

func (x *StableWallet) GetCreateWalletVShareBind() *VShareBindData {
	if x != nil {
		return x.CreateWalletVShareBind
	}
	return nil
}

func (x *StableWallet) GetEphemeralWalletAmountCount() []*StringInt32 {
	if x != nil {
		return x.EphemeralWalletAmountCount
	}
	return nil
}

func (x *StableWallet) GetQueuedWalletAmount() []*StringListWalletAmount {
	if x != nil {
		return x.QueuedWalletAmount
	}
	return nil
}

func (x *StableWallet) GetAcceptPasswordPedersenCommit() *BPedersenCommit {
	if x != nil {
		return x.AcceptPasswordPedersenCommit
	}
	return nil
}

func (x *StableWallet) GetEncAcceptValidatedCredentialsVShare() []byte {
	if x != nil {
		return x.EncAcceptValidatedCredentialsVShare
	}
	return nil
}

func (x *StableWallet) GetAcceptValidatedCredentialsVShareBind() *VShareBindData {
	if x != nil {
		return x.AcceptValidatedCredentialsVShareBind
	}
	return nil
}

func (x *StableWallet) GetSenderOptions() string {
	if x != nil {
		return x.SenderOptions
	}
	return ""
}

func (x *StableWallet) GetRecoverShares() []*RecoverShare {
	if x != nil {
		return x.RecoverShares
	}
	return nil
}

var File_qadena_qadena_wallet_proto protoreflect.FileDescriptor

var file_qadena_qadena_wallet_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x71, 0x61,
	0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x1a, 0x23, 0x71, 0x61, 0x64,
	0x65, 0x6e, 0x61, 0x2f, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f, 0x70, 0x65, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x25, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f,
	0x62, 0x5f, 0x70, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f,
	0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x71, 0x61, 0x64, 0x65,
	0x6e, 0x61, 0x2f, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x71, 0x61, 0x64, 0x65, 0x6e,
	0x61, 0x2f, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f, 0x76, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd1, 0x02, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71,
	0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x42, 0x50, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x1a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x15, 0x65, 0x6e, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61,
	0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x54,
	0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x43, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x42, 0x50,
	0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x15, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x43, 0x22, 0x55, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xf3, 0x09, 0x0a, 0x06,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x69, 0x6f, 0x6e, 0x65, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x50,
	0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x71,
	0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x55, 0x0a,
	0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x56, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x42, 0x69, 0x6e, 0x64, 0x12, 0x75, 0x0a, 0x1a, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e,
	0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x1a, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x12, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61,
	0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x1c, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61,
	0x2e, 0x42, 0x50, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x50, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x50,
	0x0a, 0x23, 0x65, 0x6e, 0x63, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x56,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x23, 0x65, 0x6e, 0x63,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x71, 0x0a, 0x24, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x56, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x56,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x24, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x11,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65,
	0x6e, 0x61, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f, 0x45, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x66, 0x0a, 0x17, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71,
	0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x57, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x76,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e,
	0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x33, 0x0a, 0x0b, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22,
	0x5f, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x71, 0x61, 0x64,
	0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x03, 0x76, 0x61, 0x6c,
	0x22, 0xbb, 0x07, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x69, 0x6f, 0x6e, 0x65, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x45, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61,
	0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15,
	0x65, 0x6e, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65,
	0x6e, 0x61, 0x2e, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x1a, 0x65, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x1a, 0x65, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e,
	0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x1c,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x65,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65,
	0x6e, 0x61, 0x2e, 0x42, 0x50, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x50, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x50, 0x0a, 0x23, 0x65, 0x6e, 0x63, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x23, 0x65,
	0x6e, 0x63, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x56, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x71, 0x0a, 0x24, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61,
	0x2e, 0x56, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x24, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x56, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61, 0x64, 0x65,
	0x6e, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x42, 0x95,
	0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2e, 0x71, 0x61,
	0x64, 0x65, 0x6e, 0x61, 0x42, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x2f, 0x71, 0x61, 0x64,
	0x65, 0x6e, 0x61, 0xa2, 0x02, 0x03, 0x51, 0x51, 0x58, 0xaa, 0x02, 0x0d, 0x51, 0x61, 0x64, 0x65,
	0x6e, 0x61, 0x2e, 0x51, 0x61, 0x64, 0x65, 0x6e, 0x61, 0xca, 0x02, 0x0d, 0x51, 0x61, 0x64, 0x65,
	0x6e, 0x61, 0x5c, 0x51, 0x61, 0x64, 0x65, 0x6e, 0x61, 0xe2, 0x02, 0x19, 0x51, 0x61, 0x64, 0x65,
	0x6e, 0x61, 0x5c, 0x51, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x51, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x3a, 0x3a,
	0x51, 0x61, 0x64, 0x65, 0x6e, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_qadena_qadena_wallet_proto_rawDescOnce sync.Once
	file_qadena_qadena_wallet_proto_rawDescData = file_qadena_qadena_wallet_proto_rawDesc
)

func file_qadena_qadena_wallet_proto_rawDescGZIP() []byte {
	file_qadena_qadena_wallet_proto_rawDescOnce.Do(func() {
		file_qadena_qadena_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_qadena_qadena_wallet_proto_rawDescData)
	})
	return file_qadena_qadena_wallet_proto_rawDescData
}

var file_qadena_qadena_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_qadena_qadena_wallet_proto_goTypes = []interface{}{
	(*WalletAmount)(nil),           // 0: qadena.qadena.WalletAmount
	(*ListWalletAmount)(nil),       // 1: qadena.qadena.ListWalletAmount
	(*Wallet)(nil),                 // 2: qadena.qadena.Wallet
	(*StringWalletAmount)(nil),     // 3: qadena.qadena.StringWalletAmount
	(*StringInt32)(nil),            // 4: qadena.qadena.StringInt32
	(*StringListWalletAmount)(nil), // 5: qadena.qadena.StringListWalletAmount
	(*StableWallet)(nil),           // 6: qadena.qadena.StableWallet
	nil,                            // 7: qadena.qadena.Wallet.WalletAmountEntry
	nil,                            // 8: qadena.qadena.Wallet.EphemeralWalletAmountCountEntry
	nil,                            // 9: qadena.qadena.Wallet.QueuedWalletAmountEntry
	(*BPedersenCommit)(nil),        // 10: qadena.qadena.BPedersenCommit
	(*VShareBindData)(nil),         // 11: qadena.qadena.VShareBindData
	(*RecoverShare)(nil),           // 12: qadena.qadena.RecoverShare
}
var file_qadena_qadena_wallet_proto_depIdxs = []int32{
	10, // 0: qadena.qadena.WalletAmount.walletAmountPedersenCommit:type_name -> qadena.qadena.BPedersenCommit
	11, // 1: qadena.qadena.WalletAmount.walletAmountVShareBind:type_name -> qadena.qadena.VShareBindData
	10, // 2: qadena.qadena.WalletAmount.RequiredSenderCheckPC:type_name -> qadena.qadena.BPedersenCommit
	0,  // 3: qadena.qadena.ListWalletAmount.walletAmounts:type_name -> qadena.qadena.WalletAmount
	7,  // 4: qadena.qadena.Wallet.walletAmount:type_name -> qadena.qadena.Wallet.WalletAmountEntry
	11, // 5: qadena.qadena.Wallet.createWalletVShareBind:type_name -> qadena.qadena.VShareBindData
	8,  // 6: qadena.qadena.Wallet.ephemeralWalletAmountCount:type_name -> qadena.qadena.Wallet.EphemeralWalletAmountCountEntry
	9,  // 7: qadena.qadena.Wallet.queuedWalletAmount:type_name -> qadena.qadena.Wallet.QueuedWalletAmountEntry
	10, // 8: qadena.qadena.Wallet.acceptPasswordPedersenCommit:type_name -> qadena.qadena.BPedersenCommit
	11, // 9: qadena.qadena.Wallet.acceptValidatedCredentialsVShareBind:type_name -> qadena.qadena.VShareBindData
	12, // 10: qadena.qadena.Wallet.recoverShares:type_name -> qadena.qadena.RecoverShare
	0,  // 11: qadena.qadena.StringWalletAmount.val:type_name -> qadena.qadena.WalletAmount
	1,  // 12: qadena.qadena.StringListWalletAmount.val:type_name -> qadena.qadena.ListWalletAmount
	3,  // 13: qadena.qadena.StableWallet.walletAmount:type_name -> qadena.qadena.StringWalletAmount
	11, // 14: qadena.qadena.StableWallet.createWalletVShareBind:type_name -> qadena.qadena.VShareBindData
	4,  // 15: qadena.qadena.StableWallet.ephemeralWalletAmountCount:type_name -> qadena.qadena.StringInt32
	5,  // 16: qadena.qadena.StableWallet.queuedWalletAmount:type_name -> qadena.qadena.StringListWalletAmount
	10, // 17: qadena.qadena.StableWallet.acceptPasswordPedersenCommit:type_name -> qadena.qadena.BPedersenCommit
	11, // 18: qadena.qadena.StableWallet.acceptValidatedCredentialsVShareBind:type_name -> qadena.qadena.VShareBindData
	12, // 19: qadena.qadena.StableWallet.recoverShares:type_name -> qadena.qadena.RecoverShare
	0,  // 20: qadena.qadena.Wallet.WalletAmountEntry.value:type_name -> qadena.qadena.WalletAmount
	1,  // 21: qadena.qadena.Wallet.QueuedWalletAmountEntry.value:type_name -> qadena.qadena.ListWalletAmount
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_qadena_qadena_wallet_proto_init() }
func file_qadena_qadena_wallet_proto_init() {
	if File_qadena_qadena_wallet_proto != nil {
		return
	}
	file_qadena_qadena_pedersen_commit_proto_init()
	file_qadena_qadena_b_pedersen_commit_proto_init()
	file_qadena_qadena_recover_share_proto_init()
	file_qadena_qadena_bind_data_proto_init()
	file_qadena_qadena_v_share_bind_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_qadena_qadena_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qadena_qadena_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qadena_qadena_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qadena_qadena_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringWalletAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qadena_qadena_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qadena_qadena_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringListWalletAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qadena_qadena_wallet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StableWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_qadena_qadena_wallet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qadena_qadena_wallet_proto_goTypes,
		DependencyIndexes: file_qadena_qadena_wallet_proto_depIdxs,
		MessageInfos:      file_qadena_qadena_wallet_proto_msgTypes,
	}.Build()
	File_qadena_qadena_wallet_proto = out.File
	file_qadena_qadena_wallet_proto_rawDesc = nil
	file_qadena_qadena_wallet_proto_goTypes = nil
	file_qadena_qadena_wallet_proto_depIdxs = nil
}
