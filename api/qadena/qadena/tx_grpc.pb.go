// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: qadena/qadena/tx.proto

package qadena

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                          = "/qadena.qadena.Msg/UpdateParams"
	Msg_AddPublicKey_FullMethodName                          = "/qadena.qadena.Msg/AddPublicKey"
	Msg_CreateWallet_FullMethodName                          = "/qadena.qadena.Msg/CreateWallet"
	Msg_TransferFunds_FullMethodName                         = "/qadena.qadena.Msg/TransferFunds"
	Msg_ReceiveFunds_FullMethodName                          = "/qadena.qadena.Msg/ReceiveFunds"
	Msg_ProtectPrivateKey_FullMethodName                     = "/qadena.qadena.Msg/ProtectPrivateKey"
	Msg_SignRecoverPrivateKey_FullMethodName                 = "/qadena.qadena.Msg/SignRecoverPrivateKey"
	Msg_ClaimCredential_FullMethodName                       = "/qadena.qadena.Msg/ClaimCredential"
	Msg_AddServiceProvider_FullMethodName                    = "/qadena.qadena.Msg/AddServiceProvider"
	Msg_DeactivateServiceProvider_FullMethodName             = "/qadena.qadena.Msg/DeactivateServiceProvider"
	Msg_UpdateEnclaveIdentity_FullMethodName                 = "/qadena.qadena.Msg/UpdateEnclaveIdentity"
	Msg_PioneerAddPublicKey_FullMethodName                   = "/qadena.qadena.Msg/PioneerAddPublicKey"
	Msg_PioneerUpdateIntervalPublicKeyID_FullMethodName      = "/qadena.qadena.Msg/PioneerUpdateIntervalPublicKeyID"
	Msg_PioneerEnclaveExchange_FullMethodName                = "/qadena.qadena.Msg/PioneerEnclaveExchange"
	Msg_PioneerBroadcastSecretSharePrivateKey_FullMethodName = "/qadena.qadena.Msg/PioneerBroadcastSecretSharePrivateKey"
	Msg_PioneerUpdatePioneerJar_FullMethodName               = "/qadena.qadena.Msg/PioneerUpdatePioneerJar"
	Msg_PioneerUpdateJarRegulator_FullMethodName             = "/qadena.qadena.Msg/PioneerUpdateJarRegulator"
	Msg_PioneerUpdateEnclaveIdentity_FullMethodName          = "/qadena.qadena.Msg/PioneerUpdateEnclaveIdentity"
	Msg_CreateCredential_FullMethodName                      = "/qadena.qadena.Msg/CreateCredential"
	Msg_RemoveCredential_FullMethodName                      = "/qadena.qadena.Msg/RemoveCredential"
	Msg_CreateBulkCredentials_FullMethodName                 = "/qadena.qadena.Msg/CreateBulkCredentials"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// AUTHORIZATION:
	AddPublicKey(ctx context.Context, in *MsgAddPublicKey, opts ...grpc.CallOption) (*MsgAddPublicKeyResponse, error)
	// AUTHORIZATION:
	CreateWallet(ctx context.Context, in *MsgCreateWallet, opts ...grpc.CallOption) (*MsgCreateWalletResponse, error)
	TransferFunds(ctx context.Context, in *MsgTransferFunds, opts ...grpc.CallOption) (*MsgTransferFundsResponse, error)
	ReceiveFunds(ctx context.Context, in *MsgReceiveFunds, opts ...grpc.CallOption) (*MsgReceiveFundsResponse, error)
	ProtectPrivateKey(ctx context.Context, in *MsgProtectPrivateKey, opts ...grpc.CallOption) (*MsgProtectPrivateKeyResponse, error)
	SignRecoverPrivateKey(ctx context.Context, in *MsgSignRecoverPrivateKey, opts ...grpc.CallOption) (*MsgSignRecoverPrivateKeyResponse, error)
	ClaimCredential(ctx context.Context, in *MsgClaimCredential, opts ...grpc.CallOption) (*MsgClaimCredentialResponse, error)
	// AUTHORIZATION: gov module
	AddServiceProvider(ctx context.Context, in *MsgAddServiceProvider, opts ...grpc.CallOption) (*MsgAddServiceProviderResponse, error)
	DeactivateServiceProvider(ctx context.Context, in *MsgDeactivateServiceProvider, opts ...grpc.CallOption) (*MsgDeactivateServiceProviderResponse, error)
	UpdateEnclaveIdentity(ctx context.Context, in *MsgUpdateEnclaveIdentity, opts ...grpc.CallOption) (*MsgUpdateEnclaveIdentityResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *IS* a Pioneer via enclave
	PioneerAddPublicKey(ctx context.Context, in *MsgPioneerAddPublicKey, opts ...grpc.CallOption) (*MsgPioneerAddPublicKeyResponse, error)
	PioneerUpdateIntervalPublicKeyID(ctx context.Context, in *MsgPioneerUpdateIntervalPublicKeyID, opts ...grpc.CallOption) (*MsgPioneerUpdateIntervalPublicKeyIDResponse, error)
	PioneerEnclaveExchange(ctx context.Context, in *MsgPioneerEnclaveExchange, opts ...grpc.CallOption) (*MsgPioneerEnclaveExchangeResponse, error)
	PioneerBroadcastSecretSharePrivateKey(ctx context.Context, in *MsgPioneerBroadcastSecretSharePrivateKey, opts ...grpc.CallOption) (*MsgPioneerBroadcastSecretSharePrivateKeyResponse, error)
	// rpc PioneerUpdateIntervalPublicKeyID             (MsgPioneerUpdateIntervalPublicKeyID            ) returns (MsgPioneerUpdateIntervalPublicKeyIDResponse            );
	PioneerUpdatePioneerJar(ctx context.Context, in *MsgPioneerUpdatePioneerJar, opts ...grpc.CallOption) (*MsgPioneerUpdatePioneerJarResponse, error)
	PioneerUpdateJarRegulator(ctx context.Context, in *MsgPioneerUpdateJarRegulator, opts ...grpc.CallOption) (*MsgPioneerUpdateJarRegulatorResponse, error)
	PioneerUpdateEnclaveIdentity(ctx context.Context, in *MsgPioneerUpdateEnclaveIdentity, opts ...grpc.CallOption) (*MsgPioneerUpdateEnclaveIdentityResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *IS* an identity service provider
	// make sure that all the required signatory vshares ccPubK has ss interval public key
	CreateCredential(ctx context.Context, in *MsgCreateCredential, opts ...grpc.CallOption) (*MsgCreateCredentialResponse, error)
	RemoveCredential(ctx context.Context, in *MsgRemoveCredential, opts ...grpc.CallOption) (*MsgRemoveCredentialResponse, error)
	CreateBulkCredentials(ctx context.Context, in *MsgCreateBulkCredentials, opts ...grpc.CallOption) (*MsgCreateBulkCredentialsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddPublicKey(ctx context.Context, in *MsgAddPublicKey, opts ...grpc.CallOption) (*MsgAddPublicKeyResponse, error) {
	out := new(MsgAddPublicKeyResponse)
	err := c.cc.Invoke(ctx, Msg_AddPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateWallet(ctx context.Context, in *MsgCreateWallet, opts ...grpc.CallOption) (*MsgCreateWalletResponse, error) {
	out := new(MsgCreateWalletResponse)
	err := c.cc.Invoke(ctx, Msg_CreateWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferFunds(ctx context.Context, in *MsgTransferFunds, opts ...grpc.CallOption) (*MsgTransferFundsResponse, error) {
	out := new(MsgTransferFundsResponse)
	err := c.cc.Invoke(ctx, Msg_TransferFunds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReceiveFunds(ctx context.Context, in *MsgReceiveFunds, opts ...grpc.CallOption) (*MsgReceiveFundsResponse, error) {
	out := new(MsgReceiveFundsResponse)
	err := c.cc.Invoke(ctx, Msg_ReceiveFunds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProtectPrivateKey(ctx context.Context, in *MsgProtectPrivateKey, opts ...grpc.CallOption) (*MsgProtectPrivateKeyResponse, error) {
	out := new(MsgProtectPrivateKeyResponse)
	err := c.cc.Invoke(ctx, Msg_ProtectPrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignRecoverPrivateKey(ctx context.Context, in *MsgSignRecoverPrivateKey, opts ...grpc.CallOption) (*MsgSignRecoverPrivateKeyResponse, error) {
	out := new(MsgSignRecoverPrivateKeyResponse)
	err := c.cc.Invoke(ctx, Msg_SignRecoverPrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimCredential(ctx context.Context, in *MsgClaimCredential, opts ...grpc.CallOption) (*MsgClaimCredentialResponse, error) {
	out := new(MsgClaimCredentialResponse)
	err := c.cc.Invoke(ctx, Msg_ClaimCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddServiceProvider(ctx context.Context, in *MsgAddServiceProvider, opts ...grpc.CallOption) (*MsgAddServiceProviderResponse, error) {
	out := new(MsgAddServiceProviderResponse)
	err := c.cc.Invoke(ctx, Msg_AddServiceProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeactivateServiceProvider(ctx context.Context, in *MsgDeactivateServiceProvider, opts ...grpc.CallOption) (*MsgDeactivateServiceProviderResponse, error) {
	out := new(MsgDeactivateServiceProviderResponse)
	err := c.cc.Invoke(ctx, Msg_DeactivateServiceProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEnclaveIdentity(ctx context.Context, in *MsgUpdateEnclaveIdentity, opts ...grpc.CallOption) (*MsgUpdateEnclaveIdentityResponse, error) {
	out := new(MsgUpdateEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateEnclaveIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerAddPublicKey(ctx context.Context, in *MsgPioneerAddPublicKey, opts ...grpc.CallOption) (*MsgPioneerAddPublicKeyResponse, error) {
	out := new(MsgPioneerAddPublicKeyResponse)
	err := c.cc.Invoke(ctx, Msg_PioneerAddPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerUpdateIntervalPublicKeyID(ctx context.Context, in *MsgPioneerUpdateIntervalPublicKeyID, opts ...grpc.CallOption) (*MsgPioneerUpdateIntervalPublicKeyIDResponse, error) {
	out := new(MsgPioneerUpdateIntervalPublicKeyIDResponse)
	err := c.cc.Invoke(ctx, Msg_PioneerUpdateIntervalPublicKeyID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerEnclaveExchange(ctx context.Context, in *MsgPioneerEnclaveExchange, opts ...grpc.CallOption) (*MsgPioneerEnclaveExchangeResponse, error) {
	out := new(MsgPioneerEnclaveExchangeResponse)
	err := c.cc.Invoke(ctx, Msg_PioneerEnclaveExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerBroadcastSecretSharePrivateKey(ctx context.Context, in *MsgPioneerBroadcastSecretSharePrivateKey, opts ...grpc.CallOption) (*MsgPioneerBroadcastSecretSharePrivateKeyResponse, error) {
	out := new(MsgPioneerBroadcastSecretSharePrivateKeyResponse)
	err := c.cc.Invoke(ctx, Msg_PioneerBroadcastSecretSharePrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerUpdatePioneerJar(ctx context.Context, in *MsgPioneerUpdatePioneerJar, opts ...grpc.CallOption) (*MsgPioneerUpdatePioneerJarResponse, error) {
	out := new(MsgPioneerUpdatePioneerJarResponse)
	err := c.cc.Invoke(ctx, Msg_PioneerUpdatePioneerJar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerUpdateJarRegulator(ctx context.Context, in *MsgPioneerUpdateJarRegulator, opts ...grpc.CallOption) (*MsgPioneerUpdateJarRegulatorResponse, error) {
	out := new(MsgPioneerUpdateJarRegulatorResponse)
	err := c.cc.Invoke(ctx, Msg_PioneerUpdateJarRegulator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PioneerUpdateEnclaveIdentity(ctx context.Context, in *MsgPioneerUpdateEnclaveIdentity, opts ...grpc.CallOption) (*MsgPioneerUpdateEnclaveIdentityResponse, error) {
	out := new(MsgPioneerUpdateEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, Msg_PioneerUpdateEnclaveIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateCredential(ctx context.Context, in *MsgCreateCredential, opts ...grpc.CallOption) (*MsgCreateCredentialResponse, error) {
	out := new(MsgCreateCredentialResponse)
	err := c.cc.Invoke(ctx, Msg_CreateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveCredential(ctx context.Context, in *MsgRemoveCredential, opts ...grpc.CallOption) (*MsgRemoveCredentialResponse, error) {
	out := new(MsgRemoveCredentialResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBulkCredentials(ctx context.Context, in *MsgCreateBulkCredentials, opts ...grpc.CallOption) (*MsgCreateBulkCredentialsResponse, error) {
	out := new(MsgCreateBulkCredentialsResponse)
	err := c.cc.Invoke(ctx, Msg_CreateBulkCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// AUTHORIZATION:
	AddPublicKey(context.Context, *MsgAddPublicKey) (*MsgAddPublicKeyResponse, error)
	// AUTHORIZATION:
	CreateWallet(context.Context, *MsgCreateWallet) (*MsgCreateWalletResponse, error)
	TransferFunds(context.Context, *MsgTransferFunds) (*MsgTransferFundsResponse, error)
	ReceiveFunds(context.Context, *MsgReceiveFunds) (*MsgReceiveFundsResponse, error)
	ProtectPrivateKey(context.Context, *MsgProtectPrivateKey) (*MsgProtectPrivateKeyResponse, error)
	SignRecoverPrivateKey(context.Context, *MsgSignRecoverPrivateKey) (*MsgSignRecoverPrivateKeyResponse, error)
	ClaimCredential(context.Context, *MsgClaimCredential) (*MsgClaimCredentialResponse, error)
	// AUTHORIZATION: gov module
	AddServiceProvider(context.Context, *MsgAddServiceProvider) (*MsgAddServiceProviderResponse, error)
	DeactivateServiceProvider(context.Context, *MsgDeactivateServiceProvider) (*MsgDeactivateServiceProviderResponse, error)
	UpdateEnclaveIdentity(context.Context, *MsgUpdateEnclaveIdentity) (*MsgUpdateEnclaveIdentityResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *IS* a Pioneer via enclave
	PioneerAddPublicKey(context.Context, *MsgPioneerAddPublicKey) (*MsgPioneerAddPublicKeyResponse, error)
	PioneerUpdateIntervalPublicKeyID(context.Context, *MsgPioneerUpdateIntervalPublicKeyID) (*MsgPioneerUpdateIntervalPublicKeyIDResponse, error)
	PioneerEnclaveExchange(context.Context, *MsgPioneerEnclaveExchange) (*MsgPioneerEnclaveExchangeResponse, error)
	PioneerBroadcastSecretSharePrivateKey(context.Context, *MsgPioneerBroadcastSecretSharePrivateKey) (*MsgPioneerBroadcastSecretSharePrivateKeyResponse, error)
	// rpc PioneerUpdateIntervalPublicKeyID             (MsgPioneerUpdateIntervalPublicKeyID            ) returns (MsgPioneerUpdateIntervalPublicKeyIDResponse            );
	PioneerUpdatePioneerJar(context.Context, *MsgPioneerUpdatePioneerJar) (*MsgPioneerUpdatePioneerJarResponse, error)
	PioneerUpdateJarRegulator(context.Context, *MsgPioneerUpdateJarRegulator) (*MsgPioneerUpdateJarRegulatorResponse, error)
	PioneerUpdateEnclaveIdentity(context.Context, *MsgPioneerUpdateEnclaveIdentity) (*MsgPioneerUpdateEnclaveIdentityResponse, error)
	// AUTHORIZATION:
	// make sure that the creator *IS* an identity service provider
	// make sure that all the required signatory vshares ccPubK has ss interval public key
	CreateCredential(context.Context, *MsgCreateCredential) (*MsgCreateCredentialResponse, error)
	RemoveCredential(context.Context, *MsgRemoveCredential) (*MsgRemoveCredentialResponse, error)
	CreateBulkCredentials(context.Context, *MsgCreateBulkCredentials) (*MsgCreateBulkCredentialsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) AddPublicKey(context.Context, *MsgAddPublicKey) (*MsgAddPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPublicKey not implemented")
}
func (UnimplementedMsgServer) CreateWallet(context.Context, *MsgCreateWallet) (*MsgCreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedMsgServer) TransferFunds(context.Context, *MsgTransferFunds) (*MsgTransferFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFunds not implemented")
}
func (UnimplementedMsgServer) ReceiveFunds(context.Context, *MsgReceiveFunds) (*MsgReceiveFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFunds not implemented")
}
func (UnimplementedMsgServer) ProtectPrivateKey(context.Context, *MsgProtectPrivateKey) (*MsgProtectPrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtectPrivateKey not implemented")
}
func (UnimplementedMsgServer) SignRecoverPrivateKey(context.Context, *MsgSignRecoverPrivateKey) (*MsgSignRecoverPrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignRecoverPrivateKey not implemented")
}
func (UnimplementedMsgServer) ClaimCredential(context.Context, *MsgClaimCredential) (*MsgClaimCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimCredential not implemented")
}
func (UnimplementedMsgServer) AddServiceProvider(context.Context, *MsgAddServiceProvider) (*MsgAddServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServiceProvider not implemented")
}
func (UnimplementedMsgServer) DeactivateServiceProvider(context.Context, *MsgDeactivateServiceProvider) (*MsgDeactivateServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateServiceProvider not implemented")
}
func (UnimplementedMsgServer) UpdateEnclaveIdentity(context.Context, *MsgUpdateEnclaveIdentity) (*MsgUpdateEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnclaveIdentity not implemented")
}
func (UnimplementedMsgServer) PioneerAddPublicKey(context.Context, *MsgPioneerAddPublicKey) (*MsgPioneerAddPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerAddPublicKey not implemented")
}
func (UnimplementedMsgServer) PioneerUpdateIntervalPublicKeyID(context.Context, *MsgPioneerUpdateIntervalPublicKeyID) (*MsgPioneerUpdateIntervalPublicKeyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerUpdateIntervalPublicKeyID not implemented")
}
func (UnimplementedMsgServer) PioneerEnclaveExchange(context.Context, *MsgPioneerEnclaveExchange) (*MsgPioneerEnclaveExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerEnclaveExchange not implemented")
}
func (UnimplementedMsgServer) PioneerBroadcastSecretSharePrivateKey(context.Context, *MsgPioneerBroadcastSecretSharePrivateKey) (*MsgPioneerBroadcastSecretSharePrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerBroadcastSecretSharePrivateKey not implemented")
}
func (UnimplementedMsgServer) PioneerUpdatePioneerJar(context.Context, *MsgPioneerUpdatePioneerJar) (*MsgPioneerUpdatePioneerJarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerUpdatePioneerJar not implemented")
}
func (UnimplementedMsgServer) PioneerUpdateJarRegulator(context.Context, *MsgPioneerUpdateJarRegulator) (*MsgPioneerUpdateJarRegulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerUpdateJarRegulator not implemented")
}
func (UnimplementedMsgServer) PioneerUpdateEnclaveIdentity(context.Context, *MsgPioneerUpdateEnclaveIdentity) (*MsgPioneerUpdateEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PioneerUpdateEnclaveIdentity not implemented")
}
func (UnimplementedMsgServer) CreateCredential(context.Context, *MsgCreateCredential) (*MsgCreateCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedMsgServer) RemoveCredential(context.Context, *MsgRemoveCredential) (*MsgRemoveCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCredential not implemented")
}
func (UnimplementedMsgServer) CreateBulkCredentials(context.Context, *MsgCreateBulkCredentials) (*MsgCreateBulkCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulkCredentials not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddPublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddPublicKey(ctx, req.(*MsgAddPublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateWallet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateWallet(ctx, req.(*MsgCreateWallet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TransferFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferFunds(ctx, req.(*MsgTransferFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReceiveFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReceiveFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReceiveFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReceiveFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReceiveFunds(ctx, req.(*MsgReceiveFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProtectPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProtectPrivateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProtectPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProtectPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProtectPrivateKey(ctx, req.(*MsgProtectPrivateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignRecoverPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignRecoverPrivateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignRecoverPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SignRecoverPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignRecoverPrivateKey(ctx, req.(*MsgSignRecoverPrivateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ClaimCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimCredential(ctx, req.(*MsgClaimCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddServiceProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddServiceProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddServiceProvider(ctx, req.(*MsgAddServiceProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeactivateServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeactivateServiceProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeactivateServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeactivateServiceProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeactivateServiceProvider(ctx, req.(*MsgDeactivateServiceProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEnclaveIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateEnclaveIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEnclaveIdentity(ctx, req.(*MsgUpdateEnclaveIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerAddPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerAddPublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerAddPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PioneerAddPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerAddPublicKey(ctx, req.(*MsgPioneerAddPublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerUpdateIntervalPublicKeyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerUpdateIntervalPublicKeyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerUpdateIntervalPublicKeyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PioneerUpdateIntervalPublicKeyID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerUpdateIntervalPublicKeyID(ctx, req.(*MsgPioneerUpdateIntervalPublicKeyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerEnclaveExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerEnclaveExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerEnclaveExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PioneerEnclaveExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerEnclaveExchange(ctx, req.(*MsgPioneerEnclaveExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerBroadcastSecretSharePrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerBroadcastSecretSharePrivateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerBroadcastSecretSharePrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PioneerBroadcastSecretSharePrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerBroadcastSecretSharePrivateKey(ctx, req.(*MsgPioneerBroadcastSecretSharePrivateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerUpdatePioneerJar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerUpdatePioneerJar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerUpdatePioneerJar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PioneerUpdatePioneerJar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerUpdatePioneerJar(ctx, req.(*MsgPioneerUpdatePioneerJar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerUpdateJarRegulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerUpdateJarRegulator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerUpdateJarRegulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PioneerUpdateJarRegulator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerUpdateJarRegulator(ctx, req.(*MsgPioneerUpdateJarRegulator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PioneerUpdateEnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPioneerUpdateEnclaveIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PioneerUpdateEnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PioneerUpdateEnclaveIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PioneerUpdateEnclaveIdentity(ctx, req.(*MsgPioneerUpdateEnclaveIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCredential(ctx, req.(*MsgCreateCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveCredential(ctx, req.(*MsgRemoveCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBulkCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBulkCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBulkCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateBulkCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBulkCredentials(ctx, req.(*MsgCreateBulkCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qadena.qadena.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "AddPublicKey",
			Handler:    _Msg_AddPublicKey_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _Msg_CreateWallet_Handler,
		},
		{
			MethodName: "TransferFunds",
			Handler:    _Msg_TransferFunds_Handler,
		},
		{
			MethodName: "ReceiveFunds",
			Handler:    _Msg_ReceiveFunds_Handler,
		},
		{
			MethodName: "ProtectPrivateKey",
			Handler:    _Msg_ProtectPrivateKey_Handler,
		},
		{
			MethodName: "SignRecoverPrivateKey",
			Handler:    _Msg_SignRecoverPrivateKey_Handler,
		},
		{
			MethodName: "ClaimCredential",
			Handler:    _Msg_ClaimCredential_Handler,
		},
		{
			MethodName: "AddServiceProvider",
			Handler:    _Msg_AddServiceProvider_Handler,
		},
		{
			MethodName: "DeactivateServiceProvider",
			Handler:    _Msg_DeactivateServiceProvider_Handler,
		},
		{
			MethodName: "UpdateEnclaveIdentity",
			Handler:    _Msg_UpdateEnclaveIdentity_Handler,
		},
		{
			MethodName: "PioneerAddPublicKey",
			Handler:    _Msg_PioneerAddPublicKey_Handler,
		},
		{
			MethodName: "PioneerUpdateIntervalPublicKeyID",
			Handler:    _Msg_PioneerUpdateIntervalPublicKeyID_Handler,
		},
		{
			MethodName: "PioneerEnclaveExchange",
			Handler:    _Msg_PioneerEnclaveExchange_Handler,
		},
		{
			MethodName: "PioneerBroadcastSecretSharePrivateKey",
			Handler:    _Msg_PioneerBroadcastSecretSharePrivateKey_Handler,
		},
		{
			MethodName: "PioneerUpdatePioneerJar",
			Handler:    _Msg_PioneerUpdatePioneerJar_Handler,
		},
		{
			MethodName: "PioneerUpdateJarRegulator",
			Handler:    _Msg_PioneerUpdateJarRegulator_Handler,
		},
		{
			MethodName: "PioneerUpdateEnclaveIdentity",
			Handler:    _Msg_PioneerUpdateEnclaveIdentity_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _Msg_CreateCredential_Handler,
		},
		{
			MethodName: "RemoveCredential",
			Handler:    _Msg_RemoveCredential_Handler,
		},
		{
			MethodName: "CreateBulkCredentials",
			Handler:    _Msg_CreateBulkCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qadena/qadena/tx.proto",
}
