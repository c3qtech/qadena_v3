// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: qadena/qadena/enclave.proto

package qadena

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greeter_SayHello_FullMethodName = "/qadena.qadena.Greeter/SayHello"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qadena.qadena.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qadena/qadena/enclave.proto",
}

const (
	QadenaEnclave_InitEnclave_FullMethodName                           = "/qadena.qadena.QadenaEnclave/InitEnclave"
	QadenaEnclave_SyncEnclave_FullMethodName                           = "/qadena.qadena.QadenaEnclave/SyncEnclave"
	QadenaEnclave_UpgradeEnclave_FullMethodName                        = "/qadena.qadena.QadenaEnclave/UpgradeEnclave"
	QadenaEnclave_ExportPrivateKey_FullMethodName                      = "/qadena.qadena.QadenaEnclave/ExportPrivateKey"
	QadenaEnclave_ExportPrivateState_FullMethodName                    = "/qadena.qadena.QadenaEnclave/ExportPrivateState"
	QadenaEnclave_RemovePrivateKey_FullMethodName                      = "/qadena.qadena.QadenaEnclave/RemovePrivateKey"
	QadenaEnclave_UpdateSSIntervalKey_FullMethodName                   = "/qadena.qadena.QadenaEnclave/UpdateSSIntervalKey"
	QadenaEnclave_QueryEnclaveSyncEnclave_FullMethodName               = "/qadena.qadena.QadenaEnclave/QueryEnclaveSyncEnclave"
	QadenaEnclave_QueryEnclaveSecretShare_FullMethodName               = "/qadena.qadena.QadenaEnclave/QueryEnclaveSecretShare"
	QadenaEnclave_QueryEnclaveRecoverKeyShare_FullMethodName           = "/qadena.qadena.QadenaEnclave/QueryEnclaveRecoverKeyShare"
	QadenaEnclave_QueryEnclaveValidateEnclaveIdentity_FullMethodName   = "/qadena.qadena.QadenaEnclave/QueryEnclaveValidateEnclaveIdentity"
	QadenaEnclave_SetEnclaveIdentity_FullMethodName                    = "/qadena.qadena.QadenaEnclave/SetEnclaveIdentity"
	QadenaEnclave_UpdateEnclaveIdentity_FullMethodName                 = "/qadena.qadena.QadenaEnclave/UpdateEnclaveIdentity"
	QadenaEnclave_SetWallet_FullMethodName                             = "/qadena.qadena.QadenaEnclave/SetWallet"
	QadenaEnclave_SetProtectKey_FullMethodName                         = "/qadena.qadena.QadenaEnclave/SetProtectKey"
	QadenaEnclave_SetRecoverKey_FullMethodName                         = "/qadena.qadena.QadenaEnclave/SetRecoverKey"
	QadenaEnclave_SetCredential_FullMethodName                         = "/qadena.qadena.QadenaEnclave/SetCredential"
	QadenaEnclave_RemoveCredential_FullMethodName                      = "/qadena.qadena.QadenaEnclave/RemoveCredential"
	QadenaEnclave_RecoverKeyByCredential_FullMethodName                = "/qadena.qadena.QadenaEnclave/RecoverKeyByCredential"
	QadenaEnclave_ClaimCredential_FullMethodName                       = "/qadena.qadena.QadenaEnclave/ClaimCredential"
	QadenaEnclave_SignRecoverKey_FullMethodName                        = "/qadena.qadena.QadenaEnclave/SignRecoverKey"
	QadenaEnclave_QueryGetRecoverKey_FullMethodName                    = "/qadena.qadena.QadenaEnclave/QueryGetRecoverKey"
	QadenaEnclave_QueryFindCredential_FullMethodName                   = "/qadena.qadena.QadenaEnclave/QueryFindCredential"
	QadenaEnclave_QueryGetSubWalletIDByOriginalWalletID_FullMethodName = "/qadena.qadena.QadenaEnclave/QueryGetSubWalletIDByOriginalWalletID"
	QadenaEnclave_ValidateAuthenticateServiceProvider_FullMethodName   = "/qadena.qadena.QadenaEnclave/ValidateAuthenticateServiceProvider"
	QadenaEnclave_ValidateAuthorizedSignatory_FullMethodName           = "/qadena.qadena.QadenaEnclave/ValidateAuthorizedSignatory"
	QadenaEnclave_ValidateAuthorizedSigner_FullMethodName              = "/qadena.qadena.QadenaEnclave/ValidateAuthorizedSigner"
	QadenaEnclave_SetPublicKey_FullMethodName                          = "/qadena.qadena.QadenaEnclave/SetPublicKey"
	QadenaEnclave_SetJarRegulator_FullMethodName                       = "/qadena.qadena.QadenaEnclave/SetJarRegulator"
	QadenaEnclave_SetIntervalPublicKeyID_FullMethodName                = "/qadena.qadena.QadenaEnclave/SetIntervalPublicKeyID"
	QadenaEnclave_SetPioneerJar_FullMethodName                         = "/qadena.qadena.QadenaEnclave/SetPioneerJar"
	QadenaEnclave_SetSecretSharePrivateKey_FullMethodName              = "/qadena.qadena.QadenaEnclave/SetSecretSharePrivateKey"
	QadenaEnclave_ValidateDestinationWallet_FullMethodName             = "/qadena.qadena.QadenaEnclave/ValidateDestinationWallet"
	QadenaEnclave_ValidateCredential_FullMethodName                    = "/qadena.qadena.QadenaEnclave/ValidateCredential"
	QadenaEnclave_ValidateTransferPrime_FullMethodName                 = "/qadena.qadena.QadenaEnclave/ValidateTransferPrime"
	QadenaEnclave_ValidateTransferDoublePrime_FullMethodName           = "/qadena.qadena.QadenaEnclave/ValidateTransferDoublePrime"
	QadenaEnclave_SyncWallets_FullMethodName                           = "/qadena.qadena.QadenaEnclave/SyncWallets"
	QadenaEnclave_SyncCredentials_FullMethodName                       = "/qadena.qadena.QadenaEnclave/SyncCredentials"
	QadenaEnclave_SyncRecoverKeys_FullMethodName                       = "/qadena.qadena.QadenaEnclave/SyncRecoverKeys"
	QadenaEnclave_SyncSuspiciousTransactions_FullMethodName            = "/qadena.qadena.QadenaEnclave/SyncSuspiciousTransactions"
	QadenaEnclave_ScanTransaction_FullMethodName                       = "/qadena.qadena.QadenaEnclave/ScanTransaction"
	QadenaEnclave_UpdateHeight_FullMethodName                          = "/qadena.qadena.QadenaEnclave/UpdateHeight"
	QadenaEnclave_TransactionComplete_FullMethodName                   = "/qadena.qadena.QadenaEnclave/TransactionComplete"
	QadenaEnclave_EndBlock_FullMethodName                              = "/qadena.qadena.QadenaEnclave/EndBlock"
	QadenaEnclave_GetStoreHash_FullMethodName                          = "/qadena.qadena.QadenaEnclave/GetStoreHash"
)

// QadenaEnclaveClient is the client API for QadenaEnclave service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QadenaEnclaveClient interface {
	// these are called from init_enclave
	InitEnclave(ctx context.Context, in *MsgInitEnclave, opts ...grpc.CallOption) (*InitEnclaveReply, error)
	SyncEnclave(ctx context.Context, in *MsgSyncEnclave, opts ...grpc.CallOption) (*SyncEnclaveReply, error)
	// rpc AddAsValidator (MsgAddAsValidator) returns (AddAsValidatorReply) {}
	UpgradeEnclave(ctx context.Context, in *MsgUpgradeEnclave, opts ...grpc.CallOption) (*UpgradeEnclaveReply, error)
	// for debug only, called from init_enclave
	ExportPrivateKey(ctx context.Context, in *MsgExportPrivateKey, opts ...grpc.CallOption) (*ExportPrivateKeyReply, error)
	ExportPrivateState(ctx context.Context, in *MsgExportPrivateState, opts ...grpc.CallOption) (*ExportPrivateStateReply, error)
	RemovePrivateKey(ctx context.Context, in *MsgRemovePrivateKey, opts ...grpc.CallOption) (*RemovePrivateKeyReply, error)
	UpdateSSIntervalKey(ctx context.Context, in *MsgUpdateSSIntervalKey, opts ...grpc.CallOption) (*UpdateSSIntervalKeyReply, error)
	// these are called from the chain by an enclave
	QueryEnclaveSyncEnclave(ctx context.Context, in *QueryEnclaveSyncEnclaveRequest, opts ...grpc.CallOption) (*QueryEnclaveSyncEnclaveResponse, error)
	QueryEnclaveSecretShare(ctx context.Context, in *QueryEnclaveSecretShareRequest, opts ...grpc.CallOption) (*QueryEnclaveSecretShareResponse, error)
	QueryEnclaveRecoverKeyShare(ctx context.Context, in *QueryEnclaveRecoverKeyShareRequest, opts ...grpc.CallOption) (*QueryEnclaveRecoverKeyShareResponse, error)
	QueryEnclaveValidateEnclaveIdentity(ctx context.Context, in *QueryEnclaveValidateEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryEnclaveValidateEnclaveIdentityResponse, error)
	SetEnclaveIdentity(ctx context.Context, in *EnclaveIdentity, opts ...grpc.CallOption) (*SetEnclaveIdentityReply, error)
	UpdateEnclaveIdentity(ctx context.Context, in *PioneerUpdateEnclaveIdentity, opts ...grpc.CallOption) (*UpdateEnclaveIdentityReply, error)
	SetWallet(ctx context.Context, in *Wallet, opts ...grpc.CallOption) (*SetWalletReply, error)
	SetProtectKey(ctx context.Context, in *ProtectKey, opts ...grpc.CallOption) (*SetProtectKeyReply, error)
	SetRecoverKey(ctx context.Context, in *RecoverKey, opts ...grpc.CallOption) (*SetRecoverKeyReply, error)
	SetCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*SetCredentialReply, error)
	RemoveCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*RemoveCredentialReply, error)
	RecoverKeyByCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*RecoverKeyReply, error)
	ClaimCredential(ctx context.Context, in *MsgClaimCredential, opts ...grpc.CallOption) (*MsgClaimCredentialResponse, error)
	SignRecoverKey(ctx context.Context, in *MsgSignRecoverPrivateKey, opts ...grpc.CallOption) (*SignRecoverKeyReply, error)
	QueryGetRecoverKey(ctx context.Context, in *QueryGetRecoverKeyRequest, opts ...grpc.CallOption) (*QueryGetRecoverKeyResponse, error)
	QueryFindCredential(ctx context.Context, in *QueryFindCredentialRequest, opts ...grpc.CallOption) (*QueryFindCredentialResponse, error)
	QueryGetSubWalletIDByOriginalWalletID(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*QueryGetSubWalletIDByOriginalWalletIDResponse, error)
	ValidateAuthenticateServiceProvider(ctx context.Context, in *ValidateAuthenticateServiceProviderRequest, opts ...grpc.CallOption) (*ValidateAuthenticateServiceProviderReply, error)
	// used to validate the "authorized signatory" (this allows a user to specify which eph wallet ID is allowed to sign documents)
	ValidateAuthorizedSignatory(ctx context.Context, in *ValidateAuthorizedSignatoryRequest, opts ...grpc.CallOption) (*ValidateAuthorizedSignatoryReply, error)
	// used to validate whether this signer can sign a document (is the signer's credentials enough to sign the document?)
	ValidateAuthorizedSigner(ctx context.Context, in *ValidateAuthorizedSignerRequest, opts ...grpc.CallOption) (*ValidateAuthorizedSignerReply, error)
	SetPublicKey(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*SetPublicKeyReply, error)
	SetJarRegulator(ctx context.Context, in *JarRegulator, opts ...grpc.CallOption) (*SetJarRegulatorReply, error)
	SetIntervalPublicKeyID(ctx context.Context, in *IntervalPublicKeyID, opts ...grpc.CallOption) (*SetIntervalPublicKeyIdReply, error)
	SetPioneerJar(ctx context.Context, in *PioneerJar, opts ...grpc.CallOption) (*SetPioneerJarReply, error)
	SetSecretSharePrivateKey(ctx context.Context, in *SecretSharePrivK, opts ...grpc.CallOption) (*SetSecretSharePrivateKeyReply, error)
	ValidateDestinationWallet(ctx context.Context, in *MsgCreateWallet, opts ...grpc.CallOption) (*ValidateDestinationWalletReply, error)
	ValidateCredential(ctx context.Context, in *MsgBindCredential, opts ...grpc.CallOption) (*ValidateCredentialReply, error)
	ValidateTransferPrime(ctx context.Context, in *MsgTransferFunds, opts ...grpc.CallOption) (*ValidateTransferPrimeReply, error)
	ValidateTransferDoublePrime(ctx context.Context, in *MsgReceiveFunds, opts ...grpc.CallOption) (*ValidateTransferDoublePrimeReply, error)
	SyncWallets(ctx context.Context, in *MsgSyncWallets, opts ...grpc.CallOption) (*SyncWalletsReply, error)
	SyncCredentials(ctx context.Context, in *MsgSyncCredentials, opts ...grpc.CallOption) (*SyncCredentialsReply, error)
	SyncRecoverKeys(ctx context.Context, in *MsgSyncRecoverKeys, opts ...grpc.CallOption) (*SyncRecoverKeysReply, error)
	SyncSuspiciousTransactions(ctx context.Context, in *MsgSyncSuspiciousTransactions, opts ...grpc.CallOption) (*SyncSuspiciousTransactionsReply, error)
	ScanTransaction(ctx context.Context, in *MsgScanTransactions, opts ...grpc.CallOption) (*ScanTransactionReply, error)
	// called at BeginBlock at a certain interval (i.e. not at every BeginBlock)
	UpdateHeight(ctx context.Context, in *MsgUpdateHeight, opts ...grpc.CallOption) (*UpdateHeightReply, error)
	// called after each transaction
	TransactionComplete(ctx context.Context, in *MsgTransactionComplete, opts ...grpc.CallOption) (*TransactionCompleteReply, error)
	// called at each EndBlock
	EndBlock(ctx context.Context, in *MsgEndBlock, opts ...grpc.CallOption) (*EndBlockReply, error)
	// called on init
	GetStoreHash(ctx context.Context, in *MsgGetStoreHash, opts ...grpc.CallOption) (*GetStoreHashReply, error)
}

type qadenaEnclaveClient struct {
	cc grpc.ClientConnInterface
}

func NewQadenaEnclaveClient(cc grpc.ClientConnInterface) QadenaEnclaveClient {
	return &qadenaEnclaveClient{cc}
}

func (c *qadenaEnclaveClient) InitEnclave(ctx context.Context, in *MsgInitEnclave, opts ...grpc.CallOption) (*InitEnclaveReply, error) {
	out := new(InitEnclaveReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_InitEnclave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SyncEnclave(ctx context.Context, in *MsgSyncEnclave, opts ...grpc.CallOption) (*SyncEnclaveReply, error) {
	out := new(SyncEnclaveReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SyncEnclave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) UpgradeEnclave(ctx context.Context, in *MsgUpgradeEnclave, opts ...grpc.CallOption) (*UpgradeEnclaveReply, error) {
	out := new(UpgradeEnclaveReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_UpgradeEnclave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ExportPrivateKey(ctx context.Context, in *MsgExportPrivateKey, opts ...grpc.CallOption) (*ExportPrivateKeyReply, error) {
	out := new(ExportPrivateKeyReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_ExportPrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ExportPrivateState(ctx context.Context, in *MsgExportPrivateState, opts ...grpc.CallOption) (*ExportPrivateStateReply, error) {
	out := new(ExportPrivateStateReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_ExportPrivateState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) RemovePrivateKey(ctx context.Context, in *MsgRemovePrivateKey, opts ...grpc.CallOption) (*RemovePrivateKeyReply, error) {
	out := new(RemovePrivateKeyReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_RemovePrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) UpdateSSIntervalKey(ctx context.Context, in *MsgUpdateSSIntervalKey, opts ...grpc.CallOption) (*UpdateSSIntervalKeyReply, error) {
	out := new(UpdateSSIntervalKeyReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_UpdateSSIntervalKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) QueryEnclaveSyncEnclave(ctx context.Context, in *QueryEnclaveSyncEnclaveRequest, opts ...grpc.CallOption) (*QueryEnclaveSyncEnclaveResponse, error) {
	out := new(QueryEnclaveSyncEnclaveResponse)
	err := c.cc.Invoke(ctx, QadenaEnclave_QueryEnclaveSyncEnclave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) QueryEnclaveSecretShare(ctx context.Context, in *QueryEnclaveSecretShareRequest, opts ...grpc.CallOption) (*QueryEnclaveSecretShareResponse, error) {
	out := new(QueryEnclaveSecretShareResponse)
	err := c.cc.Invoke(ctx, QadenaEnclave_QueryEnclaveSecretShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) QueryEnclaveRecoverKeyShare(ctx context.Context, in *QueryEnclaveRecoverKeyShareRequest, opts ...grpc.CallOption) (*QueryEnclaveRecoverKeyShareResponse, error) {
	out := new(QueryEnclaveRecoverKeyShareResponse)
	err := c.cc.Invoke(ctx, QadenaEnclave_QueryEnclaveRecoverKeyShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) QueryEnclaveValidateEnclaveIdentity(ctx context.Context, in *QueryEnclaveValidateEnclaveIdentityRequest, opts ...grpc.CallOption) (*QueryEnclaveValidateEnclaveIdentityResponse, error) {
	out := new(QueryEnclaveValidateEnclaveIdentityResponse)
	err := c.cc.Invoke(ctx, QadenaEnclave_QueryEnclaveValidateEnclaveIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SetEnclaveIdentity(ctx context.Context, in *EnclaveIdentity, opts ...grpc.CallOption) (*SetEnclaveIdentityReply, error) {
	out := new(SetEnclaveIdentityReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SetEnclaveIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) UpdateEnclaveIdentity(ctx context.Context, in *PioneerUpdateEnclaveIdentity, opts ...grpc.CallOption) (*UpdateEnclaveIdentityReply, error) {
	out := new(UpdateEnclaveIdentityReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_UpdateEnclaveIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SetWallet(ctx context.Context, in *Wallet, opts ...grpc.CallOption) (*SetWalletReply, error) {
	out := new(SetWalletReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SetWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SetProtectKey(ctx context.Context, in *ProtectKey, opts ...grpc.CallOption) (*SetProtectKeyReply, error) {
	out := new(SetProtectKeyReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SetProtectKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SetRecoverKey(ctx context.Context, in *RecoverKey, opts ...grpc.CallOption) (*SetRecoverKeyReply, error) {
	out := new(SetRecoverKeyReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SetRecoverKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SetCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*SetCredentialReply, error) {
	out := new(SetCredentialReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SetCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) RemoveCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*RemoveCredentialReply, error) {
	out := new(RemoveCredentialReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_RemoveCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) RecoverKeyByCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*RecoverKeyReply, error) {
	out := new(RecoverKeyReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_RecoverKeyByCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ClaimCredential(ctx context.Context, in *MsgClaimCredential, opts ...grpc.CallOption) (*MsgClaimCredentialResponse, error) {
	out := new(MsgClaimCredentialResponse)
	err := c.cc.Invoke(ctx, QadenaEnclave_ClaimCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SignRecoverKey(ctx context.Context, in *MsgSignRecoverPrivateKey, opts ...grpc.CallOption) (*SignRecoverKeyReply, error) {
	out := new(SignRecoverKeyReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SignRecoverKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) QueryGetRecoverKey(ctx context.Context, in *QueryGetRecoverKeyRequest, opts ...grpc.CallOption) (*QueryGetRecoverKeyResponse, error) {
	out := new(QueryGetRecoverKeyResponse)
	err := c.cc.Invoke(ctx, QadenaEnclave_QueryGetRecoverKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) QueryFindCredential(ctx context.Context, in *QueryFindCredentialRequest, opts ...grpc.CallOption) (*QueryFindCredentialResponse, error) {
	out := new(QueryFindCredentialResponse)
	err := c.cc.Invoke(ctx, QadenaEnclave_QueryFindCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) QueryGetSubWalletIDByOriginalWalletID(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*QueryGetSubWalletIDByOriginalWalletIDResponse, error) {
	out := new(QueryGetSubWalletIDByOriginalWalletIDResponse)
	err := c.cc.Invoke(ctx, QadenaEnclave_QueryGetSubWalletIDByOriginalWalletID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ValidateAuthenticateServiceProvider(ctx context.Context, in *ValidateAuthenticateServiceProviderRequest, opts ...grpc.CallOption) (*ValidateAuthenticateServiceProviderReply, error) {
	out := new(ValidateAuthenticateServiceProviderReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_ValidateAuthenticateServiceProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ValidateAuthorizedSignatory(ctx context.Context, in *ValidateAuthorizedSignatoryRequest, opts ...grpc.CallOption) (*ValidateAuthorizedSignatoryReply, error) {
	out := new(ValidateAuthorizedSignatoryReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_ValidateAuthorizedSignatory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ValidateAuthorizedSigner(ctx context.Context, in *ValidateAuthorizedSignerRequest, opts ...grpc.CallOption) (*ValidateAuthorizedSignerReply, error) {
	out := new(ValidateAuthorizedSignerReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_ValidateAuthorizedSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SetPublicKey(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*SetPublicKeyReply, error) {
	out := new(SetPublicKeyReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SetPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SetJarRegulator(ctx context.Context, in *JarRegulator, opts ...grpc.CallOption) (*SetJarRegulatorReply, error) {
	out := new(SetJarRegulatorReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SetJarRegulator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SetIntervalPublicKeyID(ctx context.Context, in *IntervalPublicKeyID, opts ...grpc.CallOption) (*SetIntervalPublicKeyIdReply, error) {
	out := new(SetIntervalPublicKeyIdReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SetIntervalPublicKeyID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SetPioneerJar(ctx context.Context, in *PioneerJar, opts ...grpc.CallOption) (*SetPioneerJarReply, error) {
	out := new(SetPioneerJarReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SetPioneerJar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SetSecretSharePrivateKey(ctx context.Context, in *SecretSharePrivK, opts ...grpc.CallOption) (*SetSecretSharePrivateKeyReply, error) {
	out := new(SetSecretSharePrivateKeyReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SetSecretSharePrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ValidateDestinationWallet(ctx context.Context, in *MsgCreateWallet, opts ...grpc.CallOption) (*ValidateDestinationWalletReply, error) {
	out := new(ValidateDestinationWalletReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_ValidateDestinationWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ValidateCredential(ctx context.Context, in *MsgBindCredential, opts ...grpc.CallOption) (*ValidateCredentialReply, error) {
	out := new(ValidateCredentialReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_ValidateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ValidateTransferPrime(ctx context.Context, in *MsgTransferFunds, opts ...grpc.CallOption) (*ValidateTransferPrimeReply, error) {
	out := new(ValidateTransferPrimeReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_ValidateTransferPrime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ValidateTransferDoublePrime(ctx context.Context, in *MsgReceiveFunds, opts ...grpc.CallOption) (*ValidateTransferDoublePrimeReply, error) {
	out := new(ValidateTransferDoublePrimeReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_ValidateTransferDoublePrime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SyncWallets(ctx context.Context, in *MsgSyncWallets, opts ...grpc.CallOption) (*SyncWalletsReply, error) {
	out := new(SyncWalletsReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SyncWallets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SyncCredentials(ctx context.Context, in *MsgSyncCredentials, opts ...grpc.CallOption) (*SyncCredentialsReply, error) {
	out := new(SyncCredentialsReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SyncCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SyncRecoverKeys(ctx context.Context, in *MsgSyncRecoverKeys, opts ...grpc.CallOption) (*SyncRecoverKeysReply, error) {
	out := new(SyncRecoverKeysReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SyncRecoverKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) SyncSuspiciousTransactions(ctx context.Context, in *MsgSyncSuspiciousTransactions, opts ...grpc.CallOption) (*SyncSuspiciousTransactionsReply, error) {
	out := new(SyncSuspiciousTransactionsReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_SyncSuspiciousTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) ScanTransaction(ctx context.Context, in *MsgScanTransactions, opts ...grpc.CallOption) (*ScanTransactionReply, error) {
	out := new(ScanTransactionReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_ScanTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) UpdateHeight(ctx context.Context, in *MsgUpdateHeight, opts ...grpc.CallOption) (*UpdateHeightReply, error) {
	out := new(UpdateHeightReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_UpdateHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) TransactionComplete(ctx context.Context, in *MsgTransactionComplete, opts ...grpc.CallOption) (*TransactionCompleteReply, error) {
	out := new(TransactionCompleteReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_TransactionComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) EndBlock(ctx context.Context, in *MsgEndBlock, opts ...grpc.CallOption) (*EndBlockReply, error) {
	out := new(EndBlockReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_EndBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qadenaEnclaveClient) GetStoreHash(ctx context.Context, in *MsgGetStoreHash, opts ...grpc.CallOption) (*GetStoreHashReply, error) {
	out := new(GetStoreHashReply)
	err := c.cc.Invoke(ctx, QadenaEnclave_GetStoreHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QadenaEnclaveServer is the server API for QadenaEnclave service.
// All implementations must embed UnimplementedQadenaEnclaveServer
// for forward compatibility
type QadenaEnclaveServer interface {
	// these are called from init_enclave
	InitEnclave(context.Context, *MsgInitEnclave) (*InitEnclaveReply, error)
	SyncEnclave(context.Context, *MsgSyncEnclave) (*SyncEnclaveReply, error)
	// rpc AddAsValidator (MsgAddAsValidator) returns (AddAsValidatorReply) {}
	UpgradeEnclave(context.Context, *MsgUpgradeEnclave) (*UpgradeEnclaveReply, error)
	// for debug only, called from init_enclave
	ExportPrivateKey(context.Context, *MsgExportPrivateKey) (*ExportPrivateKeyReply, error)
	ExportPrivateState(context.Context, *MsgExportPrivateState) (*ExportPrivateStateReply, error)
	RemovePrivateKey(context.Context, *MsgRemovePrivateKey) (*RemovePrivateKeyReply, error)
	UpdateSSIntervalKey(context.Context, *MsgUpdateSSIntervalKey) (*UpdateSSIntervalKeyReply, error)
	// these are called from the chain by an enclave
	QueryEnclaveSyncEnclave(context.Context, *QueryEnclaveSyncEnclaveRequest) (*QueryEnclaveSyncEnclaveResponse, error)
	QueryEnclaveSecretShare(context.Context, *QueryEnclaveSecretShareRequest) (*QueryEnclaveSecretShareResponse, error)
	QueryEnclaveRecoverKeyShare(context.Context, *QueryEnclaveRecoverKeyShareRequest) (*QueryEnclaveRecoverKeyShareResponse, error)
	QueryEnclaveValidateEnclaveIdentity(context.Context, *QueryEnclaveValidateEnclaveIdentityRequest) (*QueryEnclaveValidateEnclaveIdentityResponse, error)
	SetEnclaveIdentity(context.Context, *EnclaveIdentity) (*SetEnclaveIdentityReply, error)
	UpdateEnclaveIdentity(context.Context, *PioneerUpdateEnclaveIdentity) (*UpdateEnclaveIdentityReply, error)
	SetWallet(context.Context, *Wallet) (*SetWalletReply, error)
	SetProtectKey(context.Context, *ProtectKey) (*SetProtectKeyReply, error)
	SetRecoverKey(context.Context, *RecoverKey) (*SetRecoverKeyReply, error)
	SetCredential(context.Context, *Credential) (*SetCredentialReply, error)
	RemoveCredential(context.Context, *Credential) (*RemoveCredentialReply, error)
	RecoverKeyByCredential(context.Context, *Credential) (*RecoverKeyReply, error)
	ClaimCredential(context.Context, *MsgClaimCredential) (*MsgClaimCredentialResponse, error)
	SignRecoverKey(context.Context, *MsgSignRecoverPrivateKey) (*SignRecoverKeyReply, error)
	QueryGetRecoverKey(context.Context, *QueryGetRecoverKeyRequest) (*QueryGetRecoverKeyResponse, error)
	QueryFindCredential(context.Context, *QueryFindCredentialRequest) (*QueryFindCredentialResponse, error)
	QueryGetSubWalletIDByOriginalWalletID(context.Context, *Credential) (*QueryGetSubWalletIDByOriginalWalletIDResponse, error)
	ValidateAuthenticateServiceProvider(context.Context, *ValidateAuthenticateServiceProviderRequest) (*ValidateAuthenticateServiceProviderReply, error)
	// used to validate the "authorized signatory" (this allows a user to specify which eph wallet ID is allowed to sign documents)
	ValidateAuthorizedSignatory(context.Context, *ValidateAuthorizedSignatoryRequest) (*ValidateAuthorizedSignatoryReply, error)
	// used to validate whether this signer can sign a document (is the signer's credentials enough to sign the document?)
	ValidateAuthorizedSigner(context.Context, *ValidateAuthorizedSignerRequest) (*ValidateAuthorizedSignerReply, error)
	SetPublicKey(context.Context, *PublicKey) (*SetPublicKeyReply, error)
	SetJarRegulator(context.Context, *JarRegulator) (*SetJarRegulatorReply, error)
	SetIntervalPublicKeyID(context.Context, *IntervalPublicKeyID) (*SetIntervalPublicKeyIdReply, error)
	SetPioneerJar(context.Context, *PioneerJar) (*SetPioneerJarReply, error)
	SetSecretSharePrivateKey(context.Context, *SecretSharePrivK) (*SetSecretSharePrivateKeyReply, error)
	ValidateDestinationWallet(context.Context, *MsgCreateWallet) (*ValidateDestinationWalletReply, error)
	ValidateCredential(context.Context, *MsgBindCredential) (*ValidateCredentialReply, error)
	ValidateTransferPrime(context.Context, *MsgTransferFunds) (*ValidateTransferPrimeReply, error)
	ValidateTransferDoublePrime(context.Context, *MsgReceiveFunds) (*ValidateTransferDoublePrimeReply, error)
	SyncWallets(context.Context, *MsgSyncWallets) (*SyncWalletsReply, error)
	SyncCredentials(context.Context, *MsgSyncCredentials) (*SyncCredentialsReply, error)
	SyncRecoverKeys(context.Context, *MsgSyncRecoverKeys) (*SyncRecoverKeysReply, error)
	SyncSuspiciousTransactions(context.Context, *MsgSyncSuspiciousTransactions) (*SyncSuspiciousTransactionsReply, error)
	ScanTransaction(context.Context, *MsgScanTransactions) (*ScanTransactionReply, error)
	// called at BeginBlock at a certain interval (i.e. not at every BeginBlock)
	UpdateHeight(context.Context, *MsgUpdateHeight) (*UpdateHeightReply, error)
	// called after each transaction
	TransactionComplete(context.Context, *MsgTransactionComplete) (*TransactionCompleteReply, error)
	// called at each EndBlock
	EndBlock(context.Context, *MsgEndBlock) (*EndBlockReply, error)
	// called on init
	GetStoreHash(context.Context, *MsgGetStoreHash) (*GetStoreHashReply, error)
	mustEmbedUnimplementedQadenaEnclaveServer()
}

// UnimplementedQadenaEnclaveServer must be embedded to have forward compatible implementations.
type UnimplementedQadenaEnclaveServer struct {
}

func (UnimplementedQadenaEnclaveServer) InitEnclave(context.Context, *MsgInitEnclave) (*InitEnclaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitEnclave not implemented")
}
func (UnimplementedQadenaEnclaveServer) SyncEnclave(context.Context, *MsgSyncEnclave) (*SyncEnclaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncEnclave not implemented")
}
func (UnimplementedQadenaEnclaveServer) UpgradeEnclave(context.Context, *MsgUpgradeEnclave) (*UpgradeEnclaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeEnclave not implemented")
}
func (UnimplementedQadenaEnclaveServer) ExportPrivateKey(context.Context, *MsgExportPrivateKey) (*ExportPrivateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportPrivateKey not implemented")
}
func (UnimplementedQadenaEnclaveServer) ExportPrivateState(context.Context, *MsgExportPrivateState) (*ExportPrivateStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportPrivateState not implemented")
}
func (UnimplementedQadenaEnclaveServer) RemovePrivateKey(context.Context, *MsgRemovePrivateKey) (*RemovePrivateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePrivateKey not implemented")
}
func (UnimplementedQadenaEnclaveServer) UpdateSSIntervalKey(context.Context, *MsgUpdateSSIntervalKey) (*UpdateSSIntervalKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSSIntervalKey not implemented")
}
func (UnimplementedQadenaEnclaveServer) QueryEnclaveSyncEnclave(context.Context, *QueryEnclaveSyncEnclaveRequest) (*QueryEnclaveSyncEnclaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEnclaveSyncEnclave not implemented")
}
func (UnimplementedQadenaEnclaveServer) QueryEnclaveSecretShare(context.Context, *QueryEnclaveSecretShareRequest) (*QueryEnclaveSecretShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEnclaveSecretShare not implemented")
}
func (UnimplementedQadenaEnclaveServer) QueryEnclaveRecoverKeyShare(context.Context, *QueryEnclaveRecoverKeyShareRequest) (*QueryEnclaveRecoverKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEnclaveRecoverKeyShare not implemented")
}
func (UnimplementedQadenaEnclaveServer) QueryEnclaveValidateEnclaveIdentity(context.Context, *QueryEnclaveValidateEnclaveIdentityRequest) (*QueryEnclaveValidateEnclaveIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEnclaveValidateEnclaveIdentity not implemented")
}
func (UnimplementedQadenaEnclaveServer) SetEnclaveIdentity(context.Context, *EnclaveIdentity) (*SetEnclaveIdentityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnclaveIdentity not implemented")
}
func (UnimplementedQadenaEnclaveServer) UpdateEnclaveIdentity(context.Context, *PioneerUpdateEnclaveIdentity) (*UpdateEnclaveIdentityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnclaveIdentity not implemented")
}
func (UnimplementedQadenaEnclaveServer) SetWallet(context.Context, *Wallet) (*SetWalletReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWallet not implemented")
}
func (UnimplementedQadenaEnclaveServer) SetProtectKey(context.Context, *ProtectKey) (*SetProtectKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProtectKey not implemented")
}
func (UnimplementedQadenaEnclaveServer) SetRecoverKey(context.Context, *RecoverKey) (*SetRecoverKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecoverKey not implemented")
}
func (UnimplementedQadenaEnclaveServer) SetCredential(context.Context, *Credential) (*SetCredentialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredential not implemented")
}
func (UnimplementedQadenaEnclaveServer) RemoveCredential(context.Context, *Credential) (*RemoveCredentialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCredential not implemented")
}
func (UnimplementedQadenaEnclaveServer) RecoverKeyByCredential(context.Context, *Credential) (*RecoverKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverKeyByCredential not implemented")
}
func (UnimplementedQadenaEnclaveServer) ClaimCredential(context.Context, *MsgClaimCredential) (*MsgClaimCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimCredential not implemented")
}
func (UnimplementedQadenaEnclaveServer) SignRecoverKey(context.Context, *MsgSignRecoverPrivateKey) (*SignRecoverKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignRecoverKey not implemented")
}
func (UnimplementedQadenaEnclaveServer) QueryGetRecoverKey(context.Context, *QueryGetRecoverKeyRequest) (*QueryGetRecoverKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetRecoverKey not implemented")
}
func (UnimplementedQadenaEnclaveServer) QueryFindCredential(context.Context, *QueryFindCredentialRequest) (*QueryFindCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFindCredential not implemented")
}
func (UnimplementedQadenaEnclaveServer) QueryGetSubWalletIDByOriginalWalletID(context.Context, *Credential) (*QueryGetSubWalletIDByOriginalWalletIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetSubWalletIDByOriginalWalletID not implemented")
}
func (UnimplementedQadenaEnclaveServer) ValidateAuthenticateServiceProvider(context.Context, *ValidateAuthenticateServiceProviderRequest) (*ValidateAuthenticateServiceProviderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAuthenticateServiceProvider not implemented")
}
func (UnimplementedQadenaEnclaveServer) ValidateAuthorizedSignatory(context.Context, *ValidateAuthorizedSignatoryRequest) (*ValidateAuthorizedSignatoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAuthorizedSignatory not implemented")
}
func (UnimplementedQadenaEnclaveServer) ValidateAuthorizedSigner(context.Context, *ValidateAuthorizedSignerRequest) (*ValidateAuthorizedSignerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAuthorizedSigner not implemented")
}
func (UnimplementedQadenaEnclaveServer) SetPublicKey(context.Context, *PublicKey) (*SetPublicKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPublicKey not implemented")
}
func (UnimplementedQadenaEnclaveServer) SetJarRegulator(context.Context, *JarRegulator) (*SetJarRegulatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJarRegulator not implemented")
}
func (UnimplementedQadenaEnclaveServer) SetIntervalPublicKeyID(context.Context, *IntervalPublicKeyID) (*SetIntervalPublicKeyIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIntervalPublicKeyID not implemented")
}
func (UnimplementedQadenaEnclaveServer) SetPioneerJar(context.Context, *PioneerJar) (*SetPioneerJarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPioneerJar not implemented")
}
func (UnimplementedQadenaEnclaveServer) SetSecretSharePrivateKey(context.Context, *SecretSharePrivK) (*SetSecretSharePrivateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSecretSharePrivateKey not implemented")
}
func (UnimplementedQadenaEnclaveServer) ValidateDestinationWallet(context.Context, *MsgCreateWallet) (*ValidateDestinationWalletReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDestinationWallet not implemented")
}
func (UnimplementedQadenaEnclaveServer) ValidateCredential(context.Context, *MsgBindCredential) (*ValidateCredentialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCredential not implemented")
}
func (UnimplementedQadenaEnclaveServer) ValidateTransferPrime(context.Context, *MsgTransferFunds) (*ValidateTransferPrimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTransferPrime not implemented")
}
func (UnimplementedQadenaEnclaveServer) ValidateTransferDoublePrime(context.Context, *MsgReceiveFunds) (*ValidateTransferDoublePrimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTransferDoublePrime not implemented")
}
func (UnimplementedQadenaEnclaveServer) SyncWallets(context.Context, *MsgSyncWallets) (*SyncWalletsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWallets not implemented")
}
func (UnimplementedQadenaEnclaveServer) SyncCredentials(context.Context, *MsgSyncCredentials) (*SyncCredentialsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCredentials not implemented")
}
func (UnimplementedQadenaEnclaveServer) SyncRecoverKeys(context.Context, *MsgSyncRecoverKeys) (*SyncRecoverKeysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRecoverKeys not implemented")
}
func (UnimplementedQadenaEnclaveServer) SyncSuspiciousTransactions(context.Context, *MsgSyncSuspiciousTransactions) (*SyncSuspiciousTransactionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSuspiciousTransactions not implemented")
}
func (UnimplementedQadenaEnclaveServer) ScanTransaction(context.Context, *MsgScanTransactions) (*ScanTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanTransaction not implemented")
}
func (UnimplementedQadenaEnclaveServer) UpdateHeight(context.Context, *MsgUpdateHeight) (*UpdateHeightReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHeight not implemented")
}
func (UnimplementedQadenaEnclaveServer) TransactionComplete(context.Context, *MsgTransactionComplete) (*TransactionCompleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionComplete not implemented")
}
func (UnimplementedQadenaEnclaveServer) EndBlock(context.Context, *MsgEndBlock) (*EndBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndBlock not implemented")
}
func (UnimplementedQadenaEnclaveServer) GetStoreHash(context.Context, *MsgGetStoreHash) (*GetStoreHashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreHash not implemented")
}
func (UnimplementedQadenaEnclaveServer) mustEmbedUnimplementedQadenaEnclaveServer() {}

// UnsafeQadenaEnclaveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QadenaEnclaveServer will
// result in compilation errors.
type UnsafeQadenaEnclaveServer interface {
	mustEmbedUnimplementedQadenaEnclaveServer()
}

func RegisterQadenaEnclaveServer(s grpc.ServiceRegistrar, srv QadenaEnclaveServer) {
	s.RegisterService(&QadenaEnclave_ServiceDesc, srv)
}

func _QadenaEnclave_InitEnclave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitEnclave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).InitEnclave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_InitEnclave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).InitEnclave(ctx, req.(*MsgInitEnclave))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SyncEnclave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSyncEnclave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SyncEnclave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SyncEnclave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SyncEnclave(ctx, req.(*MsgSyncEnclave))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_UpgradeEnclave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpgradeEnclave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).UpgradeEnclave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_UpgradeEnclave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).UpgradeEnclave(ctx, req.(*MsgUpgradeEnclave))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ExportPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExportPrivateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ExportPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ExportPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ExportPrivateKey(ctx, req.(*MsgExportPrivateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ExportPrivateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExportPrivateState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ExportPrivateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ExportPrivateState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ExportPrivateState(ctx, req.(*MsgExportPrivateState))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_RemovePrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemovePrivateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).RemovePrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_RemovePrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).RemovePrivateKey(ctx, req.(*MsgRemovePrivateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_UpdateSSIntervalKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSSIntervalKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).UpdateSSIntervalKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_UpdateSSIntervalKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).UpdateSSIntervalKey(ctx, req.(*MsgUpdateSSIntervalKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_QueryEnclaveSyncEnclave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveSyncEnclaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).QueryEnclaveSyncEnclave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_QueryEnclaveSyncEnclave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).QueryEnclaveSyncEnclave(ctx, req.(*QueryEnclaveSyncEnclaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_QueryEnclaveSecretShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveSecretShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).QueryEnclaveSecretShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_QueryEnclaveSecretShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).QueryEnclaveSecretShare(ctx, req.(*QueryEnclaveSecretShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_QueryEnclaveRecoverKeyShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveRecoverKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).QueryEnclaveRecoverKeyShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_QueryEnclaveRecoverKeyShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).QueryEnclaveRecoverKeyShare(ctx, req.(*QueryEnclaveRecoverKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_QueryEnclaveValidateEnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnclaveValidateEnclaveIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).QueryEnclaveValidateEnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_QueryEnclaveValidateEnclaveIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).QueryEnclaveValidateEnclaveIdentity(ctx, req.(*QueryEnclaveValidateEnclaveIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SetEnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnclaveIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SetEnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SetEnclaveIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SetEnclaveIdentity(ctx, req.(*EnclaveIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_UpdateEnclaveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PioneerUpdateEnclaveIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).UpdateEnclaveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_UpdateEnclaveIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).UpdateEnclaveIdentity(ctx, req.(*PioneerUpdateEnclaveIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wallet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SetWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SetWallet(ctx, req.(*Wallet))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SetProtectKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtectKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SetProtectKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SetProtectKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SetProtectKey(ctx, req.(*ProtectKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SetRecoverKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SetRecoverKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SetRecoverKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SetRecoverKey(ctx, req.(*RecoverKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SetCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_RemoveCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).RemoveCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_RemoveCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).RemoveCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_RecoverKeyByCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).RecoverKeyByCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_RecoverKeyByCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).RecoverKeyByCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ClaimCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ClaimCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ClaimCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ClaimCredential(ctx, req.(*MsgClaimCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SignRecoverKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignRecoverPrivateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SignRecoverKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SignRecoverKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SignRecoverKey(ctx, req.(*MsgSignRecoverPrivateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_QueryGetRecoverKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecoverKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).QueryGetRecoverKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_QueryGetRecoverKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).QueryGetRecoverKey(ctx, req.(*QueryGetRecoverKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_QueryFindCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFindCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).QueryFindCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_QueryFindCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).QueryFindCredential(ctx, req.(*QueryFindCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_QueryGetSubWalletIDByOriginalWalletID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).QueryGetSubWalletIDByOriginalWalletID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_QueryGetSubWalletIDByOriginalWalletID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).QueryGetSubWalletIDByOriginalWalletID(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ValidateAuthenticateServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAuthenticateServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ValidateAuthenticateServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ValidateAuthenticateServiceProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ValidateAuthenticateServiceProvider(ctx, req.(*ValidateAuthenticateServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ValidateAuthorizedSignatory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAuthorizedSignatoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ValidateAuthorizedSignatory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ValidateAuthorizedSignatory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ValidateAuthorizedSignatory(ctx, req.(*ValidateAuthorizedSignatoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ValidateAuthorizedSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAuthorizedSignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ValidateAuthorizedSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ValidateAuthorizedSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ValidateAuthorizedSigner(ctx, req.(*ValidateAuthorizedSignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SetPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SetPublicKey(ctx, req.(*PublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SetJarRegulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JarRegulator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SetJarRegulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SetJarRegulator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SetJarRegulator(ctx, req.(*JarRegulator))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SetIntervalPublicKeyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalPublicKeyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SetIntervalPublicKeyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SetIntervalPublicKeyID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SetIntervalPublicKeyID(ctx, req.(*IntervalPublicKeyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SetPioneerJar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PioneerJar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SetPioneerJar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SetPioneerJar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SetPioneerJar(ctx, req.(*PioneerJar))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SetSecretSharePrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretSharePrivK)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SetSecretSharePrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SetSecretSharePrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SetSecretSharePrivateKey(ctx, req.(*SecretSharePrivK))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ValidateDestinationWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateWallet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ValidateDestinationWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ValidateDestinationWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ValidateDestinationWallet(ctx, req.(*MsgCreateWallet))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ValidateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBindCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ValidateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ValidateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ValidateCredential(ctx, req.(*MsgBindCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ValidateTransferPrime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ValidateTransferPrime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ValidateTransferPrime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ValidateTransferPrime(ctx, req.(*MsgTransferFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ValidateTransferDoublePrime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReceiveFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ValidateTransferDoublePrime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ValidateTransferDoublePrime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ValidateTransferDoublePrime(ctx, req.(*MsgReceiveFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SyncWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSyncWallets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SyncWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SyncWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SyncWallets(ctx, req.(*MsgSyncWallets))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SyncCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSyncCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SyncCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SyncCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SyncCredentials(ctx, req.(*MsgSyncCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SyncRecoverKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSyncRecoverKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SyncRecoverKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SyncRecoverKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SyncRecoverKeys(ctx, req.(*MsgSyncRecoverKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_SyncSuspiciousTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSyncSuspiciousTransactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).SyncSuspiciousTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_SyncSuspiciousTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).SyncSuspiciousTransactions(ctx, req.(*MsgSyncSuspiciousTransactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_ScanTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgScanTransactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).ScanTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_ScanTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).ScanTransaction(ctx, req.(*MsgScanTransactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_UpdateHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).UpdateHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_UpdateHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).UpdateHeight(ctx, req.(*MsgUpdateHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_TransactionComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransactionComplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).TransactionComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_TransactionComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).TransactionComplete(ctx, req.(*MsgTransactionComplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_EndBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEndBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).EndBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_EndBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).EndBlock(ctx, req.(*MsgEndBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _QadenaEnclave_GetStoreHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGetStoreHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QadenaEnclaveServer).GetStoreHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QadenaEnclave_GetStoreHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QadenaEnclaveServer).GetStoreHash(ctx, req.(*MsgGetStoreHash))
	}
	return interceptor(ctx, in, info, handler)
}

// QadenaEnclave_ServiceDesc is the grpc.ServiceDesc for QadenaEnclave service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QadenaEnclave_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qadena.qadena.QadenaEnclave",
	HandlerType: (*QadenaEnclaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitEnclave",
			Handler:    _QadenaEnclave_InitEnclave_Handler,
		},
		{
			MethodName: "SyncEnclave",
			Handler:    _QadenaEnclave_SyncEnclave_Handler,
		},
		{
			MethodName: "UpgradeEnclave",
			Handler:    _QadenaEnclave_UpgradeEnclave_Handler,
		},
		{
			MethodName: "ExportPrivateKey",
			Handler:    _QadenaEnclave_ExportPrivateKey_Handler,
		},
		{
			MethodName: "ExportPrivateState",
			Handler:    _QadenaEnclave_ExportPrivateState_Handler,
		},
		{
			MethodName: "RemovePrivateKey",
			Handler:    _QadenaEnclave_RemovePrivateKey_Handler,
		},
		{
			MethodName: "UpdateSSIntervalKey",
			Handler:    _QadenaEnclave_UpdateSSIntervalKey_Handler,
		},
		{
			MethodName: "QueryEnclaveSyncEnclave",
			Handler:    _QadenaEnclave_QueryEnclaveSyncEnclave_Handler,
		},
		{
			MethodName: "QueryEnclaveSecretShare",
			Handler:    _QadenaEnclave_QueryEnclaveSecretShare_Handler,
		},
		{
			MethodName: "QueryEnclaveRecoverKeyShare",
			Handler:    _QadenaEnclave_QueryEnclaveRecoverKeyShare_Handler,
		},
		{
			MethodName: "QueryEnclaveValidateEnclaveIdentity",
			Handler:    _QadenaEnclave_QueryEnclaveValidateEnclaveIdentity_Handler,
		},
		{
			MethodName: "SetEnclaveIdentity",
			Handler:    _QadenaEnclave_SetEnclaveIdentity_Handler,
		},
		{
			MethodName: "UpdateEnclaveIdentity",
			Handler:    _QadenaEnclave_UpdateEnclaveIdentity_Handler,
		},
		{
			MethodName: "SetWallet",
			Handler:    _QadenaEnclave_SetWallet_Handler,
		},
		{
			MethodName: "SetProtectKey",
			Handler:    _QadenaEnclave_SetProtectKey_Handler,
		},
		{
			MethodName: "SetRecoverKey",
			Handler:    _QadenaEnclave_SetRecoverKey_Handler,
		},
		{
			MethodName: "SetCredential",
			Handler:    _QadenaEnclave_SetCredential_Handler,
		},
		{
			MethodName: "RemoveCredential",
			Handler:    _QadenaEnclave_RemoveCredential_Handler,
		},
		{
			MethodName: "RecoverKeyByCredential",
			Handler:    _QadenaEnclave_RecoverKeyByCredential_Handler,
		},
		{
			MethodName: "ClaimCredential",
			Handler:    _QadenaEnclave_ClaimCredential_Handler,
		},
		{
			MethodName: "SignRecoverKey",
			Handler:    _QadenaEnclave_SignRecoverKey_Handler,
		},
		{
			MethodName: "QueryGetRecoverKey",
			Handler:    _QadenaEnclave_QueryGetRecoverKey_Handler,
		},
		{
			MethodName: "QueryFindCredential",
			Handler:    _QadenaEnclave_QueryFindCredential_Handler,
		},
		{
			MethodName: "QueryGetSubWalletIDByOriginalWalletID",
			Handler:    _QadenaEnclave_QueryGetSubWalletIDByOriginalWalletID_Handler,
		},
		{
			MethodName: "ValidateAuthenticateServiceProvider",
			Handler:    _QadenaEnclave_ValidateAuthenticateServiceProvider_Handler,
		},
		{
			MethodName: "ValidateAuthorizedSignatory",
			Handler:    _QadenaEnclave_ValidateAuthorizedSignatory_Handler,
		},
		{
			MethodName: "ValidateAuthorizedSigner",
			Handler:    _QadenaEnclave_ValidateAuthorizedSigner_Handler,
		},
		{
			MethodName: "SetPublicKey",
			Handler:    _QadenaEnclave_SetPublicKey_Handler,
		},
		{
			MethodName: "SetJarRegulator",
			Handler:    _QadenaEnclave_SetJarRegulator_Handler,
		},
		{
			MethodName: "SetIntervalPublicKeyID",
			Handler:    _QadenaEnclave_SetIntervalPublicKeyID_Handler,
		},
		{
			MethodName: "SetPioneerJar",
			Handler:    _QadenaEnclave_SetPioneerJar_Handler,
		},
		{
			MethodName: "SetSecretSharePrivateKey",
			Handler:    _QadenaEnclave_SetSecretSharePrivateKey_Handler,
		},
		{
			MethodName: "ValidateDestinationWallet",
			Handler:    _QadenaEnclave_ValidateDestinationWallet_Handler,
		},
		{
			MethodName: "ValidateCredential",
			Handler:    _QadenaEnclave_ValidateCredential_Handler,
		},
		{
			MethodName: "ValidateTransferPrime",
			Handler:    _QadenaEnclave_ValidateTransferPrime_Handler,
		},
		{
			MethodName: "ValidateTransferDoublePrime",
			Handler:    _QadenaEnclave_ValidateTransferDoublePrime_Handler,
		},
		{
			MethodName: "SyncWallets",
			Handler:    _QadenaEnclave_SyncWallets_Handler,
		},
		{
			MethodName: "SyncCredentials",
			Handler:    _QadenaEnclave_SyncCredentials_Handler,
		},
		{
			MethodName: "SyncRecoverKeys",
			Handler:    _QadenaEnclave_SyncRecoverKeys_Handler,
		},
		{
			MethodName: "SyncSuspiciousTransactions",
			Handler:    _QadenaEnclave_SyncSuspiciousTransactions_Handler,
		},
		{
			MethodName: "ScanTransaction",
			Handler:    _QadenaEnclave_ScanTransaction_Handler,
		},
		{
			MethodName: "UpdateHeight",
			Handler:    _QadenaEnclave_UpdateHeight_Handler,
		},
		{
			MethodName: "TransactionComplete",
			Handler:    _QadenaEnclave_TransactionComplete_Handler,
		},
		{
			MethodName: "EndBlock",
			Handler:    _QadenaEnclave_EndBlock_Handler,
		},
		{
			MethodName: "GetStoreHash",
			Handler:    _QadenaEnclave_GetStoreHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qadena/qadena/enclave.proto",
}
